
stm32g473_ina219.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003090  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003278  08003278  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003278  08003278  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  0800328c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800328c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a113  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019dc  00000000  00000000  0002a14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2e9  00000000  00000000  0002cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b08d  00000000  00000000  0004b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf9a9  00000000  00000000  0005612e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  00115b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003250 	.word	0x08003250

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003250 	.word	0x08003250

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <Read16>:

#include "main.h"
#include "INA219.h"

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af04      	add	r7, sp, #16
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	b29a      	uxth	r2, r3
 8000838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083c:	9302      	str	r3, [sp, #8]
 800083e:	2302      	movs	r3, #2
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2301      	movs	r3, #1
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	f000 ff86 	bl	800175c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000850:	7b3b      	ldrb	r3, [r7, #12]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	7b7b      	ldrb	r3, [r7, #13]
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21b      	sxth	r3, r3
 800085e:	b29b      	uxth	r3, r3
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af04      	add	r7, sp, #16
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
 8000874:	4613      	mov	r3, r2
 8000876:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000878:	883b      	ldrh	r3, [r7, #0]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000882:	883b      	ldrh	r3, [r7, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	b29a      	uxth	r2, r3
 8000890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	2302      	movs	r3, #2
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	f000 fe46 	bl	8001534 <HAL_I2C_Mem_Write>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80008b8:	2102      	movs	r1, #2
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffb2 	bl	8000824 <Read16>
 80008c0:	4603      	mov	r3, r0
 80008c2:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	08db      	lsrs	r3, r3, #3
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	b29b      	uxth	r3, r3

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 80008de:	2104      	movs	r1, #4
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff9f 	bl	8000824 <Read16>
 80008e6:	4603      	mov	r3, r0
 80008e8:	81fb      	strh	r3, [r7, #14]

	return (result );
 80008ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ffe8 	bl	80008d6 <INA219_ReadCurrent_raw>
 8000906:	4603      	mov	r3, r0
 8000908:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 800090a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800090e:	ee07 3a90 	vmov	s15, r3
 8000912:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <INA219_ReadCurrent+0x3c>)
 8000918:	ed93 7a00 	vldr	s14, [r3]
 800091c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000924:	ee17 3a90 	vmov	r3, s15
 8000928:	b21b      	sxth	r3, r3
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000028 	.word	0x20000028

08000938 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000940:	2101      	movs	r1, #1
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff6e 	bl	8000824 <Read16>
 8000948:	4603      	mov	r3, r0
 800094a:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 800094c:	89fb      	ldrh	r3, [r7, #14]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fede 	bl	8000710 <__aeabi_i2d>
 8000954:	a308      	add	r3, pc, #32	; (adr r3, 8000978 <INA219_ReadShuntVolage+0x40>)
 8000956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095a:	f7ff fc5d 	bl	8000218 <__aeabi_dmul>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	f7ff ff3d 	bl	80007e4 <__aeabi_d2uiz>
 800096a:	4603      	mov	r3, r0
 800096c:	b29b      	uxth	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	47ae147b 	.word	0x47ae147b
 800097c:	3f847ae1 	.word	0x3f847ae1

08000980 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000988:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800098c:	2100      	movs	r1, #0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ff6a 	bl	8000868 <Write16>
	HAL_Delay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f000 fab5 	bl	8000f04 <HAL_Delay>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	461a      	mov	r2, r3
 80009b2:	2105      	movs	r1, #5
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff57 	bl	8000868 <Write16>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	461a      	mov	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff47 	bl	8000868 <Write16>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80009ec:	f643 139f 	movw	r3, #14751	; 0x399f
 80009f0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <INA219_setCalibration_32V_2A+0x44>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <INA219_setCalibration_32V_2A+0x48>)
 80009fc:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <INA219_setCalibration_32V_2A+0x4c>)
 80009fe:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <INA219_setCalibration_32V_2A+0x50>)
 8000a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a06:	601a      	str	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <INA219_setCalibration_32V_2A+0x44>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffc7 	bl	80009a2 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ffd2 	bl	80009c2 <INA219_setConfig>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000030 	.word	0x20000030
 8000a2c:	20000028 	.word	0x20000028
 8000a30:	41200000 	.word	0x41200000
 8000a34:	2000002c 	.word	0x2000002c

08000a38 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4613      	mov	r3, r2
 8000a44:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <INA219_Init+0x60>)
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <INA219_Init+0x64>)
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	b299      	uxth	r1, r3
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	68b8      	ldr	r0, [r7, #8]
 8000a70:	f000 ff8e 	bl	8001990 <HAL_I2C_IsDeviceReady>
 8000a74:	4603      	mov	r3, r0
 8000a76:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ff7e 	bl	8000980 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff ffad 	bl	80009e4 <INA219_setCalibration_32V_2A>

		return 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <INA219_Init+0x58>
	}

	else
	{
		return 0;
 8000a8e:	2300      	movs	r3, #0
	}
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000028 	.word	0x20000028
 8000a9c:	2000002c 	.word	0x2000002c

08000aa0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aa4:	f000 f9bd 	bl	8000e22 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000aa8:	f000 f82e 	bl	8000b08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aac:	f000 f8ac 	bl	8000c08 <MX_GPIO_Init>
	MX_I2C3_Init();
 8000ab0:	f000 f86a 	bl	8000b88 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */
	while(!INA219_Init(&ina219, &hi2c3, INA219_ADDRESS))
 8000ab4:	bf00      	nop
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	490e      	ldr	r1, [pc, #56]	; (8000af4 <main+0x54>)
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <main+0x58>)
 8000abc:	f7ff ffbc 	bl	8000a38 <INA219_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f7      	beq.n	8000ab6 <main+0x16>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		vbus = INA219_ReadBusVoltage(&ina219);
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <main+0x58>)
 8000ac8:	f7ff fef2 	bl	80008b0 <INA219_ReadBusVoltage>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <main+0x5c>)
 8000ad2:	801a      	strh	r2, [r3, #0]
		vshunt = INA219_ReadShuntVolage(&ina219);
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <main+0x58>)
 8000ad6:	f7ff ff2f 	bl	8000938 <INA219_ReadShuntVolage>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <main+0x60>)
 8000ae0:	801a      	strh	r2, [r3, #0]
		current = INA219_ReadCurrent(&ina219);
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <main+0x58>)
 8000ae4:	f7ff ff08 	bl	80008f8 <INA219_ReadCurrent>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <main+0x64>)
 8000aee:	801a      	strh	r2, [r3, #0]
		vbus = INA219_ReadBusVoltage(&ina219);
 8000af0:	e7e9      	b.n	8000ac6 <main+0x26>
 8000af2:	bf00      	nop
 8000af4:	20000044 	.word	0x20000044
 8000af8:	20000034 	.word	0x20000034
 8000afc:	2000003c 	.word	0x2000003c
 8000b00:	2000003e 	.word	0x2000003e
 8000b04:	20000040 	.word	0x20000040

08000b08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2238      	movs	r2, #56	; 0x38
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fb92 	bl	8003240 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b2e:	f001 fb75 	bl	800221c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fc0b 	bl	8002364 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8000b54:	f000 f87c 	bl	8000c50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 ff0f 	bl	8002994 <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8000b7c:	f000 f868 	bl	8000c50 <Error_Handler>
	}
}
 8000b80:	bf00      	nop
 8000b82:	3750      	adds	r7, #80	; 0x50
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_I2C3_Init+0x78>)
 8000b90:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00303D5B;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <MX_I2C3_Init+0x7c>)
 8000b96:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000bc4:	f000 fc26 	bl	8001414 <HAL_I2C_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8000bce:	f000 f83f 	bl	8000c50 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000bd6:	f001 fa89 	bl	80020ec <HAL_I2CEx_ConfigAnalogFilter>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8000be0:	f000 f836 	bl	8000c50 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_I2C3_Init+0x74>)
 8000be8:	f001 facb 	bl	8002182 <HAL_I2CEx_ConfigDigitalFilter>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8000bf2:	f000 f82d 	bl	8000c50 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000044 	.word	0x20000044
 8000c00:	40007800 	.word	0x40007800
 8000c04:	00303d5b 	.word	0x00303d5b

08000c08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_GPIO_Init+0x44>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <MX_GPIO_Init+0x44>)
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_GPIO_Init+0x44>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_GPIO_Init+0x44>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <MX_GPIO_Init+0x44>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_GPIO_Init+0x44>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09e      	sub	sp, #120	; 0x78
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	2254      	movs	r2, #84	; 0x54
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fabb 	bl	8003240 <memset>
  if(hi2c->Instance==I2C3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_I2C_MspInit+0xa8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d137      	bne.n	8000d44 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 f83a 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cee:	f7ff ffaf 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	2312      	movs	r3, #18
 8000d12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <HAL_I2C_MspInit+0xb0>)
 8000d28:	f000 f9f2 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d36:	6593      	str	r3, [r2, #88]	; 0x58
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_I2C_MspInit+0xac>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3778      	adds	r7, #120	; 0x78
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40007800 	.word	0x40007800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000800 	.word	0x48000800

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f890 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f002 f9fb 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fe4d 	bl	8000aa0 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e14:	08003280 	.word	0x08003280
  ldr r2, =_sbss
 8000e18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e1c:	20000094 	.word	0x20000094

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>

08000e22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f93d 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	200f      	movs	r0, #15
 8000e34:	f000 f80e 	bl	8000e54 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e001      	b.n	8000e48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e44:	f7ff ff0a 	bl	8000c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e48:	79fb      	ldrb	r3, [r7, #7]

}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_InitTick+0x68>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d022      	beq.n	8000eae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_InitTick+0x6c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_InitTick+0x68>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f93a 	bl	80010f6 <HAL_SYSTICK_Config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10f      	bne.n	8000ea8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d809      	bhi.n	8000ea2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	f000 f914 	bl	80010c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_InitTick+0x70>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e004      	b.n	8000eb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e001      	b.n	8000eb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000090 	.word	0x20000090
 8000ee8:	20000008 	.word	0x20000008

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000090 	.word	0x20000090

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d004      	beq.n	8000f28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_Delay+0x40>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f28:	bf00      	nop
 8000f2a:	f7ff ffdf 	bl	8000eec <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d8f7      	bhi.n	8000f2a <HAL_Delay+0x26>
  {
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000008 	.word	0x20000008

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff47 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff5e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffb2 	bl	8001068 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800111e:	e15a      	b.n	80013d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 814c 	beq.w	80013d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80a6 	beq.w	80013d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_GPIO_Init+0x2e4>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_GPIO_Init+0x2e4>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6613      	str	r3, [r2, #96]	; 0x60
 8001290:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_GPIO_Init+0x2e4>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129c:	4a56      	ldr	r2, [pc, #344]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c6:	d01f      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_GPIO_Init+0x2ec>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d019      	beq.n	8001304 <HAL_GPIO_Init+0x1f4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d013      	beq.n	8001300 <HAL_GPIO_Init+0x1f0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4a      	ldr	r2, [pc, #296]	; (8001404 <HAL_GPIO_Init+0x2f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d00d      	beq.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a49      	ldr	r2, [pc, #292]	; (8001408 <HAL_GPIO_Init+0x2f8>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d007      	beq.n	80012f8 <HAL_GPIO_Init+0x1e8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a48      	ldr	r2, [pc, #288]	; (800140c <HAL_GPIO_Init+0x2fc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d101      	bne.n	80012f4 <HAL_GPIO_Init+0x1e4>
 80012f0:	2305      	movs	r3, #5
 80012f2:	e00a      	b.n	800130a <HAL_GPIO_Init+0x1fa>
 80012f4:	2306      	movs	r3, #6
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x1fa>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x1fa>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x1fa>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x1fa>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x1fa>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131a:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_GPIO_Init+0x300>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134c:	4a30      	ldr	r2, [pc, #192]	; (8001410 <HAL_GPIO_Init+0x300>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x300>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001376:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_GPIO_Init+0x300>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_GPIO_Init+0x300>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x300>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_GPIO_Init+0x300>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_GPIO_Init+0x300>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f ae9d 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	48001400 	.word	0x48001400
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e081      	b.n	800152a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fc32 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001464:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001474:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d107      	bne.n	800148e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e006      	b.n	800149c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800149a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d104      	bne.n	80014ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69d9      	ldr	r1, [r3, #28]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	4608      	mov	r0, r1
 800153e:	4611      	mov	r1, r2
 8001540:	461a      	mov	r2, r3
 8001542:	4603      	mov	r3, r0
 8001544:	817b      	strh	r3, [r7, #10]
 8001546:	460b      	mov	r3, r1
 8001548:	813b      	strh	r3, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b20      	cmp	r3, #32
 8001558:	f040 80f9 	bne.w	800174e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_I2C_Mem_Write+0x34>
 8001562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0ed      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_I2C_Mem_Write+0x4e>
 800157e:	2302      	movs	r3, #2
 8001580:	e0e6      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800158a:	f7ff fcaf 	bl	8000eec <HAL_GetTick>
 800158e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2319      	movs	r3, #25
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 fbcb 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0d1      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2221      	movs	r2, #33	; 0x21
 80015b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2240      	movs	r2, #64	; 0x40
 80015b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015d4:	88f8      	ldrh	r0, [r7, #6]
 80015d6:	893a      	ldrh	r2, [r7, #8]
 80015d8:	8979      	ldrh	r1, [r7, #10]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4603      	mov	r3, r0
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 fadb 	bl	8001ba0 <I2C_RequestMemoryWrite>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0a9      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001600:	b29b      	uxth	r3, r3
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d90e      	bls.n	8001624 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	22ff      	movs	r2, #255	; 0xff
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	b2da      	uxtb	r2, r3
 8001612:	8979      	ldrh	r1, [r7, #10]
 8001614:	2300      	movs	r3, #0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fd33 	bl	8002088 <I2C_TransferConfig>
 8001622:	e00f      	b.n	8001644 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	b2da      	uxtb	r2, r3
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fd22 	bl	8002088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fbb5 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e07b      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001672:	b29b      	uxth	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168c:	b29b      	uxth	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d034      	beq.n	80016fc <HAL_I2C_Mem_Write+0x1c8>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001696:	2b00      	cmp	r3, #0
 8001698:	d130      	bne.n	80016fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	2200      	movs	r2, #0
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 fb47 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e04d      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d90e      	bls.n	80016dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	8979      	ldrh	r1, [r7, #10]
 80016cc:	2300      	movs	r3, #0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fcd7 	bl	8002088 <I2C_TransferConfig>
 80016da:	e00f      	b.n	80016fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	8979      	ldrh	r1, [r7, #10]
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fcc6 	bl	8002088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d19e      	bne.n	8001644 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fb94 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e01a      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2220      	movs	r2, #32
 8001720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_I2C_Mem_Write+0x224>)
 800172e:	400b      	ands	r3, r1
 8001730:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2220      	movs	r2, #32
 8001736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	fe00e800 	.word	0xfe00e800

0800175c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af02      	add	r7, sp, #8
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	817b      	strh	r3, [r7, #10]
 800176e:	460b      	mov	r3, r1
 8001770:	813b      	strh	r3, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b20      	cmp	r3, #32
 8001780:	f040 80fd 	bne.w	800197e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_I2C_Mem_Read+0x34>
 800178a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001796:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0f1      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_I2C_Mem_Read+0x4e>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e0ea      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b2:	f7ff fb9b 	bl	8000eec <HAL_GetTick>
 80017b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2319      	movs	r3, #25
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fab7 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d5      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2222      	movs	r2, #34	; 0x22
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017fc:	88f8      	ldrh	r0, [r7, #6]
 80017fe:	893a      	ldrh	r2, [r7, #8]
 8001800:	8979      	ldrh	r1, [r7, #10]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4603      	mov	r3, r0
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fa1b 	bl	8001c48 <I2C_RequestMemoryRead>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0ad      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d90e      	bls.n	800184c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	b2da      	uxtb	r2, r3
 800183a:	8979      	ldrh	r1, [r7, #10]
 800183c:	4b52      	ldr	r3, [pc, #328]	; (8001988 <HAL_I2C_Mem_Read+0x22c>)
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fc1f 	bl	8002088 <I2C_TransferConfig>
 800184a:	e00f      	b.n	800186c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	8979      	ldrh	r1, [r7, #10]
 800185e:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_I2C_Mem_Read+0x22c>)
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fc0e 	bl	8002088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	2200      	movs	r2, #0
 8001874:	2104      	movs	r1, #4
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fa5e 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07c      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d034      	beq.n	800192c <HAL_I2C_Mem_Read+0x1d0>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d130      	bne.n	800192c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2200      	movs	r2, #0
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fa2f 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e04d      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d90e      	bls.n	800190c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	22ff      	movs	r2, #255	; 0xff
 80018f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	8979      	ldrh	r1, [r7, #10]
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fbbf 	bl	8002088 <I2C_TransferConfig>
 800190a:	e00f      	b.n	800192c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	b2da      	uxtb	r2, r3
 800191c:	8979      	ldrh	r1, [r7, #10]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fbae 	bl	8002088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d19a      	bne.n	800186c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fa7c 	bl	8001e38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e01a      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2220      	movs	r2, #32
 8001950:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_I2C_Mem_Read+0x230>)
 800195e:	400b      	ands	r3, r1
 8001960:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2220      	movs	r2, #32
 8001966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800197e:	2302      	movs	r3, #2
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	80002400 	.word	0x80002400
 800198c:	fe00e800 	.word	0xfe00e800

08001990 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	460b      	mov	r3, r1
 800199e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	f040 80f1 	bne.w	8001b94 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
 80019c4:	e0e7      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_I2C_IsDeviceReady+0x44>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e0e0      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_I2C_IsDeviceReady+0x72>
 80019f2:	897b      	ldrh	r3, [r7, #10]
 80019f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a00:	e004      	b.n	8001a0c <HAL_I2C_IsDeviceReady+0x7c>
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a08:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff fa6b 	bl	8000eec <HAL_GetTick>
 8001a16:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a44:	e034      	b.n	8001ab0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d01a      	beq.n	8001a84 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff fa4d 	bl	8000eec <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d302      	bcc.n	8001a64 <HAL_I2C_IsDeviceReady+0xd4>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e088      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <HAL_I2C_IsDeviceReady+0x12c>
 8001ab6:	7fbb      	ldrb	r3, [r7, #30]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0c4      	beq.n	8001a46 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d01a      	beq.n	8001b00 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f92f 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e058      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e04a      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	2120      	movs	r1, #32
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f914 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e03d      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2220      	movs	r2, #32
 8001b28:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d118      	bne.n	8001b64 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b40:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8f3 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e01c      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2220      	movs	r2, #32
 8001b62:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	f63f af3b 	bhi.w	80019ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	813b      	strh	r3, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	8979      	ldrh	r1, [r7, #10]
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <I2C_RequestMemoryWrite+0xa4>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fa5d 	bl	8002088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	69b9      	ldr	r1, [r7, #24]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f8f0 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e02c      	b.n	8001c3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be8:	893b      	ldrh	r3, [r7, #8]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf2:	e015      	b.n	8001c20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bf4:	893b      	ldrh	r3, [r7, #8]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8d6 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e012      	b.n	8001c3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c16:	893b      	ldrh	r3, [r7, #8]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f884 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	80002000 	.word	0x80002000

08001c48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	4608      	mov	r0, r1
 8001c52:	4611      	mov	r1, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	813b      	strh	r3, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	8979      	ldrh	r1, [r7, #10]
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <I2C_RequestMemoryRead+0xa4>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fa0a 	bl	8002088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f89d 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02c      	b.n	8001ce2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8e:	893b      	ldrh	r3, [r7, #8]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
 8001c98:	e015      	b.n	8001cc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c9a:	893b      	ldrh	r3, [r7, #8]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f883 	bl	8001db8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e012      	b.n	8001ce2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cbc:	893b      	ldrh	r3, [r7, #8]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f831 	bl	8001d38 <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	80002000 	.word	0x80002000

08001cf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d103      	bne.n	8001d0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d007      	beq.n	8001d2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	619a      	str	r2, [r3, #24]
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d48:	e022      	b.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d01e      	beq.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7ff f8cb 	bl	8000eec <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d113      	bne.n	8001d90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e00f      	b.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d0cd      	beq.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc4:	e02c      	b.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f870 	bl	8001eb0 <I2C_IsErrorOccurred>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e02a      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d01e      	beq.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de2:	f7ff f883 	bl	8000eec <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d302      	bcc.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d113      	bne.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d1cb      	bne.n	8001dc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e44:	e028      	b.n	8001e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f830 	bl	8001eb0 <I2C_IsErrorOccurred>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e026      	b.n	8001ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5a:	f7ff f847 	bl	8000eec <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d302      	bcc.n	8001e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d113      	bne.n	8001e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e007      	b.n	8001ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d1cf      	bne.n	8001e46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d075      	beq.n	8001fc8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ee4:	e056      	b.n	8001f94 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d052      	beq.n	8001f94 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eee:	f7fe fffd 	bl	8000eec <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d302      	bcc.n	8001f04 <I2C_IsErrorOccurred+0x54>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d147      	bne.n	8001f94 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f26:	d12e      	bne.n	8001f86 <I2C_IsErrorOccurred+0xd6>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f2e:	d02a      	beq.n	8001f86 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d027      	beq.n	8001f86 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f44:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f46:	f7fe ffd1 	bl	8000eec <HAL_GetTick>
 8001f4a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4c:	e01b      	b.n	8001f86 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f4e:	f7fe ffcd 	bl	8000eec <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b19      	cmp	r3, #25
 8001f5a:	d914      	bls.n	8001f86 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d1dc      	bne.n	8001f4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d003      	beq.n	8001faa <I2C_IsErrorOccurred+0xfa>
 8001fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d09d      	beq.n	8001ee6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800200c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01c      	beq.n	8002078 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fe56 	bl	8001cf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <I2C_IsErrorOccurred+0x1d4>)
 8002050:	400b      	ands	r3, r1
 8002052:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	431a      	orrs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	fe00e800 	.word	0xfe00e800

08002088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	817b      	strh	r3, [r7, #10]
 8002096:	4613      	mov	r3, r2
 8002098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020a0:	7a7b      	ldrb	r3, [r7, #9]
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020a8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	0d5b      	lsrs	r3, r3, #21
 80020c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <I2C_TransferConfig+0x60>)
 80020c8:	430b      	orrs	r3, r1
 80020ca:	43db      	mvns	r3, r3
 80020cc:	ea02 0103 	and.w	r1, r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	03ff63ff 	.word	0x03ff63ff

080020ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d138      	bne.n	8002174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800210c:	2302      	movs	r3, #2
 800210e:	e032      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6819      	ldr	r1, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	e000      	b.n	8002176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
  }
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	d139      	bne.n	800220c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e033      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2224      	movs	r2, #36	; 0x24
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d141      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800222a:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002236:	d131      	bne.n	800229c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002238:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223e:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002248:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002250:	4a41      	ldr	r2, [pc, #260]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2232      	movs	r2, #50	; 0x32
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226e:	e002      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3b01      	subs	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d102      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f2      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800228a:	4b33      	ldr	r3, [pc, #204]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002296:	d158      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e057      	b.n	800234c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a2:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022ac:	e04d      	b.n	800234a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d141      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d131      	bne.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ca:	4a23      	ldr	r2, [pc, #140]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022dc:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2232      	movs	r2, #50	; 0x32
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fa:	e002      	b.n	8002302 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3b01      	subs	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d102      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f2      	bne.n	80022fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d112      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e011      	b.n	800234c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002338:	e007      	b.n	800234a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002348:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40007000 	.word	0x40007000
 800235c:	20000000 	.word	0x20000000
 8002360:	431bde83 	.word	0x431bde83

08002364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e306      	b.n	8002984 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	4b97      	ldr	r3, [pc, #604]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238c:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3e>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b8d      	ldr	r3, [pc, #564]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d157      	bne.n	800246c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e2e1      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x74>
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a84      	ldr	r2, [pc, #528]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b7f      	ldr	r3, [pc, #508]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7e      	ldr	r2, [pc, #504]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023fc:	4b78      	ldr	r3, [pc, #480]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a77      	ldr	r2, [pc, #476]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b75      	ldr	r3, [pc, #468]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a74      	ldr	r2, [pc, #464]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fd66 	bl	8000eec <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fd62 	bl	8000eec <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e2a6      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002436:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xc0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fd52 	bl	8000eec <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fd4e 	bl	8000eec <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e292      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245e:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0xe8>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d075      	beq.n	8002566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247a:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002484:	4b56      	ldr	r3, [pc, #344]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b0c      	cmp	r3, #12
 8002492:	d102      	bne.n	800249a <HAL_RCC_OscConfig+0x136>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_OscConfig+0x13c>
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11f      	bne.n	80024e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x154>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e265      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	4946      	ldr	r1, [pc, #280]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024cc:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_RCC_OscConfig+0x280>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fcbf 	bl	8000e54 <HAL_InitTick>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d043      	beq.n	8002564 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e251      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d023      	beq.n	8002530 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fcfa 	bl	8000eec <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fc:	f7fe fcf6 	bl	8000eec <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e23a      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250e:	4b34      	ldr	r3, [pc, #208]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	061b      	lsls	r3, r3, #24
 8002528:	492d      	ldr	r1, [pc, #180]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
 800252e:	e01a      	b.n	8002566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fcd6 	bl	8000eec <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7fe fcd2 	bl	8000eec <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e216      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1e0>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d041      	beq.n	80025f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 800257c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002580:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fe fcaf 	bl	8000eec <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002592:	f7fe fcab 	bl	8000eec <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1ef      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80025a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ef      	beq.n	8002592 <HAL_RCC_OscConfig+0x22e>
 80025b2:	e020      	b.n	80025f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x27c>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe fc92 	bl	8000eec <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ca:	e00d      	b.n	80025e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7fe fc8e 	bl	8000eec <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d906      	bls.n	80025e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1d2      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e8:	4b8c      	ldr	r3, [pc, #560]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ea      	bne.n	80025cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a6 	beq.w	8002750 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x2b4>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x2b6>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
 800262a:	4b7c      	ldr	r3, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263a:	4b79      	ldr	r3, [pc, #484]	; (8002820 <HAL_RCC_OscConfig+0x4bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x4bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4bc>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe fc4b 	bl	8000eec <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe fc47 	bl	8000eec <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e18b      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266c:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x4bc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <HAL_RCC_OscConfig+0x32e>
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002690:	e024      	b.n	80026dc <HAL_RCC_OscConfig+0x378>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d110      	bne.n	80026bc <HAL_RCC_OscConfig+0x358>
 800269a:	4b60      	ldr	r3, [pc, #384]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	4a5e      	ldr	r2, [pc, #376]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026aa:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	4a5a      	ldr	r2, [pc, #360]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ba:	e00f      	b.n	80026dc <HAL_RCC_OscConfig+0x378>
 80026bc:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fc02 	bl	8000eec <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fbfe 	bl	8000eec <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e140      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002702:	4b46      	ldr	r3, [pc, #280]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ed      	beq.n	80026ec <HAL_RCC_OscConfig+0x388>
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fbeb 	bl	8000eec <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe fbe7 	bl	8000eec <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e129      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ed      	bne.n	800271a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a34      	ldr	r2, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276a:	4a2c      	ldr	r2, [pc, #176]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fbba 	bl	8000eec <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277c:	f7fe fbb6 	bl	8000eec <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0fa      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 8002790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCC_OscConfig+0x418>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80027a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fb9d 	bl	8000eec <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b6:	f7fe fb99 	bl	8000eec <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0dd      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80027ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80d1 	beq.w	8002982 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	f000 808b 	beq.w	8002904 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d15e      	bne.n	80028b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fb73 	bl	8000eec <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	e00c      	b.n	8002824 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fb6f 	bl	8000eec <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d905      	bls.n	8002824 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0b3      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ec      	bne.n	800280a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_OscConfig+0x62c>)
 8002836:	4013      	ands	r3, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6a11      	ldr	r1, [r2, #32]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002840:	3a01      	subs	r2, #1
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	4311      	orrs	r1, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800284a:	0212      	lsls	r2, r2, #8
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002852:	0852      	lsrs	r2, r2, #1
 8002854:	3a01      	subs	r2, #1
 8002856:	0552      	lsls	r2, r2, #21
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800285e:	0852      	lsrs	r2, r2, #1
 8002860:	3a01      	subs	r2, #1
 8002862:	0652      	lsls	r2, r2, #25
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800286a:	06d2      	lsls	r2, r2, #27
 800286c:	430a      	orrs	r2, r1
 800286e:	4947      	ldr	r1, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002870:	4313      	orrs	r3, r2
 8002872:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002874:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a44      	ldr	r2, [pc, #272]	; (800298c <HAL_RCC_OscConfig+0x628>)
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a41      	ldr	r2, [pc, #260]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fb2e 	bl	8000eec <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb2a 	bl	8000eec <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e06e      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x530>
 80028b2:	e066      	b.n	8002982 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a34      	ldr	r2, [pc, #208]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a2e      	ldr	r2, [pc, #184]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fb06 	bl	8000eec <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fb02 	bl	8000eec <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e046      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x580>
 8002902:	e03e      	b.n	8002982 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e039      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d12c      	bne.n	800297e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	3b01      	subs	r3, #1
 8002930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d123      	bne.n	800297e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d11b      	bne.n	800297e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d113      	bne.n	800297e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	3b01      	subs	r3, #1
 8002964:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d109      	bne.n	800297e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	019f800c 	.word	0x019f800c

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e11e      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b91      	ldr	r3, [pc, #580]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d910      	bls.n	80029dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b8e      	ldr	r3, [pc, #568]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 020f 	bic.w	r2, r3, #15
 80029c2:	498c      	ldr	r1, [pc, #560]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e106      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d073      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d129      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f0:	4b81      	ldr	r3, [pc, #516]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0f4      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a00:	f000 f966 	bl	8002cd0 <RCC_GetSysClockFreqFromPLLSource>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <HAL_RCC_ClockConfig+0x268>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d93f      	bls.n	8002a8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a0e:	4b7a      	ldr	r3, [pc, #488]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d033      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12f      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a2e:	4b72      	ldr	r3, [pc, #456]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a36:	4a70      	ldr	r2, [pc, #448]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e024      	b.n	8002a8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0c6      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5c:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0be      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a6c:	f000 f8ce 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <HAL_RCC_ClockConfig+0x268>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d909      	bls.n	8002a8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7a:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4957      	ldr	r1, [pc, #348]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fa24 	bl	8000eec <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe fa20 	bl	8000eec <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e095      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d023      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a42      	ldr	r2, [pc, #264]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002af2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b00:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b08:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b10:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4936      	ldr	r1, [pc, #216]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d105      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d21d      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 020f 	bic.w	r2, r3, #15
 8002b4c:	4929      	ldr	r1, [pc, #164]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b54:	f7fe f9ca 	bl	8000eec <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe f9c6 	bl	8000eec <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e03b      	b.n	8002bea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1ed      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4917      	ldr	r1, [pc, #92]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490f      	ldr	r1, [pc, #60]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bbe:	f000 f825 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490c      	ldr	r1, [pc, #48]	; (8002c00 <HAL_RCC_ClockConfig+0x26c>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x270>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f936 	bl	8000e54 <HAL_InitTick>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	04c4b400 	.word	0x04c4b400
 8002c00:	08003268 	.word	0x08003268
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c12:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e047      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d102      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	e03e      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d136      	bne.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3301      	adds	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6a:	68d2      	ldr	r2, [r2, #12]
 8002c6c:	0a12      	lsrs	r2, r2, #8
 8002c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
      break;
 8002c78:	e00c      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	0a12      	lsrs	r2, r2, #8
 8002c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
      break;
 8002c92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0e5b      	lsrs	r3, r3, #25
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e001      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cb4:	693b      	ldr	r3, [r7, #16]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d10c      	bne.n	8002d0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cf4:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cfe:	68d2      	ldr	r2, [r2, #12]
 8002d00:	0a12      	lsrs	r2, r2, #8
 8002d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
    break;
 8002d0c:	e00c      	b.n	8002d28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	0a12      	lsrs	r2, r2, #8
 8002d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    break;
 8002d26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0e5b      	lsrs	r3, r3, #25
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d42:	687b      	ldr	r3, [r7, #4]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	007a1200 	.word	0x007a1200
 8002d58:	00f42400 	.word	0x00f42400

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d64:	2300      	movs	r3, #0
 8002d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8098 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6593      	str	r3, [r2, #88]	; 0x58
 8002d96:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a39      	ldr	r2, [pc, #228]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db2:	f7fe f89b 	bl	8000eec <HAL_GetTick>
 8002db6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db8:	e009      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dba:	f7fe f897 	bl	8000eec <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d902      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	74fb      	strb	r3, [r7, #19]
        break;
 8002dcc:	e005      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ef      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d159      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01e      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d019      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe f857 	bl	8000eec <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e40:	e00b      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe f853 	bl	8000eec <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d902      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	74fb      	strb	r3, [r7, #19]
            break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ec      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e84:	e008      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	74bb      	strb	r3, [r7, #18]
 8002e8a:	e005      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e98:	7c7b      	ldrb	r3, [r7, #17]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4ba7      	ldr	r3, [pc, #668]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4aa6      	ldr	r2, [pc, #664]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb6:	4ba1      	ldr	r3, [pc, #644]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 0203 	bic.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	499d      	ldr	r1, [pc, #628]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed8:	4b98      	ldr	r3, [pc, #608]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 020c 	bic.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	4995      	ldr	r1, [pc, #596]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efa:	4b90      	ldr	r3, [pc, #576]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	498c      	ldr	r1, [pc, #560]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f1c:	4b87      	ldr	r3, [pc, #540]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	4984      	ldr	r1, [pc, #528]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	497b      	ldr	r1, [pc, #492]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f60:	4b76      	ldr	r3, [pc, #472]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	4973      	ldr	r1, [pc, #460]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f82:	4b6e      	ldr	r3, [pc, #440]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	496a      	ldr	r1, [pc, #424]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fa4:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4962      	ldr	r1, [pc, #392]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc6:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	4959      	ldr	r1, [pc, #356]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fe8:	4b54      	ldr	r3, [pc, #336]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	4951      	ldr	r1, [pc, #324]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4948      	ldr	r1, [pc, #288]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800302c:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4940      	ldr	r1, [pc, #256]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304a:	d105      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800304c:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a3a      	ldr	r2, [pc, #232]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003056:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003060:	2b00      	cmp	r3, #0
 8003062:	d015      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003064:	4b35      	ldr	r3, [pc, #212]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	4932      	ldr	r1, [pc, #200]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003082:	d105      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800308e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	4924      	ldr	r1, [pc, #144]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ba:	d105      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030bc:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d015      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f2:	d105      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a10      	ldr	r2, [pc, #64]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d019      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312a:	d109      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a02      	ldr	r2, [pc, #8]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003136:	60d3      	str	r3, [r2, #12]
 8003138:	e002      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	4926      	ldr	r1, [pc, #152]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316a:	d105      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003192:	4918      	ldr	r1, [pc, #96]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d105      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d015      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	490a      	ldr	r1, [pc, #40]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031da:	d105      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80031e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4d0d      	ldr	r5, [pc, #52]	; (8003230 <__libc_init_array+0x38>)
 80031fc:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 80031fe:	1b64      	subs	r4, r4, r5
 8003200:	10a4      	asrs	r4, r4, #2
 8003202:	2600      	movs	r6, #0
 8003204:	42a6      	cmp	r6, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	4d0b      	ldr	r5, [pc, #44]	; (8003238 <__libc_init_array+0x40>)
 800320a:	4c0c      	ldr	r4, [pc, #48]	; (800323c <__libc_init_array+0x44>)
 800320c:	f000 f820 	bl	8003250 <_init>
 8003210:	1b64      	subs	r4, r4, r5
 8003212:	10a4      	asrs	r4, r4, #2
 8003214:	2600      	movs	r6, #0
 8003216:	42a6      	cmp	r6, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003220:	4798      	blx	r3
 8003222:	3601      	adds	r6, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f855 3b04 	ldr.w	r3, [r5], #4
 800322a:	4798      	blx	r3
 800322c:	3601      	adds	r6, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	08003278 	.word	0x08003278
 8003234:	08003278 	.word	0x08003278
 8003238:	08003278 	.word	0x08003278
 800323c:	0800327c 	.word	0x0800327c

08003240 <memset>:
 8003240:	4402      	add	r2, r0
 8003242:	4603      	mov	r3, r0
 8003244:	4293      	cmp	r3, r2
 8003246:	d100      	bne.n	800324a <memset+0xa>
 8003248:	4770      	bx	lr
 800324a:	f803 1b01 	strb.w	r1, [r3], #1
 800324e:	e7f9      	b.n	8003244 <memset+0x4>

08003250 <_init>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	bf00      	nop
 8003254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003256:	bc08      	pop	{r3}
 8003258:	469e      	mov	lr, r3
 800325a:	4770      	bx	lr

0800325c <_fini>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr
