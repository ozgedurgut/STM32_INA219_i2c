
STM32G473_TestCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007bc8  08007bc8  00017bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb4  08007fb4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007fb4  08007fb4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fb4  08007fb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001dc  08008198  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08008198  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134ee  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280d  00000000  00000000  000336fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  000371a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022598  00000000  00000000  00038300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001418a  00000000  00000000  0005a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddcf6  00000000  00000000  0006ea22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e74  00000000  00000000  0014c768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007bb0 	.word	0x08007bb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007bb0 	.word	0x08007bb0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <Read16>:
#include "main.h"
#include "INA219_1.h"

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2302      	movs	r3, #2
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	218a      	movs	r1, #138	; 0x8a
 8000c20:	f001 fd36 	bl	8002690 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	b29b      	uxth	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Write16>:

void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af04      	add	r7, sp, #16
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000c4c:	883b      	ldrh	r3, [r7, #0]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	218a      	movs	r1, #138	; 0x8a
 8000c78:	f001 fbf6 	bl	8002468 <HAL_I2C_Mem_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <INA219_ReadCurrent_raw>:
	return ((result >> 3  ) * 4);

}

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb2 	bl	8000bf8 <Read16>
 8000c94:	4603      	mov	r3, r0
 8000c96:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000c98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <INA219_ReadCurrent>:
float INA219_ReadCurrent(INA219_t *ina219)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    int16_t raw_current = INA219_ReadCurrent_raw(ina219);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffe9 	bl	8000c84 <INA219_ReadCurrent_raw>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	81fb      	strh	r3, [r7, #14]
    return raw_current * ina219_currentDivider_mA / 100.0f; // Convert to float
 8000cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <INA219_ReadCurrent+0x40>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ccc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ce8 <INA219_ReadCurrent+0x44>
 8000cd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000cd4:	eef0 7a66 	vmov.f32	s15, s13
}
 8000cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001f8 	.word	0x200001f8
 8000ce8:	42c80000 	.word	0x42c80000

08000cec <INA219_Reset>:

	return (result * 0.01 );
}

void INA219_Reset(INA219_t *ina219)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ff9e 	bl	8000c3c <Write16>
	HAL_Delay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f001 f855 	bl	8001db0 <HAL_Delay>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	460b      	mov	r3, r1
 8000d18:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2105      	movs	r1, #5
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff8b 	bl	8000c3c <Write16>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff7b 	bl	8000c3c <Write16>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000d58:	f643 139f 	movw	r3, #14751	; 0x399f
 8000d5c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <INA219_setCalibration_32V_2A+0x44>)
 8000d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d64:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <INA219_setCalibration_32V_2A+0x48>)
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <INA219_setCalibration_32V_2A+0x4c>)
 8000d6a:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <INA219_setCalibration_32V_2A+0x50>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <INA219_setCalibration_32V_2A+0x44>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffc7 	bl	8000d0e <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffd2 	bl	8000d2e <INA219_setConfig>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000200 	.word	0x20000200
 8000d98:	200001f8 	.word	0x200001f8
 8000d9c:	41200000 	.word	0x41200000
 8000da0:	200001fc 	.word	0x200001fc

08000da4 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	4613      	mov	r3, r2
 8000db0:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	79fa      	ldrb	r2, [r7, #7]
 8000dbc:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <INA219_Init+0x60>)
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <INA219_Init+0x64>)
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	b299      	uxth	r1, r3
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	2203      	movs	r2, #3
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f001 fd72 	bl	80028c4 <HAL_I2C_IsDeviceReady>
 8000de0:	4603      	mov	r3, r0
 8000de2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d107      	bne.n	8000dfa <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff ff7e 	bl	8000cec <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff ffad 	bl	8000d50 <INA219_setCalibration_32V_2A>

		return 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <INA219_Init+0x58>
	}

	else
	{
		return 0;
 8000dfa:	2300      	movs	r3, #0
	}
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200001f8 	.word	0x200001f8
 8000e08:	200001fc 	.word	0x200001fc

08000e0c <Read16_2>:
#include "main.h"
#include "INA219_2.h"

uint16_t Read16_2(INA219_t_2 *ina219, uint8_t Register)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c_2, (INA219_ADDRESS_2<<1), Register, 1, Value, 2, 1000);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	2302      	movs	r3, #2
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	218a      	movs	r1, #138	; 0x8a
 8000e34:	f001 fc2c 	bl	8002690 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	b29b      	uxth	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Write16_2>:


void Write16_2(INA219_t_2 *ina219, uint8_t Register, uint16_t Value)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af04      	add	r7, sp, #16
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c_2, (INA219_ADDRESS_2<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	218a      	movs	r1, #138	; 0x8a
 8000e8c:	f001 faec 	bl	8002468 <HAL_I2C_Mem_Write>
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <INA219_ReadCurrent_raw_2>:
	return ((result >> 3  ) * 4);

}

int16_t INA219_ReadCurrent_raw_2(INA219_t_2 *ina219)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	int16_t result = Read16_2(ina219, INA219_REG_CURRENT);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb2 	bl	8000e0c <Read16_2>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000eac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <INA219_ReadCurrent_2>:

float INA219_ReadCurrent_2(INA219_t_2 *ina219)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	int16_t result_raw = INA219_ReadCurrent_raw_2(ina219);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ffe9 	bl	8000e98 <INA219_ReadCurrent_raw_2>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	81fb      	strh	r3, [r7, #14]

	return result_raw * ina219_currentDivider_mA_2/100.f;
 8000eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <INA219_ReadCurrent_2+0x40>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000efc <INA219_ReadCurrent_2+0x44>
 8000ee4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ee8:	eef0 7a66 	vmov.f32	s15, s13
}
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000204 	.word	0x20000204
 8000efc:	42c80000 	.word	0x42c80000

08000f00 <INA219_Reset_2>:

	return (result * 0.01 );
}

void INA219_Reset_2(INA219_t_2 *ina219)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	Write16_2(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8000f08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff9e 	bl	8000e50 <Write16_2>
	HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 ff4b 	bl	8001db0 <HAL_Delay>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <INA219_setCalibration_2>:

void INA219_setCalibration_2(INA219_t_2 *ina219, uint16_t CalibrationData)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
	Write16_2(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	461a      	mov	r2, r3
 8000f32:	2105      	movs	r1, #5
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff8b 	bl	8000e50 <Write16_2>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <INA219_setConfig_2>:
	uint16_t result = Read16_2(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig_2(INA219_t_2 *ina219, uint16_t Config)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
	Write16_2(ina219, INA219_REG_CONFIG, Config);
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	461a      	mov	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff7b 	bl	8000e50 <Write16_2>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <INA219_setCalibration_32V_2A_2>:

void INA219_setCalibration_32V_2A_2(INA219_t_2 *ina219)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8000f6c:	f643 139f 	movw	r3, #14751	; 0x399f
 8000f70:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue_2 = 4096;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <INA219_setCalibration_32V_2A_2+0x44>)
 8000f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f78:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA_2 = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <INA219_setCalibration_32V_2A_2+0x48>)
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <INA219_setCalibration_32V_2A_2+0x4c>)
 8000f7e:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW_2 = 2; // Power LSB = 1mW per bit (2/1)
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <INA219_setCalibration_32V_2A_2+0x50>)
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f86:	601a      	str	r2, [r3, #0]

	INA219_setCalibration_2(ina219, ina219_calibrationValue_2);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <INA219_setCalibration_32V_2A_2+0x44>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffc7 	bl	8000f22 <INA219_setCalibration_2>
	INA219_setConfig_2(ina219, config);
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ffd2 	bl	8000f42 <INA219_setConfig_2>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000020c 	.word	0x2000020c
 8000fac:	20000204 	.word	0x20000204
 8000fb0:	41200000 	.word	0x41200000
 8000fb4:	20000208 	.word	0x20000208

08000fb8 <INA219_Init_2>:
			break;
	}
}

uint8_t INA219_Init_2(INA219_t_2 *ina219, I2C_HandleTypeDef *i2c, uint8_t Address_2)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c_2 = i2c;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	601a      	str	r2, [r3, #0]
	ina219->Address_2 = Address_2;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA_2 = 0;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <INA219_Init_2+0x60>)
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW_2 = 0;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <INA219_Init_2+0x64>)
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address_2 << 1), 3, 2);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	b299      	uxth	r1, r3
 8000fea:	2302      	movs	r3, #2
 8000fec:	2203      	movs	r2, #3
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f001 fc68 	bl	80028c4 <HAL_I2C_IsDeviceReady>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <INA219_Init_2+0x56>
	{

		INA219_Reset_2(ina219);
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f7ff ff7e 	bl	8000f00 <INA219_Reset_2>
		INA219_setCalibration_32V_2A_2(ina219);
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff ffad 	bl	8000f64 <INA219_setCalibration_32V_2A_2>

		return 1;
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <INA219_Init_2+0x58>
	}

	else
	{
		return 0;
 800100e:	2300      	movs	r3, #0
	}
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000204 	.word	0x20000204
 800101c:	20000208 	.word	0x20000208

08001020 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin){
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001030:	d002      	beq.n	8001038 <HAL_GPIO_EXTI_Callback+0x18>
 8001032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		break;

	case GPIO_PIN_11 :
		//	HAL_GPIO_WritePin(GPIOC, led1_Pin, GPIO_PIN_SET);
		//	HAL_GPIO_WritePin(GPIOC, led2_Pin, GPIO_PIN_RESET);
		break;
 8001036:	e000      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x1a>
		break;
 8001038:	bf00      	nop
	}
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4e      	ldr	r2, [pc, #312]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d121      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0x54>
		tim2++;
 8001058:	4b4d      	ldr	r3, [pc, #308]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001062:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001066:	4b4a      	ldr	r3, [pc, #296]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001068:	edc3 7a00 	vstr	s15, [r3]
		if(tim2==20){
 800106c:	4b48      	ldr	r3, [pc, #288]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001076:	eef4 7a47 	vcmp.f32	s15, s14
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d10d      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0x54>
			tim2second++;
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800108a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
			tim2=0;
 8001094:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim == &htim3) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3e      	ldr	r2, [pc, #248]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d121      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
		tim3++;
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]
		if(tim3==20){
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80010c2:	eef4 7a47 	vcmp.f32	s15, s14
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	d10d      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xa0>
			tim3second++;
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010dc:	edc3 7a00 	vstr	s15, [r3]
			tim3=0;
 80010e0:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
		}
	}
	if (htim == &htim4) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d121      	bne.n	8001134 <HAL_TIM_PeriodElapsedCallback+0xec>
		tim4++;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001100:	edc3 7a00 	vstr	s15, [r3]
		if(tim4==10){
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800110e:	eef4 7a47 	vcmp.f32	s15, s14
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d10d      	bne.n	8001134 <HAL_TIM_PeriodElapsedCallback+0xec>
			tim4second++;
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001128:	edc3 7a00 	vstr	s15, [r3]
			tim4=0;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
		}
	}

	if (htim == &htim5) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d121      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x138>
		tim5++;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
		if(tim5==6){
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800115a:	eef4 7a47 	vcmp.f32	s15, s14
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d10d      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x138>
			tim5second++;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800116e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001174:	edc3 7a00 	vstr	s15, [r3]
			tim5=0;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	200002bc 	.word	0x200002bc
 8001190:	20000228 	.word	0x20000228
 8001194:	20000238 	.word	0x20000238
 8001198:	20000308 	.word	0x20000308
 800119c:	2000022c 	.word	0x2000022c
 80011a0:	2000023c 	.word	0x2000023c
 80011a4:	20000354 	.word	0x20000354
 80011a8:	20000230 	.word	0x20000230
 80011ac:	20000240 	.word	0x20000240
 80011b0:	200003a0 	.word	0x200003a0
 80011b4:	20000234 	.word	0x20000234
 80011b8:	20000244 	.word	0x20000244

080011bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c0:	f000 fd85 	bl	8001cce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011c4:	f000 f848 	bl	8001258 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011c8:	f000 fa6e 	bl	80016a8 <MX_GPIO_Init>
	MX_RTC_Init();
 80011cc:	f000 f8d0 	bl	8001370 <MX_RTC_Init>
	MX_TIM4_Init();
 80011d0:	f000 f9cc 	bl	800156c <MX_TIM4_Init>
	MX_TIM2_Init();
 80011d4:	f000 f92e 	bl	8001434 <MX_TIM2_Init>
	MX_TIM5_Init();
 80011d8:	f000 fa16 	bl	8001608 <MX_TIM5_Init>
	MX_TIM3_Init();
 80011dc:	f000 f978 	bl	80014d0 <MX_TIM3_Init>
	MX_I2C3_Init();
 80011e0:	f000 f886 	bl	80012f0 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <main+0x78>)
 80011e6:	f003 fa4d 	bl	8004684 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80011ea:	4813      	ldr	r0, [pc, #76]	; (8001238 <main+0x7c>)
 80011ec:	f003 fa4a 	bl	8004684 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <main+0x80>)
 80011f2:	f003 fa47 	bl	8004684 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <main+0x84>)
 80011f8:	f003 fa44 	bl	8004684 <HAL_TIM_Base_Start_IT>

	INA219_Init(&ina219, &hi2c3, INA219_ADDRESS);
 80011fc:	2245      	movs	r2, #69	; 0x45
 80011fe:	4911      	ldr	r1, [pc, #68]	; (8001244 <main+0x88>)
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <main+0x8c>)
 8001202:	f7ff fdcf 	bl	8000da4 <INA219_Init>
	INA219_Init_2(&ina219_2, &hi2c3, INA219_ADDRESS_2);
 8001206:	2245      	movs	r2, #69	; 0x45
 8001208:	490e      	ldr	r1, [pc, #56]	; (8001244 <main+0x88>)
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <main+0x90>)
 800120c:	f7ff fed4 	bl	8000fb8 <INA219_Init_2>
			coverEXTI=1;
			headEXTI=0;
		}
		 */
	//	current = INA219_ReadCurrent_1(&ina219);
		current2 = INA219_ReadCurrent_2(&ina219_2);
 8001210:	480e      	ldr	r0, [pc, #56]	; (800124c <main+0x90>)
 8001212:	f7ff fe51 	bl	8000eb8 <INA219_ReadCurrent_2>
 8001216:	eef0 7a40 	vmov.f32	s15, s0
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <main+0x94>)
 800121c:	edc3 7a00 	vstr	s15, [r3]

		current = INA219_ReadCurrent(&ina219); // INA219_1.h
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <main+0x8c>)
 8001222:	f7ff fd3f 	bl	8000ca4 <INA219_ReadCurrent>
 8001226:	eef0 7a40 	vmov.f32	s15, s0
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <main+0x98>)
 800122c:	edc3 7a00 	vstr	s15, [r3]
		current2 = INA219_ReadCurrent_2(&ina219_2);
 8001230:	e7ee      	b.n	8001210 <main+0x54>
 8001232:	bf00      	nop
 8001234:	200002bc 	.word	0x200002bc
 8001238:	20000308 	.word	0x20000308
 800123c:	20000354 	.word	0x20000354
 8001240:	200003a0 	.word	0x200003a0
 8001244:	20000248 	.word	0x20000248
 8001248:	20000210 	.word	0x20000210
 800124c:	20000218 	.word	0x20000218
 8001250:	20000224 	.word	0x20000224
 8001254:	20000220 	.word	0x20000220

08001258 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0318 	add.w	r3, r7, #24
 8001262:	2238      	movs	r2, #56	; 0x38
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 ff82 	bl	8005170 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127e:	f001 ff67 	bl	8003150 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001282:	2309      	movs	r3, #9
 8001284:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001290:	2302      	movs	r3, #2
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001294:	2303      	movs	r3, #3
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001298:	2304      	movs	r3, #4
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 75;
 800129c:	234b      	movs	r3, #75	; 0x4b
 800129e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fff1 	bl	8003298 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x68>
	{
		Error_Handler();
 80012bc:	f000 fa5e 	bl	800177c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2303      	movs	r3, #3
 80012c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2104      	movs	r1, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 faf5 	bl	80038c8 <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80012e4:	f000 fa4a 	bl	800177c <Error_Handler>
	}
}
 80012e8:	bf00      	nop
 80012ea:	3750      	adds	r7, #80	; 0x50
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_I2C3_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_I2C3_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20C0EDFF;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_I2C3_Init+0x74>)
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <MX_I2C3_Init+0x7c>)
 80012fe:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_I2C3_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_I2C3_Init+0x74>)
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_I2C3_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_I2C3_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_I2C3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_I2C3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_I2C3_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <MX_I2C3_Init+0x74>)
 800132c:	f001 f80c 	bl	8002348 <HAL_I2C_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8001336:	f000 fa21 	bl	800177c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <MX_I2C3_Init+0x74>)
 800133e:	f001 fe6f 	bl	8003020 <HAL_I2CEx_ConfigAnalogFilter>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8001348:	f000 fa18 	bl	800177c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_I2C3_Init+0x74>)
 8001350:	f001 feb1 	bl	80030b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 800135a:	f000 fa0f 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000248 	.word	0x20000248
 8001368:	40007800 	.word	0x40007800
 800136c:	20c0edff 	.word	0x20c0edff

08001370 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <MX_RTC_Init+0xbc>)
 800138a:	4a29      	ldr	r2, [pc, #164]	; (8001430 <MX_RTC_Init+0xc0>)
 800138c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_RTC_Init+0xbc>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_RTC_Init+0xbc>)
 8001396:	227f      	movs	r2, #127	; 0x7f
 8001398:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_RTC_Init+0xbc>)
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_RTC_Init+0xbc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_RTC_Init+0xbc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_RTC_Init+0xbc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_RTC_Init+0xbc>)
 80013b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b8:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_RTC_Init+0xbc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013c0:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_RTC_Init+0xbc>)
 80013c2:	f002 feaf 	bl	8004124 <HAL_RTC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_RTC_Init+0x60>
	{
		Error_Handler();
 80013cc:	f000 f9d6 	bl	800177c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 20;
 80013d4:	2314      	movs	r3, #20
 80013d6:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	71bb      	strb	r3, [r7, #6]
	sTime.SubSeconds = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <MX_RTC_Init+0xbc>)
 80013f0:	f002 ff0d 	bl	800420e <HAL_RTC_SetTime>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_RTC_Init+0x8e>
	{
		Error_Handler();
 80013fa:	f000 f9bf 	bl	800177c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013fe:	2301      	movs	r3, #1
 8001400:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001402:	2301      	movs	r3, #1
 8001404:	707b      	strb	r3, [r7, #1]
	sDate.Date = 1;
 8001406:	2301      	movs	r3, #1
 8001408:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_RTC_Init+0xbc>)
 8001416:	f002 ff97 	bl	8004348 <HAL_RTC_SetDate>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_RTC_Init+0xb4>
	{
		Error_Handler();
 8001420:	f000 f9ac 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000294 	.word	0x20000294
 8001430:	40002800 	.word	0x40002800

08001434 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_TIM2_Init+0x98>)
 8001454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001458:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 114;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM2_Init+0x98>)
 800145c:	2272      	movs	r2, #114	; 0x72
 800145e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM2_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM2_Init+0x98>)
 8001468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_TIM2_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM2_Init+0x98>)
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM2_Init+0x98>)
 800147c:	f003 f8aa 	bl	80045d4 <HAL_TIM_Base_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001486:	f000 f979 	bl	800177c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM2_Init+0x98>)
 8001498:	f003 faec 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80014a2:	f000 f96b 	bl	800177c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_TIM2_Init+0x98>)
 80014b4:	f003 fd56 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80014be:	f000 f95d 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200002bc 	.word	0x200002bc

080014d0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM3_Init+0x94>)
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <MX_TIM3_Init+0x98>)
 80014f2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 114;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_TIM3_Init+0x94>)
 80014f6:	2272      	movs	r2, #114	; 0x72
 80014f8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM3_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM3_Init+0x94>)
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_TIM3_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM3_Init+0x94>)
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_TIM3_Init+0x94>)
 8001516:	f003 f85d 	bl	80045d4 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8001520:	f000 f92c 	bl	800177c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM3_Init+0x94>)
 8001532:	f003 fa9f 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 800153c:	f000 f91e 	bl	800177c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM3_Init+0x94>)
 800154e:	f003 fd09 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8001558:	f000 f910 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000308 	.word	0x20000308
 8001568:	40000400 	.word	0x40000400

0800156c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM4_Init+0x94>)
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <MX_TIM4_Init+0x98>)
 800158e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 229;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM4_Init+0x94>)
 8001592:	22e5      	movs	r2, #229	; 0xe5
 8001594:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM4_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM4_Init+0x94>)
 800159e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM4_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM4_Init+0x94>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM4_Init+0x94>)
 80015b2:	f003 f80f 	bl	80045d4 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 80015bc:	f000 f8de 	bl	800177c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM4_Init+0x94>)
 80015ce:	f003 fa51 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 80015d8:	f000 f8d0 	bl	800177c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM4_Init+0x94>)
 80015ea:	f003 fcbb 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 80015f4:	f000 f8c2 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000354 	.word	0x20000354
 8001604:	40000800 	.word	0x40000800

08001608 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_TIM5_Init+0x98>)
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <MX_TIM5_Init+0x9c>)
 800162a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 343;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_TIM5_Init+0x98>)
 800162e:	f240 1257 	movw	r2, #343	; 0x157
 8001632:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM5_Init+0x98>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM5_Init+0x98>)
 800163c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001640:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_TIM5_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM5_Init+0x98>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM5_Init+0x98>)
 8001650:	f002 ffc0 	bl	80045d4 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM5_Init+0x56>
	{
		Error_Handler();
 800165a:	f000 f88f 	bl	800177c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM5_Init+0x98>)
 800166c:	f003 fa02 	bl	8004a74 <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM5_Init+0x72>
	{
		Error_Handler();
 8001676:	f000 f881 	bl	800177c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_TIM5_Init+0x98>)
 8001688:	f003 fc6c 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM5_Init+0x8e>
	{
		Error_Handler();
 8001692:	f000 f873 	bl	800177c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200003a0 	.word	0x200003a0
 80016a4:	40000c00 	.word	0x40000c00

080016a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_GPIO_Init+0xd0>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : LOWSENSOR_Pin HIGHSENSOR_Pin */
	GPIO_InitStruct.Pin = LOWSENSOR_Pin|HIGHSENSOR_Pin;
 8001706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800170a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f000 fc79 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pins : HEADSENSOR_EXTI_Pin COVERSENSOR_EXTI_Pin */
	GPIO_InitStruct.Pin = HEADSENSOR_EXTI_Pin|COVERSENSOR_EXTI_Pin;
 8001722:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001726:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f000 fc6a 	bl	8002014 <HAL_GPIO_Init>

	/*Configure GPIO pin : PHOTOSENSOR_EXTI_Pin */
	GPIO_InitStruct.Pin = PHOTOSENSOR_EXTI_Pin;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(PHOTOSENSOR_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f000 fc5b 	bl	8002014 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2028      	movs	r0, #40	; 0x28
 8001764:	f000 fc21 	bl	8001faa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001768:	2028      	movs	r0, #40	; 0x28
 800176a:	f000 fc38 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_MspInit+0x50>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_MspInit+0x50>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6613      	str	r3, [r2, #96]	; 0x60
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_MspInit+0x50>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_MspInit+0x50>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_MspInit+0x50>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_MspInit+0x50>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2005      	movs	r0, #5
 80017c4:	f000 fbf1 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f000 fc08 	bl	8001fde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09e      	sub	sp, #120	; 0x78
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2254      	movs	r2, #84	; 0x54
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fcb7 	bl	8005170 <memset>
  if(hi2c->Instance==I2C3)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_I2C_MspInit+0xa8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d137      	bne.n	800187c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800180c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001810:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fa34 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001826:	f7ff ffa9 	bl	800177c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_I2C_MspInit+0xac>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_I2C_MspInit+0xac>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_I2C_MspInit+0xac>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001846:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001848:	2312      	movs	r3, #18
 800184a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001854:	2308      	movs	r3, #8
 8001856:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_I2C_MspInit+0xb0>)
 8001860:	f000 fbd8 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_I2C_MspInit+0xac>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_I2C_MspInit+0xac>)
 800186a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800186e:	6593      	str	r3, [r2, #88]	; 0x58
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_I2C_MspInit+0xac>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3778      	adds	r7, #120	; 0x78
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40007800 	.word	0x40007800
 8001888:	40021000 	.word	0x40021000
 800188c:	48000800 	.word	0x48000800

08001890 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b098      	sub	sp, #96	; 0x60
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2254      	movs	r2, #84	; 0x54
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fc65 	bl	8005170 <memset>
  if(hrtc->Instance==RTC)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_RTC_MspInit+0x70>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d123      	bne.n	80018f8 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 f9e1 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80018cc:	f7ff ff56 	bl	800177c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_RTC_MspInit+0x74>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_RTC_MspInit+0x74>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_RTC_MspInit+0x74>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_RTC_MspInit+0x74>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6593      	str	r3, [r2, #88]	; 0x58
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RTC_MspInit+0x74>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3760      	adds	r7, #96	; 0x60
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40002800 	.word	0x40002800
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d114      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201c      	movs	r0, #28
 8001938:	f000 fb37 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193c:	201c      	movs	r0, #28
 800193e:	f000 fb4e 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001942:	e04c      	b.n	80019de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_TIM_Base_MspInit+0xe4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d114      	bne.n	8001978 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	201d      	movs	r0, #29
 800196c:	f000 fb1d 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001970:	201d      	movs	r0, #29
 8001972:	f000 fb34 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 8001976:	e032      	b.n	80019de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_TIM_Base_MspInit+0xe8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d114      	bne.n	80019ac <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	201e      	movs	r0, #30
 80019a0:	f000 fb03 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019a4:	201e      	movs	r0, #30
 80019a6:	f000 fb1a 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 80019aa:	e018      	b.n	80019de <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_TIM_Base_MspInit+0xec>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d113      	bne.n	80019de <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6593      	str	r3, [r2, #88]	; 0x58
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_TIM_Base_MspInit+0xe0>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2032      	movs	r0, #50	; 0x32
 80019d4:	f000 fae9 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019d8:	2032      	movs	r0, #50	; 0x32
 80019da:	f000 fb00 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40000800 	.word	0x40000800
 80019f4:	40000c00 	.word	0x40000c00

080019f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler+0x4>

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f996 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <TIM2_IRQHandler+0x10>)
 8001a62:	f002 fe87 	bl	8004774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002bc 	.word	0x200002bc

08001a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM3_IRQHandler+0x10>)
 8001a76:	f002 fe7d 	bl	8004774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000308 	.word	0x20000308

08001a84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM4_IRQHandler+0x10>)
 8001a8a:	f002 fe73 	bl	8004774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000354 	.word	0x20000354

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEADSENSOR_EXTI_Pin);
 8001a9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aa0:	f000 fc3a 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COVERSENSOR_EXTI_Pin);
 8001aa4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001aa8:	f000 fc36 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PHOTOSENSOR_EXTI_Pin);
 8001aac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ab0:	f000 fc32 	bl	8002318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM5_IRQHandler+0x10>)
 8001abe:	f002 fe59 	bl	8004774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003a0 	.word	0x200003a0

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae6:	f003 fb19 	bl	800511c <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2216      	movs	r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
  return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0e:	e7fe      	b.n	8001b0e <_exit+0x12>

08001b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
  }

  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e009      	b.n	8001b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf1      	blt.n	8001b5c <_write+0x12>
  }
  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f003 fa7e 	bl	800511c <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20020000 	.word	0x20020000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	200003ec 	.word	0x200003ec
 8001c54:	20000408 	.word	0x20000408

08001c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490e      	ldr	r1, [pc, #56]	; (8001cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0b      	ldr	r4, [pc, #44]	; (8001cc8 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ca6:	f7ff ffd7 	bl	8001c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001caa:	f003 fa3d 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cae:	f7ff fa85 	bl	80011bc <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   r0, =_estack
 8001cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cc0:	08007fbc 	.word	0x08007fbc
  ldr r2, =_sbss
 8001cc4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cc8:	20000404 	.word	0x20000404

08001ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_2_IRQHandler>

08001cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f95b 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f80e 	bl	8001d00 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	e001      	b.n	8001cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf0:	f7ff fd4a 	bl	8001788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]

}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_InitTick+0x68>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d022      	beq.n	8001d5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_InitTick+0x6c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_InitTick+0x68>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f966 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d809      	bhi.n	8001d4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d42:	f000 f932 	bl	8001faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_InitTick+0x70>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e007      	b.n	8001d5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e004      	b.n	8001d5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x20>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d84:	6013      	str	r3, [r2, #0]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	200003f0 	.word	0x200003f0
 8001d94:	20000008 	.word	0x20000008

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	200003f0 	.word	0x200003f0

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d004      	beq.n	8001dd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_Delay+0x40>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd4:	bf00      	nop
 8001dd6:	f7ff ffdf 	bl	8001d98 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d8f7      	bhi.n	8001dd6 <HAL_Delay+0x26>
  {
  }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff40 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff90 	bl	8001ee8 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5f 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff33 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa4 	bl	8001f50 <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002022:	e15a      	b.n	80022da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 814c 	beq.w	80022d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002050:	2b02      	cmp	r3, #2
 8002052:	d130      	bne.n	80020b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208a:	2201      	movs	r2, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 0201 	and.w	r2, r3, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d017      	beq.n	80020f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80a6 	beq.w	80022d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002188:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6613      	str	r3, [r2, #96]	; 0x60
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a0:	4a56      	ldr	r2, [pc, #344]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ca:	d01f      	beq.n	800220c <HAL_GPIO_Init+0x1f8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d019      	beq.n	8002208 <HAL_GPIO_Init+0x1f4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_GPIO_Init+0x2f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1f0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x2f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_GPIO_Init+0x2f8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1e4>
 80021f4:	2305      	movs	r3, #5
 80021f6:	e00a      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 80021f8:	2306      	movs	r3, #6
 80021fa:	e008      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 8002200:	2303      	movs	r3, #3
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 8002204:	2302      	movs	r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x1fa>
 800220c:	2300      	movs	r3, #0
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221e:	4937      	ldr	r1, [pc, #220]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_GPIO_Init+0x300>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <HAL_GPIO_Init+0x300>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x300>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800227a:	4a26      	ldr	r2, [pc, #152]	; (8002314 <HAL_GPIO_Init+0x300>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_GPIO_Init+0x300>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_GPIO_Init+0x300>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_GPIO_Init+0x300>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_GPIO_Init+0x300>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f ae9d 	bne.w	8002024 <HAL_GPIO_Init+0x10>
  }
}
 80022ea:	bf00      	nop
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000
 8002300:	48000400 	.word	0x48000400
 8002304:	48000800 	.word	0x48000800
 8002308:	48000c00 	.word	0x48000c00
 800230c:	48001000 	.word	0x48001000
 8002310:	48001400 	.word	0x48001400
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fe72 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e081      	b.n	800245e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fa34 	bl	80017dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002398:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e006      	b.n	80023d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d104      	bne.n	80023e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	4608      	mov	r0, r1
 8002472:	4611      	mov	r1, r2
 8002474:	461a      	mov	r2, r3
 8002476:	4603      	mov	r3, r0
 8002478:	817b      	strh	r3, [r7, #10]
 800247a:	460b      	mov	r3, r1
 800247c:	813b      	strh	r3, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	f040 80f9 	bne.w	8002682 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_I2C_Mem_Write+0x34>
 8002496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0ed      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Mem_Write+0x4e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0e6      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024be:	f7ff fc6b 	bl	8001d98 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2319      	movs	r3, #25
 80024ca:	2201      	movs	r2, #1
 80024cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fbcb 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d1      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2221      	movs	r2, #33	; 0x21
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002508:	88f8      	ldrh	r0, [r7, #6]
 800250a:	893a      	ldrh	r2, [r7, #8]
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4603      	mov	r3, r0
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fadb 	bl	8002ad4 <I2C_RequestMemoryWrite>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0a9      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2bff      	cmp	r3, #255	; 0xff
 8002538:	d90e      	bls.n	8002558 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	22ff      	movs	r2, #255	; 0xff
 800253e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	b2da      	uxtb	r2, r3
 8002546:	8979      	ldrh	r1, [r7, #10]
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fd33 	bl	8002fbc <I2C_TransferConfig>
 8002556:	e00f      	b.n	8002578 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	b2da      	uxtb	r2, r3
 8002568:	8979      	ldrh	r1, [r7, #10]
 800256a:	2300      	movs	r3, #0
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fd22 	bl	8002fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fbb5 	bl	8002cec <I2C_WaitOnTXISFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e07b      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d034      	beq.n	8002630 <HAL_I2C_Mem_Write+0x1c8>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d130      	bne.n	8002630 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fb47 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e04d      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d90e      	bls.n	8002610 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fcd7 	bl	8002fbc <I2C_TransferConfig>
 800260e:	e00f      	b.n	8002630 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	b2da      	uxtb	r2, r3
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fcc6 	bl	8002fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d19e      	bne.n	8002578 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fb94 	bl	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01a      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2220      	movs	r2, #32
 8002654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_I2C_Mem_Write+0x224>)
 8002662:	400b      	ands	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	fe00e800 	.word	0xfe00e800

08002690 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	817b      	strh	r3, [r7, #10]
 80026a2:	460b      	mov	r3, r1
 80026a4:	813b      	strh	r3, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	f040 80fd 	bne.w	80028b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x34>
 80026be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0f1      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x4e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e0ea      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026e6:	f7ff fb57 	bl	8001d98 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2319      	movs	r3, #25
 80026f2:	2201      	movs	r2, #1
 80026f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fab7 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d5      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2222      	movs	r2, #34	; 0x22
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2240      	movs	r2, #64	; 0x40
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002730:	88f8      	ldrh	r0, [r7, #6]
 8002732:	893a      	ldrh	r2, [r7, #8]
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4603      	mov	r3, r0
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa1b 	bl	8002b7c <I2C_RequestMemoryRead>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0ad      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2bff      	cmp	r3, #255	; 0xff
 8002760:	d90e      	bls.n	8002780 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	8979      	ldrh	r1, [r7, #10]
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_I2C_Mem_Read+0x22c>)
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fc1f 	bl	8002fbc <I2C_TransferConfig>
 800277e:	e00f      	b.n	80027a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	b2da      	uxtb	r2, r3
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_I2C_Mem_Read+0x22c>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fc0e 	bl	8002fbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	2200      	movs	r2, #0
 80027a8:	2104      	movs	r1, #4
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fa5e 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07c      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d034      	beq.n	8002860 <HAL_I2C_Mem_Read+0x1d0>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d130      	bne.n	8002860 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	2200      	movs	r2, #0
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fa2f 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04d      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2bff      	cmp	r3, #255	; 0xff
 8002820:	d90e      	bls.n	8002840 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	22ff      	movs	r2, #255	; 0xff
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	b2da      	uxtb	r2, r3
 800282e:	8979      	ldrh	r1, [r7, #10]
 8002830:	2300      	movs	r3, #0
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fbbf 	bl	8002fbc <I2C_TransferConfig>
 800283e:	e00f      	b.n	8002860 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fbae 	bl	8002fbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d19a      	bne.n	80027a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fa7c 	bl	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e01a      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2220      	movs	r2, #32
 8002884:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_I2C_Mem_Read+0x230>)
 8002892:	400b      	ands	r3, r1
 8002894:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	80002400 	.word	0x80002400
 80028c0:	fe00e800 	.word	0xfe00e800

080028c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	f040 80f1 	bne.w	8002ac8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0e7      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_IsDeviceReady+0x44>
 8002904:	2302      	movs	r3, #2
 8002906:	e0e0      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_I2C_IsDeviceReady+0x72>
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002934:	e004      	b.n	8002940 <HAL_I2C_IsDeviceReady+0x7c>
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002946:	f7ff fa27 	bl	8001d98 <HAL_GetTick>
 800294a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b10      	cmp	r3, #16
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002978:	e034      	b.n	80029e4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d01a      	beq.n	80029b8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7ff fa09 	bl	8001d98 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <HAL_I2C_IsDeviceReady+0xd4>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10f      	bne.n	80029b8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e088      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029e4:	7ffb      	ldrb	r3, [r7, #31]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_I2C_IsDeviceReady+0x12c>
 80029ea:	7fbb      	ldrb	r3, [r7, #30]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0c4      	beq.n	800297a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d01a      	beq.n	8002a34 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2120      	movs	r1, #32
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f92f 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e058      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e04a      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2120      	movs	r1, #32
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f914 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e03d      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2210      	movs	r2, #16
 8002a54:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d118      	bne.n	8002a98 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a74:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2120      	movs	r1, #32
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8f3 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01c      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	f63f af3b 	bhi.w	800291e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
  }
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <I2C_RequestMemoryWrite+0xa4>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fa5d 	bl	8002fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8f0 	bl	8002cec <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02c      	b.n	8002b70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b1c:	893b      	ldrh	r3, [r7, #8]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
 8002b26:	e015      	b.n	8002b54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b28:	893b      	ldrh	r3, [r7, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f8d6 	bl	8002cec <I2C_WaitOnTXISFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e012      	b.n	8002b70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f884 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	80002000 	.word	0x80002000

08002b7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <I2C_RequestMemoryRead+0xa4>)
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa0a 	bl	8002fbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f89d 	bl	8002cec <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e02c      	b.n	8002c16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc2:	893b      	ldrh	r3, [r7, #8]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
 8002bcc:	e015      	b.n	8002bfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bce:	893b      	ldrh	r3, [r7, #8]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	69b9      	ldr	r1, [r7, #24]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f883 	bl	8002cec <I2C_WaitOnTXISFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e012      	b.n	8002c16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2140      	movs	r1, #64	; 0x40
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f831 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	80002000 	.word	0x80002000

08002c24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d103      	bne.n	8002c42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d007      	beq.n	8002c60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	619a      	str	r2, [r3, #24]
  }
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e022      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d01e      	beq.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7ff f887 	bl	8001d98 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d113      	bne.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e00f      	b.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d0cd      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf8:	e02c      	b.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f870 	bl	8002de4 <I2C_IsErrorOccurred>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e02a      	b.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d01e      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7ff f83f 	bl	8001d98 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d113      	bne.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d1cb      	bne.n	8002cfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d78:	e028      	b.n	8002dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f830 	bl	8002de4 <I2C_IsErrorOccurred>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e026      	b.n	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7ff f803 	bl	8001d98 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d113      	bne.n	8002dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e007      	b.n	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d1cf      	bne.n	8002d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d075      	beq.n	8002efc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2210      	movs	r2, #16
 8002e16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e18:	e056      	b.n	8002ec8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d052      	beq.n	8002ec8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe ffb9 	bl	8001d98 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_IsErrorOccurred+0x54>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d147      	bne.n	8002ec8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5a:	d12e      	bne.n	8002eba <I2C_IsErrorOccurred+0xd6>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e62:	d02a      	beq.n	8002eba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d027      	beq.n	8002eba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e78:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e7a:	f7fe ff8d 	bl	8001d98 <HAL_GetTick>
 8002e7e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	e01b      	b.n	8002eba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e82:	f7fe ff89 	bl	8001d98 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b19      	cmp	r3, #25
 8002e8e:	d914      	bls.n	8002eba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d1dc      	bne.n	8002e82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d003      	beq.n	8002ede <I2C_IsErrorOccurred+0xfa>
 8002ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d09d      	beq.n	8002e1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f043 0308 	orr.w	r3, r3, #8
 8002f36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01c      	beq.n	8002fac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff fe56 	bl	8002c24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <I2C_IsErrorOccurred+0x1d4>)
 8002f84:	400b      	ands	r3, r1
 8002f86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	fe00e800 	.word	0xfe00e800

08002fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fd4:	7a7b      	ldrb	r3, [r7, #9]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fdc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	0d5b      	lsrs	r3, r3, #21
 8002ff6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <I2C_TransferConfig+0x60>)
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	43db      	mvns	r3, r3
 8003000:	ea02 0103 	and.w	r1, r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	03ff63ff 	.word	0x03ff63ff

08003020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d138      	bne.n	80030a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e032      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d139      	bne.n	8003140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e033      	b.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d141      	bne.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800315e:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	d131      	bne.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800316c:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003172:	4a46      	ldr	r2, [pc, #280]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003184:	4a41      	ldr	r2, [pc, #260]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800318a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800318c:	4b40      	ldr	r3, [pc, #256]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2232      	movs	r2, #50	; 0x32
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	4a3f      	ldr	r2, [pc, #252]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	3301      	adds	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a2:	e002      	b.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d102      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f2      	bne.n	80031a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031be:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ca:	d158      	bne.n	800327e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e057      	b.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031e0:	e04d      	b.n	800327e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e8:	d141      	bne.n	800326e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ea:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f6:	d131      	bne.n	800325c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f8:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fe:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003210:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2232      	movs	r2, #50	; 0x32
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	0c9b      	lsrs	r3, r3, #18
 800322a:	3301      	adds	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322e:	e002      	b.n	8003236 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3b01      	subs	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003242:	d102      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f2      	bne.n	8003230 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d112      	bne.n	800327e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e011      	b.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800326c:	e007      	b.n	800327e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40007000 	.word	0x40007000
 8003290:	20000000 	.word	0x20000000
 8003294:	431bde83 	.word	0x431bde83

08003298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e306      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d075      	beq.n	80033a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b6:	4b97      	ldr	r3, [pc, #604]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c0:	4b94      	ldr	r3, [pc, #592]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d102      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3e>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_OscConfig+0x44>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d10b      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	4b8d      	ldr	r3, [pc, #564]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d05b      	beq.n	80033a0 <HAL_RCC_OscConfig+0x108>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d157      	bne.n	80033a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e2e1      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x74>
 80032fe:	4b85      	ldr	r3, [pc, #532]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a84      	ldr	r2, [pc, #528]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e01d      	b.n	8003348 <HAL_RCC_OscConfig+0xb0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x98>
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a7e      	ldr	r2, [pc, #504]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800331c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7b      	ldr	r2, [pc, #492]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0xb0>
 8003330:	4b78      	ldr	r3, [pc, #480]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a77      	ldr	r2, [pc, #476]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b75      	ldr	r3, [pc, #468]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a74      	ldr	r2, [pc, #464]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fd22 	bl	8001d98 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe fd1e 	bl	8001d98 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e2a6      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0xc0>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fd0e 	bl	8001d98 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fd0a 	bl	8001d98 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e292      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003392:	4b60      	ldr	r3, [pc, #384]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0xe8>
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d075      	beq.n	800349a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b8:	4b56      	ldr	r3, [pc, #344]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b0c      	cmp	r3, #12
 80033c6:	d102      	bne.n	80033ce <HAL_RCC_OscConfig+0x136>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d002      	beq.n	80033d4 <HAL_RCC_OscConfig+0x13c>
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11f      	bne.n	8003414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x154>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e265      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	4946      	ldr	r1, [pc, #280]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_RCC_OscConfig+0x280>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fc7b 	bl	8001d00 <HAL_InitTick>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d043      	beq.n	8003498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e251      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fcb6 	bl	8001d98 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7fe fcb2 	bl	8001d98 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e23a      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	061b      	lsls	r3, r3, #24
 800345c:	492d      	ldr	r1, [pc, #180]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
 8003462:	e01a      	b.n	800349a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800346a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fc92 	bl	8001d98 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7fe fc8e 	bl	8001d98 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e216      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x1e0>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d041      	beq.n	800352a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b4:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7fe fc6b 	bl	8001d98 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c6:	f7fe fc67 	bl	8001d98 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1ef      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ef      	beq.n	80034c6 <HAL_RCC_OscConfig+0x22e>
 80034e6:	e020      	b.n	800352a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe fc4e 	bl	8001d98 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034fe:	e00d      	b.n	800351c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe fc4a 	bl	8001d98 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d906      	bls.n	800351c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1d2      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ea      	bne.n	8003500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a6 	beq.w	8003684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800353c:	4b84      	ldr	r3, [pc, #528]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_OscConfig+0x2b4>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x2b6>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00d      	beq.n	800356e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a7e      	ldr	r2, [pc, #504]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
 800355e:	4b7c      	ldr	r3, [pc, #496]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356e:	4b79      	ldr	r3, [pc, #484]	; (8003754 <HAL_RCC_OscConfig+0x4bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x4bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a75      	ldr	r2, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x4bc>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fe fc07 	bl	8001d98 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fe fc03 	bl	8001d98 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e18b      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a0:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x4bc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d108      	bne.n	80035c6 <HAL_RCC_OscConfig+0x32e>
 80035b4:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c4:	e024      	b.n	8003610 <HAL_RCC_OscConfig+0x378>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d110      	bne.n	80035f0 <HAL_RCC_OscConfig+0x358>
 80035ce:	4b60      	ldr	r3, [pc, #384]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	4a5e      	ldr	r2, [pc, #376]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	4a5a      	ldr	r2, [pc, #360]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ee:	e00f      	b.n	8003610 <HAL_RCC_OscConfig+0x378>
 80035f0:	4b57      	ldr	r3, [pc, #348]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	4a56      	ldr	r2, [pc, #344]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d016      	beq.n	8003646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fbbe 	bl	8001d98 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361e:	e00a      	b.n	8003636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fe fbba 	bl	8001d98 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e140      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003636:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ed      	beq.n	8003620 <HAL_RCC_OscConfig+0x388>
 8003644:	e015      	b.n	8003672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe fba7 	bl	8001d98 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fba3 	bl	8001d98 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e129      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ed      	bne.n	800364e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003672:	7ffb      	ldrb	r3, [r7, #31]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003678:	4b35      	ldr	r3, [pc, #212]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	4a34      	ldr	r2, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003682:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03c      	beq.n	800370a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe fb76 	bl	8001d98 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b0:	f7fe fb72 	bl	8001d98 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0fa      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c2:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80036c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <HAL_RCC_OscConfig+0x418>
 80036d0:	e01b      	b.n	800370a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fb59 	bl	8001d98 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ea:	f7fe fb55 	bl	8001d98 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e0dd      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80d1 	beq.w	80038b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b0c      	cmp	r3, #12
 800371e:	f000 808b 	beq.w	8003838 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d15e      	bne.n	80037e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fe fb2f 	bl	8001d98 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373c:	e00c      	b.n	8003758 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fe fb2b 	bl	8001d98 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d905      	bls.n	8003758 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e0b3      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ec      	bne.n	800373e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003764:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	4b56      	ldr	r3, [pc, #344]	; (80038c4 <HAL_RCC_OscConfig+0x62c>)
 800376a:	4013      	ands	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6a11      	ldr	r1, [r2, #32]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003774:	3a01      	subs	r2, #1
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800377e:	0212      	lsls	r2, r2, #8
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003786:	0852      	lsrs	r2, r2, #1
 8003788:	3a01      	subs	r2, #1
 800378a:	0552      	lsls	r2, r2, #21
 800378c:	4311      	orrs	r1, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003792:	0852      	lsrs	r2, r2, #1
 8003794:	3a01      	subs	r2, #1
 8003796:	0652      	lsls	r2, r2, #25
 8003798:	4311      	orrs	r1, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800379e:	06d2      	lsls	r2, r2, #27
 80037a0:	430a      	orrs	r2, r1
 80037a2:	4947      	ldr	r1, [pc, #284]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b45      	ldr	r3, [pc, #276]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a44      	ldr	r2, [pc, #272]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b4:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a41      	ldr	r2, [pc, #260]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe faea 	bl	8001d98 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe fae6 	bl	8001d98 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e06e      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x530>
 80037e6:	e066      	b.n	80038b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a31      	ldr	r2, [pc, #196]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003800:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a2e      	ldr	r2, [pc, #184]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 8003806:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fac2 	bl	8001d98 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe fabe 	bl	8001d98 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e046      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x580>
 8003836:	e03e      	b.n	80038b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e039      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003844:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <HAL_RCC_OscConfig+0x628>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0203 	and.w	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	429a      	cmp	r2, r3
 8003856:	d12c      	bne.n	80038b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	3b01      	subs	r3, #1
 8003864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d123      	bne.n	80038b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d11b      	bne.n	80038b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d113      	bne.n	80038b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	019f800c 	.word	0x019f800c

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e11e      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b91      	ldr	r3, [pc, #580]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b8e      	ldr	r3, [pc, #568]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	498c      	ldr	r1, [pc, #560]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b8a      	ldr	r3, [pc, #552]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e106      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d073      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d129      	bne.n	8003978 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003924:	4b81      	ldr	r3, [pc, #516]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0f4      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003934:	f000 f964 	bl	8003c00 <RCC_GetSysClockFreqFromPLLSource>
 8003938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4a7c      	ldr	r2, [pc, #496]	; (8003b30 <HAL_RCC_ClockConfig+0x268>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d93f      	bls.n	80039c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003942:	4b7a      	ldr	r3, [pc, #488]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d033      	beq.n	80039c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800395e:	2b00      	cmp	r3, #0
 8003960:	d12f      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003962:	4b72      	ldr	r3, [pc, #456]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	4a70      	ldr	r2, [pc, #448]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e024      	b.n	80039c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003980:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0c6      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003990:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0be      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039a0:	f000 f8ce 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4a61      	ldr	r2, [pc, #388]	; (8003b30 <HAL_RCC_ClockConfig+0x268>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d909      	bls.n	80039c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b6:	4a5d      	ldr	r2, [pc, #372]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 80039b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4957      	ldr	r1, [pc, #348]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fe f9e0 	bl	8001d98 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe f9dc 	bl	8001d98 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e095      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b4e      	ldr	r3, [pc, #312]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a3c:	4a3b      	ldr	r2, [pc, #236]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4936      	ldr	r1, [pc, #216]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a5e:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	4a32      	ldr	r2, [pc, #200]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d21d      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 020f 	bic.w	r2, r3, #15
 8003a80:	4929      	ldr	r1, [pc, #164]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a88:	f7fe f986 	bl	8001d98 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fe f982 	bl	8001d98 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e03b      	b.n	8003b1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x260>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1ed      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4917      	ldr	r1, [pc, #92]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	490f      	ldr	r1, [pc, #60]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af2:	f000 f825 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCC_ClockConfig+0x264>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	490c      	ldr	r1, [pc, #48]	; (8003b34 <HAL_RCC_ClockConfig+0x26c>)
 8003b04:	5ccb      	ldrb	r3, [r1, r3]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x270>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCC_ClockConfig+0x274>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe f8f2 	bl	8001d00 <HAL_InitTick>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40022000 	.word	0x40022000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	04c4b400 	.word	0x04c4b400
 8003b34:	08007bc8 	.word	0x08007bc8
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20000004 	.word	0x20000004

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d102      	bne.n	8003b58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b52:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	e047      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b64:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e03e      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d136      	bne.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b94:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9e:	68d2      	ldr	r2, [r2, #12]
 8003ba0:	0a12      	lsrs	r2, r2, #8
 8003ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	617b      	str	r3, [r7, #20]
      break;
 8003bac:	e00c      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb8:	68d2      	ldr	r2, [r2, #12]
 8003bba:	0a12      	lsrs	r2, r2, #8
 8003bbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
      break;
 8003bc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	0e5b      	lsrs	r3, r3, #25
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e001      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003be8:	693b      	ldr	r3, [r7, #16]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	00f42400 	.word	0x00f42400

08003c00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d10c      	bne.n	8003c3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c24:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c2e:	68d2      	ldr	r2, [r2, #12]
 8003c30:	0a12      	lsrs	r2, r2, #8
 8003c32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	617b      	str	r3, [r7, #20]
    break;
 8003c3c:	e00c      	b.n	8003c58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3e:	4a11      	ldr	r2, [pc, #68]	; (8003c84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c48:	68d2      	ldr	r2, [r2, #12]
 8003c4a:	0a12      	lsrs	r2, r2, #8
 8003c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
    break;
 8003c56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0e5b      	lsrs	r3, r3, #25
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c72:	687b      	ldr	r3, [r7, #4]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40021000 	.word	0x40021000
 8003c84:	00f42400 	.word	0x00f42400

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8098 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003caa:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a39      	ldr	r2, [pc, #228]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cde:	f7fe f85b 	bl	8001d98 <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce4:	e009      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fe f857 	bl	8001d98 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d902      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf8:	e005      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ef      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d159      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01e      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d019      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d66:	f7fe f817 	bl	8001d98 <HAL_GetTick>
 8003d6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6c:	e00b      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fe f813 	bl	8001d98 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d902      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	74fb      	strb	r3, [r7, #19]
            break;
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ec      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003db0:	e008      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	74bb      	strb	r3, [r7, #18]
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc4:	7c7b      	ldrb	r3, [r7, #17]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4ba7      	ldr	r3, [pc, #668]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	4aa6      	ldr	r2, [pc, #664]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de2:	4ba1      	ldr	r3, [pc, #644]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f023 0203 	bic.w	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	499d      	ldr	r1, [pc, #628]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e04:	4b98      	ldr	r3, [pc, #608]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f023 020c 	bic.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4995      	ldr	r1, [pc, #596]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e26:	4b90      	ldr	r3, [pc, #576]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	498c      	ldr	r1, [pc, #560]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e48:	4b87      	ldr	r3, [pc, #540]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4984      	ldr	r1, [pc, #528]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	497b      	ldr	r1, [pc, #492]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e8c:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	4973      	ldr	r1, [pc, #460]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eae:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	496a      	ldr	r1, [pc, #424]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed0:	4b65      	ldr	r3, [pc, #404]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4962      	ldr	r1, [pc, #392]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	4959      	ldr	r1, [pc, #356]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f14:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	4951      	ldr	r1, [pc, #324]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f36:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4948      	ldr	r1, [pc, #288]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f58:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4940      	ldr	r1, [pc, #256]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f76:	d105      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f78:	4b3b      	ldr	r3, [pc, #236]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a3a      	ldr	r2, [pc, #232]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d015      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f90:	4b35      	ldr	r3, [pc, #212]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	4932      	ldr	r1, [pc, #200]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fae:	d105      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d015      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	4924      	ldr	r1, [pc, #144]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	4916      	ldr	r1, [pc, #88]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401e:	d105      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a10      	ldr	r2, [pc, #64]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800402a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d019      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004056:	d109      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a02      	ldr	r2, [pc, #8]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004062:	60d3      	str	r3, [r2, #12]
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	4926      	ldr	r1, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040be:	4918      	ldr	r1, [pc, #96]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a12      	ldr	r2, [pc, #72]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004114:	7cbb      	ldrb	r3, [r7, #18]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d066      	beq.n	8004204 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd fba0 	bl	8001890 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	22ca      	movs	r2, #202	; 0xca
 800415e:	625a      	str	r2, [r3, #36]	; 0x24
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2253      	movs	r2, #83	; 0x53
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f99a 	bl	80044a2 <RTC_EnterInitMode>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13a      	bne.n	80041ee <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	041a      	lsls	r2, r3, #16
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f9a6 	bl	800450e <RTC_ExitInitMode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d110      	bne.n	80041ee <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1a      	ldr	r2, [r3, #32]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800420e:	b590      	push	{r4, r7, lr}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_RTC_SetTime+0x1a>
 8004224:	2302      	movs	r3, #2
 8004226:	e08b      	b.n	8004340 <HAL_RTC_SetTime+0x132>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	22ca      	movs	r2, #202	; 0xca
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2253      	movs	r2, #83	; 0x53
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f92a 	bl	80044a2 <RTC_EnterInitMode>
 800424e:	4603      	mov	r3, r0
 8004250:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d163      	bne.n	8004320 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d126      	bne.n	80042ac <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f98c 	bl	8004594 <RTC_ByteToBcd2>
 800427c:	4603      	mov	r3, r0
 800427e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f985 	bl	8004594 <RTC_ByteToBcd2>
 800428a:	4603      	mov	r3, r0
 800428c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800428e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	789b      	ldrb	r3, [r3, #2]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f97d 	bl	8004594 <RTC_ByteToBcd2>
 800429a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800429c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	78db      	ldrb	r3, [r3, #3]
 80042a4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e018      	b.n	80042de <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80042cc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80042d2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042ec:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042fc:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6999      	ldr	r1, [r3, #24]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f8f9 	bl	800450e <RTC_ExitInitMode>
 800431c:	4603      	mov	r3, r0
 800431e:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800433e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004340:	4618      	mov	r0, r3
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	bd90      	pop	{r4, r7, pc}

08004348 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_RTC_SetDate+0x1a>
 800435e:	2302      	movs	r3, #2
 8004360:	e075      	b.n	800444e <HAL_RTC_SetDate+0x106>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10e      	bne.n	8004396 <HAL_RTC_SetDate+0x4e>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	f023 0310 	bic.w	r3, r3, #16
 800438c:	b2db      	uxtb	r3, r3
 800438e:	330a      	adds	r3, #10
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11c      	bne.n	80043d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	78db      	ldrb	r3, [r3, #3]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f8f7 	bl	8004594 <RTC_ByteToBcd2>
 80043a6:	4603      	mov	r3, r0
 80043a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f8f0 	bl	8004594 <RTC_ByteToBcd2>
 80043b4:	4603      	mov	r3, r0
 80043b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80043b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	789b      	ldrb	r3, [r3, #2]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f8e8 	bl	8004594 <RTC_ByteToBcd2>
 80043c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e00e      	b.n	80043f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	78db      	ldrb	r3, [r3, #3]
 80043da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80043e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80043e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	22ca      	movs	r2, #202	; 0xca
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2253      	movs	r2, #83	; 0x53
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f84c 	bl	80044a2 <RTC_EnterInitMode>
 800440a:	4603      	mov	r3, r0
 800440c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10c      	bne.n	800442e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004422:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f872 	bl	800450e <RTC_ExitInitMode>
 800442a:	4603      	mov	r3, r0
 800442c:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bd90      	pop	{r4, r7, pc}

08004456 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0220 	bic.w	r2, r2, #32
 800446c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800446e:	f7fd fc93 	bl	8001d98 <HAL_GetTick>
 8004472:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004474:	e009      	b.n	800448a <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004476:	f7fd fc8f 	bl	8001d98 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004484:	d901      	bls.n	800448a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e007      	b.n	800449a <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d123      	bne.n	8004504 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80044cc:	f7fd fc64 	bl	8001d98 <HAL_GetTick>
 80044d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044d2:	e00d      	b.n	80044f0 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80044d4:	f7fd fc60 	bl	8001d98 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e2:	d905      	bls.n	80044f0 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2203      	movs	r2, #3
 80044ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <RTC_EnterInitMode+0x62>
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d1e7      	bne.n	80044d4 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004528:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff8c 	bl	8004456 <HAL_RTC_WaitForSynchro>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2203      	movs	r2, #3
 8004548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e01b      	b.n	800458a <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0220 	bic.w	r2, r2, #32
 8004560:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ff77 	bl	8004456 <HAL_RTC_WaitForSynchro>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2203      	movs	r2, #3
 8004572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0220 	orr.w	r2, r2, #32
 8004588:	619a      	str	r2, [r3, #24]
  }

  return status;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80045a6:	e005      	b.n	80045b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	3b0a      	subs	r3, #10
 80045b2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d8f6      	bhi.n	80045a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e049      	b.n	800467a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd f984 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f000 fb62 	bl	8004cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e054      	b.n	8004746 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a26      	ldr	r2, [pc, #152]	; (8004754 <HAL_TIM_Base_Start_IT+0xd0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d022      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d01d      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <HAL_TIM_Base_Start_IT+0xd8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_TIM_Base_Start_IT+0xdc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_TIM_Base_Start_IT+0xe0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_TIM_Base_Start_IT+0xe4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x80>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_TIM_Base_Start_IT+0xe8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d115      	bne.n	8004730 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	4b19      	ldr	r3, [pc, #100]	; (8004770 <HAL_TIM_Base_Start_IT+0xec>)
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d015      	beq.n	8004742 <HAL_TIM_Base_Start_IT+0xbe>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471c:	d011      	beq.n	8004742 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472e:	e008      	b.n	8004742 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e000      	b.n	8004744 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40013400 	.word	0x40013400
 8004768:	40014000 	.word	0x40014000
 800476c:	40015000 	.word	0x40015000
 8004770:	00010007 	.word	0x00010007

08004774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b02      	cmp	r3, #2
 8004788:	d122      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b02      	cmp	r3, #2
 8004796:	d11b      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0202 	mvn.w	r2, #2
 80047a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa72 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa64 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fa75 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d122      	bne.n	8004824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0204 	mvn.w	r2, #4
 80047f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa48 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa3a 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fa4b 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b08      	cmp	r3, #8
 8004830:	d122      	bne.n	8004878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b08      	cmp	r3, #8
 800483e:	d11b      	bne.n	8004878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0208 	mvn.w	r2, #8
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2204      	movs	r2, #4
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa1e 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa10 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa21 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b10      	cmp	r3, #16
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b10      	cmp	r3, #16
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0210 	mvn.w	r2, #16
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2208      	movs	r2, #8
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9f4 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9e6 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f9f7 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0201 	mvn.w	r2, #1
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fba8 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d10e      	bne.n	8004924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d107      	bne.n	8004924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fbc0 	bl	80050a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d10e      	bne.n	8004952 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d107      	bne.n	8004952 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800494a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fbb3 	bl	80050b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d10e      	bne.n	800497e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d107      	bne.n	800497e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f9a5 	bl	8004cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b20      	cmp	r3, #32
 800498a:	d10e      	bne.n	80049aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b20      	cmp	r3, #32
 8004998:	d107      	bne.n	80049aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0220 	mvn.w	r2, #32
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fb73 	bl	8005090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b8:	d10f      	bne.n	80049da <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c8:	d107      	bne.n	80049da <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fb79 	bl	80050cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e8:	d10f      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb6b 	bl	80050e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a18:	d10f      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fb5d 	bl	80050f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a48:	d10f      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb4f 	bl	8005108 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_ConfigClockSource+0x1c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0ee      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x1fa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004aae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6b      	ldr	r2, [pc, #428]	; (8004c78 <HAL_TIM_ConfigClockSource+0x204>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	f000 80b9 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004ad0:	4a69      	ldr	r2, [pc, #420]	; (8004c78 <HAL_TIM_ConfigClockSource+0x204>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f200 80be 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004ad8:	4a68      	ldr	r2, [pc, #416]	; (8004c7c <HAL_TIM_ConfigClockSource+0x208>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	f000 80b1 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004ae0:	4a66      	ldr	r2, [pc, #408]	; (8004c7c <HAL_TIM_ConfigClockSource+0x208>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	f200 80b6 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004ae8:	4a65      	ldr	r2, [pc, #404]	; (8004c80 <HAL_TIM_ConfigClockSource+0x20c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	f000 80a9 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004af0:	4a63      	ldr	r2, [pc, #396]	; (8004c80 <HAL_TIM_ConfigClockSource+0x20c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	f200 80ae 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004af8:	4a62      	ldr	r2, [pc, #392]	; (8004c84 <HAL_TIM_ConfigClockSource+0x210>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	f000 80a1 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b00:	4a60      	ldr	r2, [pc, #384]	; (8004c84 <HAL_TIM_ConfigClockSource+0x210>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	f200 80a6 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b08:	4a5f      	ldr	r2, [pc, #380]	; (8004c88 <HAL_TIM_ConfigClockSource+0x214>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	f000 8099 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b10:	4a5d      	ldr	r2, [pc, #372]	; (8004c88 <HAL_TIM_ConfigClockSource+0x214>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	f200 809e 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b1c:	f000 8091 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004b24:	f200 8096 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b2c:	f000 8089 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b34:	f200 808e 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3c:	d03e      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0x148>
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	f200 8087 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x1e6>
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d87f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d01a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x11a>
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d87b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d050      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x18e>
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d877      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b64:	2b50      	cmp	r3, #80	; 0x50
 8004b66:	d03c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x16e>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d873      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d058      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x1ae>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d86f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d064      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d86b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d060      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d867      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d05a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x1ce>
 8004b8c:	e062      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f000 f9c1 	bl	8004f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
      break;
 8004bba:	e04f      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f000 f9aa 	bl	8004f24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bde:	609a      	str	r2, [r3, #8]
      break;
 8004be0:	e03c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 f91c 	bl	8004e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2150      	movs	r1, #80	; 0x50
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f975 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c00:	e02c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 f93b 	bl	8004e8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2160      	movs	r1, #96	; 0x60
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f965 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c20:	e01c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f000 f8fc 	bl	8004e2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f955 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 f94c 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8004c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00100070 	.word	0x00100070
 8004c7c:	00100050 	.word	0x00100050
 8004c80:	00100040 	.word	0x00100040
 8004c84:	00100030 	.word	0x00100030
 8004c88:	00100020 	.word	0x00100020

08004c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d017      	beq.n	8004d24 <TIM_Base_SetConfig+0x48>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d013      	beq.n	8004d24 <TIM_Base_SetConfig+0x48>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a43      	ldr	r2, [pc, #268]	; (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00f      	beq.n	8004d24 <TIM_Base_SetConfig+0x48>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a42      	ldr	r2, [pc, #264]	; (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_Base_SetConfig+0x48>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a41      	ldr	r2, [pc, #260]	; (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_Base_SetConfig+0x48>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0x48>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3f      	ldr	r2, [pc, #252]	; (8004e1c <TIM_Base_SetConfig+0x140>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a33      	ldr	r2, [pc, #204]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d023      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d01f      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a30      	ldr	r2, [pc, #192]	; (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01b      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d017      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2e      	ldr	r2, [pc, #184]	; (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00f      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <TIM_Base_SetConfig+0x144>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <TIM_Base_SetConfig+0x148>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d007      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <TIM_Base_SetConfig+0x14c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d003      	beq.n	8004d86 <TIM_Base_SetConfig+0xaa>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <TIM_Base_SetConfig+0x140>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d108      	bne.n	8004d98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x110>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x110>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <TIM_Base_SetConfig+0x144>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x110>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <TIM_Base_SetConfig+0x148>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x110>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <TIM_Base_SetConfig+0x14c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x110>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <TIM_Base_SetConfig+0x140>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40015000 	.word	0x40015000
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0210 	bic.w	r2, r3, #16
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f043 0307 	orr.w	r3, r3, #7
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e074      	b.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a34      	ldr	r2, [pc, #208]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a33      	ldr	r2, [pc, #204]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a31      	ldr	r2, [pc, #196]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a21      	ldr	r2, [pc, #132]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d01d      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d018      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10c      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4313      	orrs	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40015000 	.word	0x40015000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000

08005090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <__errno>:
 800511c:	4b01      	ldr	r3, [pc, #4]	; (8005124 <__errno+0x8>)
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4d0d      	ldr	r5, [pc, #52]	; (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	; (8005164 <__libc_init_array+0x3c>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2600      	movs	r6, #0
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4d0b      	ldr	r5, [pc, #44]	; (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	; (800516c <__libc_init_array+0x44>)
 800513c:	f002 fd38 	bl	8007bb0 <_init>
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2600      	movs	r6, #0
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	08007fb4 	.word	0x08007fb4
 8005164:	08007fb4 	.word	0x08007fb4
 8005168:	08007fb4 	.word	0x08007fb4
 800516c:	08007fb8 	.word	0x08007fb8

08005170 <memset>:
 8005170:	4402      	add	r2, r0
 8005172:	4603      	mov	r3, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	f803 1b01 	strb.w	r1, [r3], #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <__cvt>:
 8005180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	ec55 4b10 	vmov	r4, r5, d0
 8005188:	2d00      	cmp	r5, #0
 800518a:	460e      	mov	r6, r1
 800518c:	4619      	mov	r1, r3
 800518e:	462b      	mov	r3, r5
 8005190:	bfbb      	ittet	lt
 8005192:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005196:	461d      	movlt	r5, r3
 8005198:	2300      	movge	r3, #0
 800519a:	232d      	movlt	r3, #45	; 0x2d
 800519c:	700b      	strb	r3, [r1, #0]
 800519e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051a4:	4691      	mov	r9, r2
 80051a6:	f023 0820 	bic.w	r8, r3, #32
 80051aa:	bfbc      	itt	lt
 80051ac:	4622      	movlt	r2, r4
 80051ae:	4614      	movlt	r4, r2
 80051b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051b4:	d005      	beq.n	80051c2 <__cvt+0x42>
 80051b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051ba:	d100      	bne.n	80051be <__cvt+0x3e>
 80051bc:	3601      	adds	r6, #1
 80051be:	2102      	movs	r1, #2
 80051c0:	e000      	b.n	80051c4 <__cvt+0x44>
 80051c2:	2103      	movs	r1, #3
 80051c4:	ab03      	add	r3, sp, #12
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	ab02      	add	r3, sp, #8
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	ec45 4b10 	vmov	d0, r4, r5
 80051d0:	4653      	mov	r3, sl
 80051d2:	4632      	mov	r2, r6
 80051d4:	f000 fccc 	bl	8005b70 <_dtoa_r>
 80051d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051dc:	4607      	mov	r7, r0
 80051de:	d102      	bne.n	80051e6 <__cvt+0x66>
 80051e0:	f019 0f01 	tst.w	r9, #1
 80051e4:	d022      	beq.n	800522c <__cvt+0xac>
 80051e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051ea:	eb07 0906 	add.w	r9, r7, r6
 80051ee:	d110      	bne.n	8005212 <__cvt+0x92>
 80051f0:	783b      	ldrb	r3, [r7, #0]
 80051f2:	2b30      	cmp	r3, #48	; 0x30
 80051f4:	d10a      	bne.n	800520c <__cvt+0x8c>
 80051f6:	2200      	movs	r2, #0
 80051f8:	2300      	movs	r3, #0
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fb fc8b 	bl	8000b18 <__aeabi_dcmpeq>
 8005202:	b918      	cbnz	r0, 800520c <__cvt+0x8c>
 8005204:	f1c6 0601 	rsb	r6, r6, #1
 8005208:	f8ca 6000 	str.w	r6, [sl]
 800520c:	f8da 3000 	ldr.w	r3, [sl]
 8005210:	4499      	add	r9, r3
 8005212:	2200      	movs	r2, #0
 8005214:	2300      	movs	r3, #0
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb fc7d 	bl	8000b18 <__aeabi_dcmpeq>
 800521e:	b108      	cbz	r0, 8005224 <__cvt+0xa4>
 8005220:	f8cd 900c 	str.w	r9, [sp, #12]
 8005224:	2230      	movs	r2, #48	; 0x30
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	454b      	cmp	r3, r9
 800522a:	d307      	bcc.n	800523c <__cvt+0xbc>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005230:	1bdb      	subs	r3, r3, r7
 8005232:	4638      	mov	r0, r7
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	b004      	add	sp, #16
 8005238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523c:	1c59      	adds	r1, r3, #1
 800523e:	9103      	str	r1, [sp, #12]
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e7f0      	b.n	8005226 <__cvt+0xa6>

08005244 <__exponent>:
 8005244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005246:	4603      	mov	r3, r0
 8005248:	2900      	cmp	r1, #0
 800524a:	bfb8      	it	lt
 800524c:	4249      	neglt	r1, r1
 800524e:	f803 2b02 	strb.w	r2, [r3], #2
 8005252:	bfb4      	ite	lt
 8005254:	222d      	movlt	r2, #45	; 0x2d
 8005256:	222b      	movge	r2, #43	; 0x2b
 8005258:	2909      	cmp	r1, #9
 800525a:	7042      	strb	r2, [r0, #1]
 800525c:	dd2a      	ble.n	80052b4 <__exponent+0x70>
 800525e:	f10d 0407 	add.w	r4, sp, #7
 8005262:	46a4      	mov	ip, r4
 8005264:	270a      	movs	r7, #10
 8005266:	46a6      	mov	lr, r4
 8005268:	460a      	mov	r2, r1
 800526a:	fb91 f6f7 	sdiv	r6, r1, r7
 800526e:	fb07 1516 	mls	r5, r7, r6, r1
 8005272:	3530      	adds	r5, #48	; 0x30
 8005274:	2a63      	cmp	r2, #99	; 0x63
 8005276:	f104 34ff 	add.w	r4, r4, #4294967295
 800527a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800527e:	4631      	mov	r1, r6
 8005280:	dcf1      	bgt.n	8005266 <__exponent+0x22>
 8005282:	3130      	adds	r1, #48	; 0x30
 8005284:	f1ae 0502 	sub.w	r5, lr, #2
 8005288:	f804 1c01 	strb.w	r1, [r4, #-1]
 800528c:	1c44      	adds	r4, r0, #1
 800528e:	4629      	mov	r1, r5
 8005290:	4561      	cmp	r1, ip
 8005292:	d30a      	bcc.n	80052aa <__exponent+0x66>
 8005294:	f10d 0209 	add.w	r2, sp, #9
 8005298:	eba2 020e 	sub.w	r2, r2, lr
 800529c:	4565      	cmp	r5, ip
 800529e:	bf88      	it	hi
 80052a0:	2200      	movhi	r2, #0
 80052a2:	4413      	add	r3, r2
 80052a4:	1a18      	subs	r0, r3, r0
 80052a6:	b003      	add	sp, #12
 80052a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052b2:	e7ed      	b.n	8005290 <__exponent+0x4c>
 80052b4:	2330      	movs	r3, #48	; 0x30
 80052b6:	3130      	adds	r1, #48	; 0x30
 80052b8:	7083      	strb	r3, [r0, #2]
 80052ba:	70c1      	strb	r1, [r0, #3]
 80052bc:	1d03      	adds	r3, r0, #4
 80052be:	e7f1      	b.n	80052a4 <__exponent+0x60>

080052c0 <_printf_float>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	ed2d 8b02 	vpush	{d8}
 80052c8:	b08d      	sub	sp, #52	; 0x34
 80052ca:	460c      	mov	r4, r1
 80052cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052d0:	4616      	mov	r6, r2
 80052d2:	461f      	mov	r7, r3
 80052d4:	4605      	mov	r5, r0
 80052d6:	f001 fa39 	bl	800674c <_localeconv_r>
 80052da:	f8d0 a000 	ldr.w	sl, [r0]
 80052de:	4650      	mov	r0, sl
 80052e0:	f7fa ff9e 	bl	8000220 <strlen>
 80052e4:	2300      	movs	r3, #0
 80052e6:	930a      	str	r3, [sp, #40]	; 0x28
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	9305      	str	r3, [sp, #20]
 80052ec:	f8d8 3000 	ldr.w	r3, [r8]
 80052f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052f4:	3307      	adds	r3, #7
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	f103 0208 	add.w	r2, r3, #8
 80052fe:	f8c8 2000 	str.w	r2, [r8]
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800530a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800530e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005312:	9307      	str	r3, [sp, #28]
 8005314:	f8cd 8018 	str.w	r8, [sp, #24]
 8005318:	ee08 0a10 	vmov	s16, r0
 800531c:	4b9f      	ldr	r3, [pc, #636]	; (800559c <_printf_float+0x2dc>)
 800531e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	f7fb fc29 	bl	8000b7c <__aeabi_dcmpun>
 800532a:	bb88      	cbnz	r0, 8005390 <_printf_float+0xd0>
 800532c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005330:	4b9a      	ldr	r3, [pc, #616]	; (800559c <_printf_float+0x2dc>)
 8005332:	f04f 32ff 	mov.w	r2, #4294967295
 8005336:	f7fb fc03 	bl	8000b40 <__aeabi_dcmple>
 800533a:	bb48      	cbnz	r0, 8005390 <_printf_float+0xd0>
 800533c:	2200      	movs	r2, #0
 800533e:	2300      	movs	r3, #0
 8005340:	4640      	mov	r0, r8
 8005342:	4649      	mov	r1, r9
 8005344:	f7fb fbf2 	bl	8000b2c <__aeabi_dcmplt>
 8005348:	b110      	cbz	r0, 8005350 <_printf_float+0x90>
 800534a:	232d      	movs	r3, #45	; 0x2d
 800534c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005350:	4b93      	ldr	r3, [pc, #588]	; (80055a0 <_printf_float+0x2e0>)
 8005352:	4894      	ldr	r0, [pc, #592]	; (80055a4 <_printf_float+0x2e4>)
 8005354:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005358:	bf94      	ite	ls
 800535a:	4698      	movls	r8, r3
 800535c:	4680      	movhi	r8, r0
 800535e:	2303      	movs	r3, #3
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	9b05      	ldr	r3, [sp, #20]
 8005364:	f023 0204 	bic.w	r2, r3, #4
 8005368:	6022      	str	r2, [r4, #0]
 800536a:	f04f 0900 	mov.w	r9, #0
 800536e:	9700      	str	r7, [sp, #0]
 8005370:	4633      	mov	r3, r6
 8005372:	aa0b      	add	r2, sp, #44	; 0x2c
 8005374:	4621      	mov	r1, r4
 8005376:	4628      	mov	r0, r5
 8005378:	f000 f9d8 	bl	800572c <_printf_common>
 800537c:	3001      	adds	r0, #1
 800537e:	f040 8090 	bne.w	80054a2 <_printf_float+0x1e2>
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
 8005386:	b00d      	add	sp, #52	; 0x34
 8005388:	ecbd 8b02 	vpop	{d8}
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	4640      	mov	r0, r8
 8005396:	4649      	mov	r1, r9
 8005398:	f7fb fbf0 	bl	8000b7c <__aeabi_dcmpun>
 800539c:	b140      	cbz	r0, 80053b0 <_printf_float+0xf0>
 800539e:	464b      	mov	r3, r9
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bfbc      	itt	lt
 80053a4:	232d      	movlt	r3, #45	; 0x2d
 80053a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053aa:	487f      	ldr	r0, [pc, #508]	; (80055a8 <_printf_float+0x2e8>)
 80053ac:	4b7f      	ldr	r3, [pc, #508]	; (80055ac <_printf_float+0x2ec>)
 80053ae:	e7d1      	b.n	8005354 <_printf_float+0x94>
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053b6:	9206      	str	r2, [sp, #24]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	d13f      	bne.n	800543c <_printf_float+0x17c>
 80053bc:	2306      	movs	r3, #6
 80053be:	6063      	str	r3, [r4, #4]
 80053c0:	9b05      	ldr	r3, [sp, #20]
 80053c2:	6861      	ldr	r1, [r4, #4]
 80053c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053c8:	2300      	movs	r3, #0
 80053ca:	9303      	str	r3, [sp, #12]
 80053cc:	ab0a      	add	r3, sp, #40	; 0x28
 80053ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053d2:	ab09      	add	r3, sp, #36	; 0x24
 80053d4:	ec49 8b10 	vmov	d0, r8, r9
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053e0:	4628      	mov	r0, r5
 80053e2:	f7ff fecd 	bl	8005180 <__cvt>
 80053e6:	9b06      	ldr	r3, [sp, #24]
 80053e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ea:	2b47      	cmp	r3, #71	; 0x47
 80053ec:	4680      	mov	r8, r0
 80053ee:	d108      	bne.n	8005402 <_printf_float+0x142>
 80053f0:	1cc8      	adds	r0, r1, #3
 80053f2:	db02      	blt.n	80053fa <_printf_float+0x13a>
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	4299      	cmp	r1, r3
 80053f8:	dd41      	ble.n	800547e <_printf_float+0x1be>
 80053fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80053fe:	fa5f fb8b 	uxtb.w	fp, fp
 8005402:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005406:	d820      	bhi.n	800544a <_printf_float+0x18a>
 8005408:	3901      	subs	r1, #1
 800540a:	465a      	mov	r2, fp
 800540c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005410:	9109      	str	r1, [sp, #36]	; 0x24
 8005412:	f7ff ff17 	bl	8005244 <__exponent>
 8005416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005418:	1813      	adds	r3, r2, r0
 800541a:	2a01      	cmp	r2, #1
 800541c:	4681      	mov	r9, r0
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	dc02      	bgt.n	8005428 <_printf_float+0x168>
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	07d2      	lsls	r2, r2, #31
 8005426:	d501      	bpl.n	800542c <_printf_float+0x16c>
 8005428:	3301      	adds	r3, #1
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005430:	2b00      	cmp	r3, #0
 8005432:	d09c      	beq.n	800536e <_printf_float+0xae>
 8005434:	232d      	movs	r3, #45	; 0x2d
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543a:	e798      	b.n	800536e <_printf_float+0xae>
 800543c:	9a06      	ldr	r2, [sp, #24]
 800543e:	2a47      	cmp	r2, #71	; 0x47
 8005440:	d1be      	bne.n	80053c0 <_printf_float+0x100>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1bc      	bne.n	80053c0 <_printf_float+0x100>
 8005446:	2301      	movs	r3, #1
 8005448:	e7b9      	b.n	80053be <_printf_float+0xfe>
 800544a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800544e:	d118      	bne.n	8005482 <_printf_float+0x1c2>
 8005450:	2900      	cmp	r1, #0
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	dd0b      	ble.n	800546e <_printf_float+0x1ae>
 8005456:	6121      	str	r1, [r4, #16]
 8005458:	b913      	cbnz	r3, 8005460 <_printf_float+0x1a0>
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	07d0      	lsls	r0, r2, #31
 800545e:	d502      	bpl.n	8005466 <_printf_float+0x1a6>
 8005460:	3301      	adds	r3, #1
 8005462:	440b      	add	r3, r1
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	65a1      	str	r1, [r4, #88]	; 0x58
 8005468:	f04f 0900 	mov.w	r9, #0
 800546c:	e7de      	b.n	800542c <_printf_float+0x16c>
 800546e:	b913      	cbnz	r3, 8005476 <_printf_float+0x1b6>
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	07d2      	lsls	r2, r2, #31
 8005474:	d501      	bpl.n	800547a <_printf_float+0x1ba>
 8005476:	3302      	adds	r3, #2
 8005478:	e7f4      	b.n	8005464 <_printf_float+0x1a4>
 800547a:	2301      	movs	r3, #1
 800547c:	e7f2      	b.n	8005464 <_printf_float+0x1a4>
 800547e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005484:	4299      	cmp	r1, r3
 8005486:	db05      	blt.n	8005494 <_printf_float+0x1d4>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	6121      	str	r1, [r4, #16]
 800548c:	07d8      	lsls	r0, r3, #31
 800548e:	d5ea      	bpl.n	8005466 <_printf_float+0x1a6>
 8005490:	1c4b      	adds	r3, r1, #1
 8005492:	e7e7      	b.n	8005464 <_printf_float+0x1a4>
 8005494:	2900      	cmp	r1, #0
 8005496:	bfd4      	ite	le
 8005498:	f1c1 0202 	rsble	r2, r1, #2
 800549c:	2201      	movgt	r2, #1
 800549e:	4413      	add	r3, r2
 80054a0:	e7e0      	b.n	8005464 <_printf_float+0x1a4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	055a      	lsls	r2, r3, #21
 80054a6:	d407      	bmi.n	80054b8 <_printf_float+0x1f8>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	4642      	mov	r2, r8
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b8      	blx	r7
 80054b2:	3001      	adds	r0, #1
 80054b4:	d12c      	bne.n	8005510 <_printf_float+0x250>
 80054b6:	e764      	b.n	8005382 <_printf_float+0xc2>
 80054b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054bc:	f240 80e0 	bls.w	8005680 <_printf_float+0x3c0>
 80054c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054c4:	2200      	movs	r2, #0
 80054c6:	2300      	movs	r3, #0
 80054c8:	f7fb fb26 	bl	8000b18 <__aeabi_dcmpeq>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d034      	beq.n	800553a <_printf_float+0x27a>
 80054d0:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <_printf_float+0x2f0>)
 80054d2:	2301      	movs	r3, #1
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b8      	blx	r7
 80054da:	3001      	adds	r0, #1
 80054dc:	f43f af51 	beq.w	8005382 <_printf_float+0xc2>
 80054e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e4:	429a      	cmp	r2, r3
 80054e6:	db02      	blt.n	80054ee <_printf_float+0x22e>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	07d8      	lsls	r0, r3, #31
 80054ec:	d510      	bpl.n	8005510 <_printf_float+0x250>
 80054ee:	ee18 3a10 	vmov	r3, s16
 80054f2:	4652      	mov	r2, sl
 80054f4:	4631      	mov	r1, r6
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b8      	blx	r7
 80054fa:	3001      	adds	r0, #1
 80054fc:	f43f af41 	beq.w	8005382 <_printf_float+0xc2>
 8005500:	f04f 0800 	mov.w	r8, #0
 8005504:	f104 091a 	add.w	r9, r4, #26
 8005508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	4543      	cmp	r3, r8
 800550e:	dc09      	bgt.n	8005524 <_printf_float+0x264>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	f100 8105 	bmi.w	8005722 <_printf_float+0x462>
 8005518:	68e0      	ldr	r0, [r4, #12]
 800551a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551c:	4298      	cmp	r0, r3
 800551e:	bfb8      	it	lt
 8005520:	4618      	movlt	r0, r3
 8005522:	e730      	b.n	8005386 <_printf_float+0xc6>
 8005524:	2301      	movs	r3, #1
 8005526:	464a      	mov	r2, r9
 8005528:	4631      	mov	r1, r6
 800552a:	4628      	mov	r0, r5
 800552c:	47b8      	blx	r7
 800552e:	3001      	adds	r0, #1
 8005530:	f43f af27 	beq.w	8005382 <_printf_float+0xc2>
 8005534:	f108 0801 	add.w	r8, r8, #1
 8005538:	e7e6      	b.n	8005508 <_printf_float+0x248>
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc39      	bgt.n	80055b4 <_printf_float+0x2f4>
 8005540:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <_printf_float+0x2f0>)
 8005542:	2301      	movs	r3, #1
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	f43f af19 	beq.w	8005382 <_printf_float+0xc2>
 8005550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005554:	4313      	orrs	r3, r2
 8005556:	d102      	bne.n	800555e <_printf_float+0x29e>
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	07d9      	lsls	r1, r3, #31
 800555c:	d5d8      	bpl.n	8005510 <_printf_float+0x250>
 800555e:	ee18 3a10 	vmov	r3, s16
 8005562:	4652      	mov	r2, sl
 8005564:	4631      	mov	r1, r6
 8005566:	4628      	mov	r0, r5
 8005568:	47b8      	blx	r7
 800556a:	3001      	adds	r0, #1
 800556c:	f43f af09 	beq.w	8005382 <_printf_float+0xc2>
 8005570:	f04f 0900 	mov.w	r9, #0
 8005574:	f104 0a1a 	add.w	sl, r4, #26
 8005578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557a:	425b      	negs	r3, r3
 800557c:	454b      	cmp	r3, r9
 800557e:	dc01      	bgt.n	8005584 <_printf_float+0x2c4>
 8005580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005582:	e792      	b.n	80054aa <_printf_float+0x1ea>
 8005584:	2301      	movs	r3, #1
 8005586:	4652      	mov	r2, sl
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f aef7 	beq.w	8005382 <_printf_float+0xc2>
 8005594:	f109 0901 	add.w	r9, r9, #1
 8005598:	e7ee      	b.n	8005578 <_printf_float+0x2b8>
 800559a:	bf00      	nop
 800559c:	7fefffff 	.word	0x7fefffff
 80055a0:	08007bdc 	.word	0x08007bdc
 80055a4:	08007be0 	.word	0x08007be0
 80055a8:	08007be8 	.word	0x08007be8
 80055ac:	08007be4 	.word	0x08007be4
 80055b0:	08007bec 	.word	0x08007bec
 80055b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055b8:	429a      	cmp	r2, r3
 80055ba:	bfa8      	it	ge
 80055bc:	461a      	movge	r2, r3
 80055be:	2a00      	cmp	r2, #0
 80055c0:	4691      	mov	r9, r2
 80055c2:	dc37      	bgt.n	8005634 <_printf_float+0x374>
 80055c4:	f04f 0b00 	mov.w	fp, #0
 80055c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055cc:	f104 021a 	add.w	r2, r4, #26
 80055d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	eba3 0309 	sub.w	r3, r3, r9
 80055d8:	455b      	cmp	r3, fp
 80055da:	dc33      	bgt.n	8005644 <_printf_float+0x384>
 80055dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e0:	429a      	cmp	r2, r3
 80055e2:	db3b      	blt.n	800565c <_printf_float+0x39c>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	07da      	lsls	r2, r3, #31
 80055e8:	d438      	bmi.n	800565c <_printf_float+0x39c>
 80055ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ec:	9a05      	ldr	r2, [sp, #20]
 80055ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055f0:	1a9a      	subs	r2, r3, r2
 80055f2:	eba3 0901 	sub.w	r9, r3, r1
 80055f6:	4591      	cmp	r9, r2
 80055f8:	bfa8      	it	ge
 80055fa:	4691      	movge	r9, r2
 80055fc:	f1b9 0f00 	cmp.w	r9, #0
 8005600:	dc35      	bgt.n	800566e <_printf_float+0x3ae>
 8005602:	f04f 0800 	mov.w	r8, #0
 8005606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800560a:	f104 0a1a 	add.w	sl, r4, #26
 800560e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	eba3 0309 	sub.w	r3, r3, r9
 8005618:	4543      	cmp	r3, r8
 800561a:	f77f af79 	ble.w	8005510 <_printf_float+0x250>
 800561e:	2301      	movs	r3, #1
 8005620:	4652      	mov	r2, sl
 8005622:	4631      	mov	r1, r6
 8005624:	4628      	mov	r0, r5
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	f43f aeaa 	beq.w	8005382 <_printf_float+0xc2>
 800562e:	f108 0801 	add.w	r8, r8, #1
 8005632:	e7ec      	b.n	800560e <_printf_float+0x34e>
 8005634:	4613      	mov	r3, r2
 8005636:	4631      	mov	r1, r6
 8005638:	4642      	mov	r2, r8
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	d1c0      	bne.n	80055c4 <_printf_float+0x304>
 8005642:	e69e      	b.n	8005382 <_printf_float+0xc2>
 8005644:	2301      	movs	r3, #1
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	9205      	str	r2, [sp, #20]
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	f43f ae97 	beq.w	8005382 <_printf_float+0xc2>
 8005654:	9a05      	ldr	r2, [sp, #20]
 8005656:	f10b 0b01 	add.w	fp, fp, #1
 800565a:	e7b9      	b.n	80055d0 <_printf_float+0x310>
 800565c:	ee18 3a10 	vmov	r3, s16
 8005660:	4652      	mov	r2, sl
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	d1be      	bne.n	80055ea <_printf_float+0x32a>
 800566c:	e689      	b.n	8005382 <_printf_float+0xc2>
 800566e:	9a05      	ldr	r2, [sp, #20]
 8005670:	464b      	mov	r3, r9
 8005672:	4442      	add	r2, r8
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	d1c1      	bne.n	8005602 <_printf_float+0x342>
 800567e:	e680      	b.n	8005382 <_printf_float+0xc2>
 8005680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005682:	2a01      	cmp	r2, #1
 8005684:	dc01      	bgt.n	800568a <_printf_float+0x3ca>
 8005686:	07db      	lsls	r3, r3, #31
 8005688:	d538      	bpl.n	80056fc <_printf_float+0x43c>
 800568a:	2301      	movs	r3, #1
 800568c:	4642      	mov	r2, r8
 800568e:	4631      	mov	r1, r6
 8005690:	4628      	mov	r0, r5
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f ae74 	beq.w	8005382 <_printf_float+0xc2>
 800569a:	ee18 3a10 	vmov	r3, s16
 800569e:	4652      	mov	r2, sl
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f ae6b 	beq.w	8005382 <_printf_float+0xc2>
 80056ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056b0:	2200      	movs	r2, #0
 80056b2:	2300      	movs	r3, #0
 80056b4:	f7fb fa30 	bl	8000b18 <__aeabi_dcmpeq>
 80056b8:	b9d8      	cbnz	r0, 80056f2 <_printf_float+0x432>
 80056ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056bc:	f108 0201 	add.w	r2, r8, #1
 80056c0:	3b01      	subs	r3, #1
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	d10e      	bne.n	80056ea <_printf_float+0x42a>
 80056cc:	e659      	b.n	8005382 <_printf_float+0xc2>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4652      	mov	r2, sl
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f ae52 	beq.w	8005382 <_printf_float+0xc2>
 80056de:	f108 0801 	add.w	r8, r8, #1
 80056e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4543      	cmp	r3, r8
 80056e8:	dcf1      	bgt.n	80056ce <_printf_float+0x40e>
 80056ea:	464b      	mov	r3, r9
 80056ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056f0:	e6dc      	b.n	80054ac <_printf_float+0x1ec>
 80056f2:	f04f 0800 	mov.w	r8, #0
 80056f6:	f104 0a1a 	add.w	sl, r4, #26
 80056fa:	e7f2      	b.n	80056e2 <_printf_float+0x422>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4642      	mov	r2, r8
 8005700:	e7df      	b.n	80056c2 <_printf_float+0x402>
 8005702:	2301      	movs	r3, #1
 8005704:	464a      	mov	r2, r9
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae38 	beq.w	8005382 <_printf_float+0xc2>
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800571a:	1a5b      	subs	r3, r3, r1
 800571c:	4543      	cmp	r3, r8
 800571e:	dcf0      	bgt.n	8005702 <_printf_float+0x442>
 8005720:	e6fa      	b.n	8005518 <_printf_float+0x258>
 8005722:	f04f 0800 	mov.w	r8, #0
 8005726:	f104 0919 	add.w	r9, r4, #25
 800572a:	e7f4      	b.n	8005716 <_printf_float+0x456>

0800572c <_printf_common>:
 800572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	4616      	mov	r6, r2
 8005732:	4699      	mov	r9, r3
 8005734:	688a      	ldr	r2, [r1, #8]
 8005736:	690b      	ldr	r3, [r1, #16]
 8005738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800573c:	4293      	cmp	r3, r2
 800573e:	bfb8      	it	lt
 8005740:	4613      	movlt	r3, r2
 8005742:	6033      	str	r3, [r6, #0]
 8005744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005748:	4607      	mov	r7, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b10a      	cbz	r2, 8005752 <_printf_common+0x26>
 800574e:	3301      	adds	r3, #1
 8005750:	6033      	str	r3, [r6, #0]
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	0699      	lsls	r1, r3, #26
 8005756:	bf42      	ittt	mi
 8005758:	6833      	ldrmi	r3, [r6, #0]
 800575a:	3302      	addmi	r3, #2
 800575c:	6033      	strmi	r3, [r6, #0]
 800575e:	6825      	ldr	r5, [r4, #0]
 8005760:	f015 0506 	ands.w	r5, r5, #6
 8005764:	d106      	bne.n	8005774 <_printf_common+0x48>
 8005766:	f104 0a19 	add.w	sl, r4, #25
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	6832      	ldr	r2, [r6, #0]
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	42ab      	cmp	r3, r5
 8005772:	dc26      	bgt.n	80057c2 <_printf_common+0x96>
 8005774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005778:	1e13      	subs	r3, r2, #0
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	bf18      	it	ne
 800577e:	2301      	movne	r3, #1
 8005780:	0692      	lsls	r2, r2, #26
 8005782:	d42b      	bmi.n	80057dc <_printf_common+0xb0>
 8005784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005788:	4649      	mov	r1, r9
 800578a:	4638      	mov	r0, r7
 800578c:	47c0      	blx	r8
 800578e:	3001      	adds	r0, #1
 8005790:	d01e      	beq.n	80057d0 <_printf_common+0xa4>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	68e5      	ldr	r5, [r4, #12]
 8005796:	6832      	ldr	r2, [r6, #0]
 8005798:	f003 0306 	and.w	r3, r3, #6
 800579c:	2b04      	cmp	r3, #4
 800579e:	bf08      	it	eq
 80057a0:	1aad      	subeq	r5, r5, r2
 80057a2:	68a3      	ldr	r3, [r4, #8]
 80057a4:	6922      	ldr	r2, [r4, #16]
 80057a6:	bf0c      	ite	eq
 80057a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ac:	2500      	movne	r5, #0
 80057ae:	4293      	cmp	r3, r2
 80057b0:	bfc4      	itt	gt
 80057b2:	1a9b      	subgt	r3, r3, r2
 80057b4:	18ed      	addgt	r5, r5, r3
 80057b6:	2600      	movs	r6, #0
 80057b8:	341a      	adds	r4, #26
 80057ba:	42b5      	cmp	r5, r6
 80057bc:	d11a      	bne.n	80057f4 <_printf_common+0xc8>
 80057be:	2000      	movs	r0, #0
 80057c0:	e008      	b.n	80057d4 <_printf_common+0xa8>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4652      	mov	r2, sl
 80057c6:	4649      	mov	r1, r9
 80057c8:	4638      	mov	r0, r7
 80057ca:	47c0      	blx	r8
 80057cc:	3001      	adds	r0, #1
 80057ce:	d103      	bne.n	80057d8 <_printf_common+0xac>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	3501      	adds	r5, #1
 80057da:	e7c6      	b.n	800576a <_printf_common+0x3e>
 80057dc:	18e1      	adds	r1, r4, r3
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	2030      	movs	r0, #48	; 0x30
 80057e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057e6:	4422      	add	r2, r4
 80057e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057f0:	3302      	adds	r3, #2
 80057f2:	e7c7      	b.n	8005784 <_printf_common+0x58>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4622      	mov	r2, r4
 80057f8:	4649      	mov	r1, r9
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c0      	blx	r8
 80057fe:	3001      	adds	r0, #1
 8005800:	d0e6      	beq.n	80057d0 <_printf_common+0xa4>
 8005802:	3601      	adds	r6, #1
 8005804:	e7d9      	b.n	80057ba <_printf_common+0x8e>
	...

08005808 <_printf_i>:
 8005808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	7e0f      	ldrb	r7, [r1, #24]
 800580e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005810:	2f78      	cmp	r7, #120	; 0x78
 8005812:	4691      	mov	r9, r2
 8005814:	4680      	mov	r8, r0
 8005816:	460c      	mov	r4, r1
 8005818:	469a      	mov	sl, r3
 800581a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800581e:	d807      	bhi.n	8005830 <_printf_i+0x28>
 8005820:	2f62      	cmp	r7, #98	; 0x62
 8005822:	d80a      	bhi.n	800583a <_printf_i+0x32>
 8005824:	2f00      	cmp	r7, #0
 8005826:	f000 80d8 	beq.w	80059da <_printf_i+0x1d2>
 800582a:	2f58      	cmp	r7, #88	; 0x58
 800582c:	f000 80a3 	beq.w	8005976 <_printf_i+0x16e>
 8005830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005838:	e03a      	b.n	80058b0 <_printf_i+0xa8>
 800583a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800583e:	2b15      	cmp	r3, #21
 8005840:	d8f6      	bhi.n	8005830 <_printf_i+0x28>
 8005842:	a101      	add	r1, pc, #4	; (adr r1, 8005848 <_printf_i+0x40>)
 8005844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005848:	080058a1 	.word	0x080058a1
 800584c:	080058b5 	.word	0x080058b5
 8005850:	08005831 	.word	0x08005831
 8005854:	08005831 	.word	0x08005831
 8005858:	08005831 	.word	0x08005831
 800585c:	08005831 	.word	0x08005831
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005831 	.word	0x08005831
 8005868:	08005831 	.word	0x08005831
 800586c:	08005831 	.word	0x08005831
 8005870:	08005831 	.word	0x08005831
 8005874:	080059c1 	.word	0x080059c1
 8005878:	080058e5 	.word	0x080058e5
 800587c:	080059a3 	.word	0x080059a3
 8005880:	08005831 	.word	0x08005831
 8005884:	08005831 	.word	0x08005831
 8005888:	080059e3 	.word	0x080059e3
 800588c:	08005831 	.word	0x08005831
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005831 	.word	0x08005831
 8005898:	08005831 	.word	0x08005831
 800589c:	080059ab 	.word	0x080059ab
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	1d1a      	adds	r2, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	602a      	str	r2, [r5, #0]
 80058a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0a3      	b.n	80059fc <_printf_i+0x1f4>
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	6829      	ldr	r1, [r5, #0]
 80058b8:	0606      	lsls	r6, r0, #24
 80058ba:	f101 0304 	add.w	r3, r1, #4
 80058be:	d50a      	bpl.n	80058d6 <_printf_i+0xce>
 80058c0:	680e      	ldr	r6, [r1, #0]
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	2e00      	cmp	r6, #0
 80058c6:	da03      	bge.n	80058d0 <_printf_i+0xc8>
 80058c8:	232d      	movs	r3, #45	; 0x2d
 80058ca:	4276      	negs	r6, r6
 80058cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d0:	485e      	ldr	r0, [pc, #376]	; (8005a4c <_printf_i+0x244>)
 80058d2:	230a      	movs	r3, #10
 80058d4:	e019      	b.n	800590a <_printf_i+0x102>
 80058d6:	680e      	ldr	r6, [r1, #0]
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058de:	bf18      	it	ne
 80058e0:	b236      	sxthne	r6, r6
 80058e2:	e7ef      	b.n	80058c4 <_printf_i+0xbc>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	1d19      	adds	r1, r3, #4
 80058ea:	6029      	str	r1, [r5, #0]
 80058ec:	0601      	lsls	r1, r0, #24
 80058ee:	d501      	bpl.n	80058f4 <_printf_i+0xec>
 80058f0:	681e      	ldr	r6, [r3, #0]
 80058f2:	e002      	b.n	80058fa <_printf_i+0xf2>
 80058f4:	0646      	lsls	r6, r0, #25
 80058f6:	d5fb      	bpl.n	80058f0 <_printf_i+0xe8>
 80058f8:	881e      	ldrh	r6, [r3, #0]
 80058fa:	4854      	ldr	r0, [pc, #336]	; (8005a4c <_printf_i+0x244>)
 80058fc:	2f6f      	cmp	r7, #111	; 0x6f
 80058fe:	bf0c      	ite	eq
 8005900:	2308      	moveq	r3, #8
 8005902:	230a      	movne	r3, #10
 8005904:	2100      	movs	r1, #0
 8005906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800590a:	6865      	ldr	r5, [r4, #4]
 800590c:	60a5      	str	r5, [r4, #8]
 800590e:	2d00      	cmp	r5, #0
 8005910:	bfa2      	ittt	ge
 8005912:	6821      	ldrge	r1, [r4, #0]
 8005914:	f021 0104 	bicge.w	r1, r1, #4
 8005918:	6021      	strge	r1, [r4, #0]
 800591a:	b90e      	cbnz	r6, 8005920 <_printf_i+0x118>
 800591c:	2d00      	cmp	r5, #0
 800591e:	d04d      	beq.n	80059bc <_printf_i+0x1b4>
 8005920:	4615      	mov	r5, r2
 8005922:	fbb6 f1f3 	udiv	r1, r6, r3
 8005926:	fb03 6711 	mls	r7, r3, r1, r6
 800592a:	5dc7      	ldrb	r7, [r0, r7]
 800592c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005930:	4637      	mov	r7, r6
 8005932:	42bb      	cmp	r3, r7
 8005934:	460e      	mov	r6, r1
 8005936:	d9f4      	bls.n	8005922 <_printf_i+0x11a>
 8005938:	2b08      	cmp	r3, #8
 800593a:	d10b      	bne.n	8005954 <_printf_i+0x14c>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	07de      	lsls	r6, r3, #31
 8005940:	d508      	bpl.n	8005954 <_printf_i+0x14c>
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	6861      	ldr	r1, [r4, #4]
 8005946:	4299      	cmp	r1, r3
 8005948:	bfde      	ittt	le
 800594a:	2330      	movle	r3, #48	; 0x30
 800594c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005954:	1b52      	subs	r2, r2, r5
 8005956:	6122      	str	r2, [r4, #16]
 8005958:	f8cd a000 	str.w	sl, [sp]
 800595c:	464b      	mov	r3, r9
 800595e:	aa03      	add	r2, sp, #12
 8005960:	4621      	mov	r1, r4
 8005962:	4640      	mov	r0, r8
 8005964:	f7ff fee2 	bl	800572c <_printf_common>
 8005968:	3001      	adds	r0, #1
 800596a:	d14c      	bne.n	8005a06 <_printf_i+0x1fe>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	b004      	add	sp, #16
 8005972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005976:	4835      	ldr	r0, [pc, #212]	; (8005a4c <_printf_i+0x244>)
 8005978:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800597c:	6829      	ldr	r1, [r5, #0]
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	f851 6b04 	ldr.w	r6, [r1], #4
 8005984:	6029      	str	r1, [r5, #0]
 8005986:	061d      	lsls	r5, r3, #24
 8005988:	d514      	bpl.n	80059b4 <_printf_i+0x1ac>
 800598a:	07df      	lsls	r7, r3, #31
 800598c:	bf44      	itt	mi
 800598e:	f043 0320 	orrmi.w	r3, r3, #32
 8005992:	6023      	strmi	r3, [r4, #0]
 8005994:	b91e      	cbnz	r6, 800599e <_printf_i+0x196>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	f023 0320 	bic.w	r3, r3, #32
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	2310      	movs	r3, #16
 80059a0:	e7b0      	b.n	8005904 <_printf_i+0xfc>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	2378      	movs	r3, #120	; 0x78
 80059ac:	4828      	ldr	r0, [pc, #160]	; (8005a50 <_printf_i+0x248>)
 80059ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059b2:	e7e3      	b.n	800597c <_printf_i+0x174>
 80059b4:	0659      	lsls	r1, r3, #25
 80059b6:	bf48      	it	mi
 80059b8:	b2b6      	uxthmi	r6, r6
 80059ba:	e7e6      	b.n	800598a <_printf_i+0x182>
 80059bc:	4615      	mov	r5, r2
 80059be:	e7bb      	b.n	8005938 <_printf_i+0x130>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	6826      	ldr	r6, [r4, #0]
 80059c4:	6961      	ldr	r1, [r4, #20]
 80059c6:	1d18      	adds	r0, r3, #4
 80059c8:	6028      	str	r0, [r5, #0]
 80059ca:	0635      	lsls	r5, r6, #24
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	d501      	bpl.n	80059d4 <_printf_i+0x1cc>
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	e002      	b.n	80059da <_printf_i+0x1d2>
 80059d4:	0670      	lsls	r0, r6, #25
 80059d6:	d5fb      	bpl.n	80059d0 <_printf_i+0x1c8>
 80059d8:	8019      	strh	r1, [r3, #0]
 80059da:	2300      	movs	r3, #0
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	4615      	mov	r5, r2
 80059e0:	e7ba      	b.n	8005958 <_printf_i+0x150>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	1d1a      	adds	r2, r3, #4
 80059e6:	602a      	str	r2, [r5, #0]
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	6862      	ldr	r2, [r4, #4]
 80059ec:	2100      	movs	r1, #0
 80059ee:	4628      	mov	r0, r5
 80059f0:	f7fa fc1e 	bl	8000230 <memchr>
 80059f4:	b108      	cbz	r0, 80059fa <_printf_i+0x1f2>
 80059f6:	1b40      	subs	r0, r0, r5
 80059f8:	6060      	str	r0, [r4, #4]
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	2300      	movs	r3, #0
 8005a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a04:	e7a8      	b.n	8005958 <_printf_i+0x150>
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	462a      	mov	r2, r5
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	47d0      	blx	sl
 8005a10:	3001      	adds	r0, #1
 8005a12:	d0ab      	beq.n	800596c <_printf_i+0x164>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	079b      	lsls	r3, r3, #30
 8005a18:	d413      	bmi.n	8005a42 <_printf_i+0x23a>
 8005a1a:	68e0      	ldr	r0, [r4, #12]
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	4298      	cmp	r0, r3
 8005a20:	bfb8      	it	lt
 8005a22:	4618      	movlt	r0, r3
 8005a24:	e7a4      	b.n	8005970 <_printf_i+0x168>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4632      	mov	r2, r6
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	47d0      	blx	sl
 8005a30:	3001      	adds	r0, #1
 8005a32:	d09b      	beq.n	800596c <_printf_i+0x164>
 8005a34:	3501      	adds	r5, #1
 8005a36:	68e3      	ldr	r3, [r4, #12]
 8005a38:	9903      	ldr	r1, [sp, #12]
 8005a3a:	1a5b      	subs	r3, r3, r1
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	dcf2      	bgt.n	8005a26 <_printf_i+0x21e>
 8005a40:	e7eb      	b.n	8005a1a <_printf_i+0x212>
 8005a42:	2500      	movs	r5, #0
 8005a44:	f104 0619 	add.w	r6, r4, #25
 8005a48:	e7f5      	b.n	8005a36 <_printf_i+0x22e>
 8005a4a:	bf00      	nop
 8005a4c:	08007bee 	.word	0x08007bee
 8005a50:	08007bff 	.word	0x08007bff

08005a54 <quorem>:
 8005a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	6903      	ldr	r3, [r0, #16]
 8005a5a:	690c      	ldr	r4, [r1, #16]
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	4607      	mov	r7, r0
 8005a60:	f2c0 8081 	blt.w	8005b66 <quorem+0x112>
 8005a64:	3c01      	subs	r4, #1
 8005a66:	f101 0814 	add.w	r8, r1, #20
 8005a6a:	f100 0514 	add.w	r5, r0, #20
 8005a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a88:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a8c:	d331      	bcc.n	8005af2 <quorem+0x9e>
 8005a8e:	f04f 0e00 	mov.w	lr, #0
 8005a92:	4640      	mov	r0, r8
 8005a94:	46ac      	mov	ip, r5
 8005a96:	46f2      	mov	sl, lr
 8005a98:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a9c:	b293      	uxth	r3, r2
 8005a9e:	fb06 e303 	mla	r3, r6, r3, lr
 8005aa2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	ebaa 0303 	sub.w	r3, sl, r3
 8005aac:	f8dc a000 	ldr.w	sl, [ip]
 8005ab0:	0c12      	lsrs	r2, r2, #16
 8005ab2:	fa13 f38a 	uxtah	r3, r3, sl
 8005ab6:	fb06 e202 	mla	r2, r6, r2, lr
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	9b00      	ldr	r3, [sp, #0]
 8005abe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005acc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ad0:	4581      	cmp	r9, r0
 8005ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ad6:	f84c 3b04 	str.w	r3, [ip], #4
 8005ada:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ade:	d2db      	bcs.n	8005a98 <quorem+0x44>
 8005ae0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ae4:	b92b      	cbnz	r3, 8005af2 <quorem+0x9e>
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	3b04      	subs	r3, #4
 8005aea:	429d      	cmp	r5, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	d32e      	bcc.n	8005b4e <quorem+0xfa>
 8005af0:	613c      	str	r4, [r7, #16]
 8005af2:	4638      	mov	r0, r7
 8005af4:	f001 f8c6 	bl	8006c84 <__mcmp>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	db24      	blt.n	8005b46 <quorem+0xf2>
 8005afc:	3601      	adds	r6, #1
 8005afe:	4628      	mov	r0, r5
 8005b00:	f04f 0c00 	mov.w	ip, #0
 8005b04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b08:	f8d0 e000 	ldr.w	lr, [r0]
 8005b0c:	b293      	uxth	r3, r2
 8005b0e:	ebac 0303 	sub.w	r3, ip, r3
 8005b12:	0c12      	lsrs	r2, r2, #16
 8005b14:	fa13 f38e 	uxtah	r3, r3, lr
 8005b18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b26:	45c1      	cmp	r9, r8
 8005b28:	f840 3b04 	str.w	r3, [r0], #4
 8005b2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b30:	d2e8      	bcs.n	8005b04 <quorem+0xb0>
 8005b32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3a:	b922      	cbnz	r2, 8005b46 <quorem+0xf2>
 8005b3c:	3b04      	subs	r3, #4
 8005b3e:	429d      	cmp	r5, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	d30a      	bcc.n	8005b5a <quorem+0x106>
 8005b44:	613c      	str	r4, [r7, #16]
 8005b46:	4630      	mov	r0, r6
 8005b48:	b003      	add	sp, #12
 8005b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	3b04      	subs	r3, #4
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	d1cc      	bne.n	8005af0 <quorem+0x9c>
 8005b56:	3c01      	subs	r4, #1
 8005b58:	e7c7      	b.n	8005aea <quorem+0x96>
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	3b04      	subs	r3, #4
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d1f0      	bne.n	8005b44 <quorem+0xf0>
 8005b62:	3c01      	subs	r4, #1
 8005b64:	e7eb      	b.n	8005b3e <quorem+0xea>
 8005b66:	2000      	movs	r0, #0
 8005b68:	e7ee      	b.n	8005b48 <quorem+0xf4>
 8005b6a:	0000      	movs	r0, r0
 8005b6c:	0000      	movs	r0, r0
	...

08005b70 <_dtoa_r>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	ed2d 8b04 	vpush	{d8-d9}
 8005b78:	ec57 6b10 	vmov	r6, r7, d0
 8005b7c:	b093      	sub	sp, #76	; 0x4c
 8005b7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b84:	9106      	str	r1, [sp, #24]
 8005b86:	ee10 aa10 	vmov	sl, s0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8005b90:	46bb      	mov	fp, r7
 8005b92:	b975      	cbnz	r5, 8005bb2 <_dtoa_r+0x42>
 8005b94:	2010      	movs	r0, #16
 8005b96:	f000 fddd 	bl	8006754 <malloc>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005b9e:	b920      	cbnz	r0, 8005baa <_dtoa_r+0x3a>
 8005ba0:	4ba7      	ldr	r3, [pc, #668]	; (8005e40 <_dtoa_r+0x2d0>)
 8005ba2:	21ea      	movs	r1, #234	; 0xea
 8005ba4:	48a7      	ldr	r0, [pc, #668]	; (8005e44 <_dtoa_r+0x2d4>)
 8005ba6:	f001 fa75 	bl	8007094 <__assert_func>
 8005baa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bae:	6005      	str	r5, [r0, #0]
 8005bb0:	60c5      	str	r5, [r0, #12]
 8005bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	b151      	cbz	r1, 8005bce <_dtoa_r+0x5e>
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	604a      	str	r2, [r1, #4]
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4093      	lsls	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 fe1c 	bl	8006800 <_Bfree>
 8005bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	1e3b      	subs	r3, r7, #0
 8005bd0:	bfaa      	itet	ge
 8005bd2:	2300      	movge	r3, #0
 8005bd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005bd8:	f8c8 3000 	strge.w	r3, [r8]
 8005bdc:	4b9a      	ldr	r3, [pc, #616]	; (8005e48 <_dtoa_r+0x2d8>)
 8005bde:	bfbc      	itt	lt
 8005be0:	2201      	movlt	r2, #1
 8005be2:	f8c8 2000 	strlt.w	r2, [r8]
 8005be6:	ea33 030b 	bics.w	r3, r3, fp
 8005bea:	d11b      	bne.n	8005c24 <_dtoa_r+0xb4>
 8005bec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bee:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bf8:	4333      	orrs	r3, r6
 8005bfa:	f000 8592 	beq.w	8006722 <_dtoa_r+0xbb2>
 8005bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c00:	b963      	cbnz	r3, 8005c1c <_dtoa_r+0xac>
 8005c02:	4b92      	ldr	r3, [pc, #584]	; (8005e4c <_dtoa_r+0x2dc>)
 8005c04:	e022      	b.n	8005c4c <_dtoa_r+0xdc>
 8005c06:	4b92      	ldr	r3, [pc, #584]	; (8005e50 <_dtoa_r+0x2e0>)
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	9801      	ldr	r0, [sp, #4]
 8005c12:	b013      	add	sp, #76	; 0x4c
 8005c14:	ecbd 8b04 	vpop	{d8-d9}
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	4b8b      	ldr	r3, [pc, #556]	; (8005e4c <_dtoa_r+0x2dc>)
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	3303      	adds	r3, #3
 8005c22:	e7f3      	b.n	8005c0c <_dtoa_r+0x9c>
 8005c24:	2200      	movs	r2, #0
 8005c26:	2300      	movs	r3, #0
 8005c28:	4650      	mov	r0, sl
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	f7fa ff74 	bl	8000b18 <__aeabi_dcmpeq>
 8005c30:	ec4b ab19 	vmov	d9, sl, fp
 8005c34:	4680      	mov	r8, r0
 8005c36:	b158      	cbz	r0, 8005c50 <_dtoa_r+0xe0>
 8005c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 856b 	beq.w	800671c <_dtoa_r+0xbac>
 8005c46:	4883      	ldr	r0, [pc, #524]	; (8005e54 <_dtoa_r+0x2e4>)
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	1e43      	subs	r3, r0, #1
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	e7df      	b.n	8005c10 <_dtoa_r+0xa0>
 8005c50:	ec4b ab10 	vmov	d0, sl, fp
 8005c54:	aa10      	add	r2, sp, #64	; 0x40
 8005c56:	a911      	add	r1, sp, #68	; 0x44
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f001 f8b9 	bl	8006dd0 <__d2b>
 8005c5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005c62:	ee08 0a10 	vmov	s16, r0
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	f000 8084 	beq.w	8005d74 <_dtoa_r+0x204>
 8005c6c:	ee19 3a90 	vmov	r3, s19
 8005c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005c78:	4656      	mov	r6, sl
 8005c7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005c7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005c86:	4b74      	ldr	r3, [pc, #464]	; (8005e58 <_dtoa_r+0x2e8>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	4639      	mov	r1, r7
 8005c8e:	f7fa fb23 	bl	80002d8 <__aeabi_dsub>
 8005c92:	a365      	add	r3, pc, #404	; (adr r3, 8005e28 <_dtoa_r+0x2b8>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f7fa fcd6 	bl	8000648 <__aeabi_dmul>
 8005c9c:	a364      	add	r3, pc, #400	; (adr r3, 8005e30 <_dtoa_r+0x2c0>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f7fa fb1b 	bl	80002dc <__adddf3>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	4628      	mov	r0, r5
 8005caa:	460f      	mov	r7, r1
 8005cac:	f7fa fc62 	bl	8000574 <__aeabi_i2d>
 8005cb0:	a361      	add	r3, pc, #388	; (adr r3, 8005e38 <_dtoa_r+0x2c8>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fcc7 	bl	8000648 <__aeabi_dmul>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa fb0b 	bl	80002dc <__adddf3>
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460f      	mov	r7, r1
 8005cca:	f7fa ff6d 	bl	8000ba8 <__aeabi_d2iz>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	9000      	str	r0, [sp, #0]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	f7fa ff28 	bl	8000b2c <__aeabi_dcmplt>
 8005cdc:	b150      	cbz	r0, 8005cf4 <_dtoa_r+0x184>
 8005cde:	9800      	ldr	r0, [sp, #0]
 8005ce0:	f7fa fc48 	bl	8000574 <__aeabi_i2d>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	f7fa ff16 	bl	8000b18 <__aeabi_dcmpeq>
 8005cec:	b910      	cbnz	r0, 8005cf4 <_dtoa_r+0x184>
 8005cee:	9b00      	ldr	r3, [sp, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	2b16      	cmp	r3, #22
 8005cf8:	d85a      	bhi.n	8005db0 <_dtoa_r+0x240>
 8005cfa:	9a00      	ldr	r2, [sp, #0]
 8005cfc:	4b57      	ldr	r3, [pc, #348]	; (8005e5c <_dtoa_r+0x2ec>)
 8005cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	ec51 0b19 	vmov	r0, r1, d9
 8005d0a:	f7fa ff0f 	bl	8000b2c <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d050      	beq.n	8005db4 <_dtoa_r+0x244>
 8005d12:	9b00      	ldr	r3, [sp, #0]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d1e:	1b5d      	subs	r5, r3, r5
 8005d20:	1e6b      	subs	r3, r5, #1
 8005d22:	9305      	str	r3, [sp, #20]
 8005d24:	bf45      	ittet	mi
 8005d26:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d2a:	9304      	strmi	r3, [sp, #16]
 8005d2c:	2300      	movpl	r3, #0
 8005d2e:	2300      	movmi	r3, #0
 8005d30:	bf4c      	ite	mi
 8005d32:	9305      	strmi	r3, [sp, #20]
 8005d34:	9304      	strpl	r3, [sp, #16]
 8005d36:	9b00      	ldr	r3, [sp, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	db3d      	blt.n	8005db8 <_dtoa_r+0x248>
 8005d3c:	9b05      	ldr	r3, [sp, #20]
 8005d3e:	9a00      	ldr	r2, [sp, #0]
 8005d40:	920a      	str	r2, [sp, #40]	; 0x28
 8005d42:	4413      	add	r3, r2
 8005d44:	9305      	str	r3, [sp, #20]
 8005d46:	2300      	movs	r3, #0
 8005d48:	9307      	str	r3, [sp, #28]
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	f200 8089 	bhi.w	8005e64 <_dtoa_r+0x2f4>
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	bfc4      	itt	gt
 8005d56:	3b04      	subgt	r3, #4
 8005d58:	9306      	strgt	r3, [sp, #24]
 8005d5a:	9b06      	ldr	r3, [sp, #24]
 8005d5c:	f1a3 0302 	sub.w	r3, r3, #2
 8005d60:	bfcc      	ite	gt
 8005d62:	2500      	movgt	r5, #0
 8005d64:	2501      	movle	r5, #1
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	f200 8087 	bhi.w	8005e7a <_dtoa_r+0x30a>
 8005d6c:	e8df f003 	tbb	[pc, r3]
 8005d70:	59383a2d 	.word	0x59383a2d
 8005d74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d78:	441d      	add	r5, r3
 8005d7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	bfc1      	itttt	gt
 8005d82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005d8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005d8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d92:	bfda      	itte	le
 8005d94:	f1c3 0320 	rsble	r3, r3, #32
 8005d98:	fa06 f003 	lslle.w	r0, r6, r3
 8005d9c:	4318      	orrgt	r0, r3
 8005d9e:	f7fa fbd9 	bl	8000554 <__aeabi_ui2d>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4606      	mov	r6, r0
 8005da6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005daa:	3d01      	subs	r5, #1
 8005dac:	930e      	str	r3, [sp, #56]	; 0x38
 8005dae:	e76a      	b.n	8005c86 <_dtoa_r+0x116>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e7b2      	b.n	8005d1a <_dtoa_r+0x1aa>
 8005db4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005db6:	e7b1      	b.n	8005d1c <_dtoa_r+0x1ac>
 8005db8:	9b04      	ldr	r3, [sp, #16]
 8005dba:	9a00      	ldr	r2, [sp, #0]
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	9304      	str	r3, [sp, #16]
 8005dc0:	4253      	negs	r3, r2
 8005dc2:	9307      	str	r3, [sp, #28]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005dc8:	e7bf      	b.n	8005d4a <_dtoa_r+0x1da>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9308      	str	r3, [sp, #32]
 8005dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dc55      	bgt.n	8005e80 <_dtoa_r+0x310>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8005dde:	e00c      	b.n	8005dfa <_dtoa_r+0x28a>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e7f3      	b.n	8005dcc <_dtoa_r+0x25c>
 8005de4:	2300      	movs	r3, #0
 8005de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	9b00      	ldr	r3, [sp, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	9302      	str	r3, [sp, #8]
 8005df0:	3301      	adds	r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	9303      	str	r3, [sp, #12]
 8005df6:	bfb8      	it	lt
 8005df8:	2301      	movlt	r3, #1
 8005dfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	6042      	str	r2, [r0, #4]
 8005e00:	2204      	movs	r2, #4
 8005e02:	f102 0614 	add.w	r6, r2, #20
 8005e06:	429e      	cmp	r6, r3
 8005e08:	6841      	ldr	r1, [r0, #4]
 8005e0a:	d93d      	bls.n	8005e88 <_dtoa_r+0x318>
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 fcb7 	bl	8006780 <_Balloc>
 8005e12:	9001      	str	r0, [sp, #4]
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d13b      	bne.n	8005e90 <_dtoa_r+0x320>
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <_dtoa_r+0x2f0>)
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005e20:	e6c0      	b.n	8005ba4 <_dtoa_r+0x34>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e7df      	b.n	8005de6 <_dtoa_r+0x276>
 8005e26:	bf00      	nop
 8005e28:	636f4361 	.word	0x636f4361
 8005e2c:	3fd287a7 	.word	0x3fd287a7
 8005e30:	8b60c8b3 	.word	0x8b60c8b3
 8005e34:	3fc68a28 	.word	0x3fc68a28
 8005e38:	509f79fb 	.word	0x509f79fb
 8005e3c:	3fd34413 	.word	0x3fd34413
 8005e40:	08007c1d 	.word	0x08007c1d
 8005e44:	08007c34 	.word	0x08007c34
 8005e48:	7ff00000 	.word	0x7ff00000
 8005e4c:	08007c19 	.word	0x08007c19
 8005e50:	08007c10 	.word	0x08007c10
 8005e54:	08007bed 	.word	0x08007bed
 8005e58:	3ff80000 	.word	0x3ff80000
 8005e5c:	08007d28 	.word	0x08007d28
 8005e60:	08007c8f 	.word	0x08007c8f
 8005e64:	2501      	movs	r5, #1
 8005e66:	2300      	movs	r3, #0
 8005e68:	9306      	str	r3, [sp, #24]
 8005e6a:	9508      	str	r5, [sp, #32]
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	2312      	movs	r3, #18
 8005e78:	e7b0      	b.n	8005ddc <_dtoa_r+0x26c>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	e7f5      	b.n	8005e6c <_dtoa_r+0x2fc>
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e86:	e7b8      	b.n	8005dfa <_dtoa_r+0x28a>
 8005e88:	3101      	adds	r1, #1
 8005e8a:	6041      	str	r1, [r0, #4]
 8005e8c:	0052      	lsls	r2, r2, #1
 8005e8e:	e7b8      	b.n	8005e02 <_dtoa_r+0x292>
 8005e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e92:	9a01      	ldr	r2, [sp, #4]
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	2b0e      	cmp	r3, #14
 8005e9a:	f200 809d 	bhi.w	8005fd8 <_dtoa_r+0x468>
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f000 809a 	beq.w	8005fd8 <_dtoa_r+0x468>
 8005ea4:	9b00      	ldr	r3, [sp, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	dd32      	ble.n	8005f10 <_dtoa_r+0x3a0>
 8005eaa:	4ab7      	ldr	r2, [pc, #732]	; (8006188 <_dtoa_r+0x618>)
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eb8:	9b00      	ldr	r3, [sp, #0]
 8005eba:	05d8      	lsls	r0, r3, #23
 8005ebc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005ec0:	d516      	bpl.n	8005ef0 <_dtoa_r+0x380>
 8005ec2:	4bb2      	ldr	r3, [pc, #712]	; (800618c <_dtoa_r+0x61c>)
 8005ec4:	ec51 0b19 	vmov	r0, r1, d9
 8005ec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ecc:	f7fa fce6 	bl	800089c <__aeabi_ddiv>
 8005ed0:	f007 070f 	and.w	r7, r7, #15
 8005ed4:	4682      	mov	sl, r0
 8005ed6:	468b      	mov	fp, r1
 8005ed8:	2503      	movs	r5, #3
 8005eda:	4eac      	ldr	r6, [pc, #688]	; (800618c <_dtoa_r+0x61c>)
 8005edc:	b957      	cbnz	r7, 8005ef4 <_dtoa_r+0x384>
 8005ede:	4642      	mov	r2, r8
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	f7fa fcd9 	bl	800089c <__aeabi_ddiv>
 8005eea:	4682      	mov	sl, r0
 8005eec:	468b      	mov	fp, r1
 8005eee:	e028      	b.n	8005f42 <_dtoa_r+0x3d2>
 8005ef0:	2502      	movs	r5, #2
 8005ef2:	e7f2      	b.n	8005eda <_dtoa_r+0x36a>
 8005ef4:	07f9      	lsls	r1, r7, #31
 8005ef6:	d508      	bpl.n	8005f0a <_dtoa_r+0x39a>
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4649      	mov	r1, r9
 8005efc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f00:	f7fa fba2 	bl	8000648 <__aeabi_dmul>
 8005f04:	3501      	adds	r5, #1
 8005f06:	4680      	mov	r8, r0
 8005f08:	4689      	mov	r9, r1
 8005f0a:	107f      	asrs	r7, r7, #1
 8005f0c:	3608      	adds	r6, #8
 8005f0e:	e7e5      	b.n	8005edc <_dtoa_r+0x36c>
 8005f10:	f000 809b 	beq.w	800604a <_dtoa_r+0x4da>
 8005f14:	9b00      	ldr	r3, [sp, #0]
 8005f16:	4f9d      	ldr	r7, [pc, #628]	; (800618c <_dtoa_r+0x61c>)
 8005f18:	425e      	negs	r6, r3
 8005f1a:	4b9b      	ldr	r3, [pc, #620]	; (8006188 <_dtoa_r+0x618>)
 8005f1c:	f006 020f 	and.w	r2, r6, #15
 8005f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	ec51 0b19 	vmov	r0, r1, d9
 8005f2c:	f7fa fb8c 	bl	8000648 <__aeabi_dmul>
 8005f30:	1136      	asrs	r6, r6, #4
 8005f32:	4682      	mov	sl, r0
 8005f34:	468b      	mov	fp, r1
 8005f36:	2300      	movs	r3, #0
 8005f38:	2502      	movs	r5, #2
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	d17a      	bne.n	8006034 <_dtoa_r+0x4c4>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1d3      	bne.n	8005eea <_dtoa_r+0x37a>
 8005f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8082 	beq.w	800604e <_dtoa_r+0x4de>
 8005f4a:	4b91      	ldr	r3, [pc, #580]	; (8006190 <_dtoa_r+0x620>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4650      	mov	r0, sl
 8005f50:	4659      	mov	r1, fp
 8005f52:	f7fa fdeb 	bl	8000b2c <__aeabi_dcmplt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d079      	beq.n	800604e <_dtoa_r+0x4de>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d076      	beq.n	800604e <_dtoa_r+0x4de>
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dd36      	ble.n	8005fd4 <_dtoa_r+0x464>
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	4650      	mov	r0, sl
 8005f6a:	4659      	mov	r1, fp
 8005f6c:	1e5f      	subs	r7, r3, #1
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4b88      	ldr	r3, [pc, #544]	; (8006194 <_dtoa_r+0x624>)
 8005f72:	f7fa fb69 	bl	8000648 <__aeabi_dmul>
 8005f76:	9e02      	ldr	r6, [sp, #8]
 8005f78:	4682      	mov	sl, r0
 8005f7a:	468b      	mov	fp, r1
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f7fa faf8 	bl	8000574 <__aeabi_i2d>
 8005f84:	4652      	mov	r2, sl
 8005f86:	465b      	mov	r3, fp
 8005f88:	f7fa fb5e 	bl	8000648 <__aeabi_dmul>
 8005f8c:	4b82      	ldr	r3, [pc, #520]	; (8006198 <_dtoa_r+0x628>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f7fa f9a4 	bl	80002dc <__adddf3>
 8005f94:	46d0      	mov	r8, sl
 8005f96:	46d9      	mov	r9, fp
 8005f98:	4682      	mov	sl, r0
 8005f9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	d158      	bne.n	8006054 <_dtoa_r+0x4e4>
 8005fa2:	4b7e      	ldr	r3, [pc, #504]	; (800619c <_dtoa_r+0x62c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa f995 	bl	80002d8 <__aeabi_dsub>
 8005fae:	4652      	mov	r2, sl
 8005fb0:	465b      	mov	r3, fp
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	4689      	mov	r9, r1
 8005fb6:	f7fa fdd7 	bl	8000b68 <__aeabi_dcmpgt>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	f040 8295 	bne.w	80064ea <_dtoa_r+0x97a>
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	4649      	mov	r1, r9
 8005fca:	f7fa fdaf 	bl	8000b2c <__aeabi_dcmplt>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f040 8289 	bne.w	80064e6 <_dtoa_r+0x976>
 8005fd4:	ec5b ab19 	vmov	sl, fp, d9
 8005fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f2c0 8148 	blt.w	8006270 <_dtoa_r+0x700>
 8005fe0:	9a00      	ldr	r2, [sp, #0]
 8005fe2:	2a0e      	cmp	r2, #14
 8005fe4:	f300 8144 	bgt.w	8006270 <_dtoa_r+0x700>
 8005fe8:	4b67      	ldr	r3, [pc, #412]	; (8006188 <_dtoa_r+0x618>)
 8005fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f280 80d5 	bge.w	80061a4 <_dtoa_r+0x634>
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f300 80d1 	bgt.w	80061a4 <_dtoa_r+0x634>
 8006002:	f040 826f 	bne.w	80064e4 <_dtoa_r+0x974>
 8006006:	4b65      	ldr	r3, [pc, #404]	; (800619c <_dtoa_r+0x62c>)
 8006008:	2200      	movs	r2, #0
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa fb1b 	bl	8000648 <__aeabi_dmul>
 8006012:	4652      	mov	r2, sl
 8006014:	465b      	mov	r3, fp
 8006016:	f7fa fd9d 	bl	8000b54 <__aeabi_dcmpge>
 800601a:	9e03      	ldr	r6, [sp, #12]
 800601c:	4637      	mov	r7, r6
 800601e:	2800      	cmp	r0, #0
 8006020:	f040 8245 	bne.w	80064ae <_dtoa_r+0x93e>
 8006024:	9d01      	ldr	r5, [sp, #4]
 8006026:	2331      	movs	r3, #49	; 0x31
 8006028:	f805 3b01 	strb.w	r3, [r5], #1
 800602c:	9b00      	ldr	r3, [sp, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	e240      	b.n	80064b6 <_dtoa_r+0x946>
 8006034:	07f2      	lsls	r2, r6, #31
 8006036:	d505      	bpl.n	8006044 <_dtoa_r+0x4d4>
 8006038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603c:	f7fa fb04 	bl	8000648 <__aeabi_dmul>
 8006040:	3501      	adds	r5, #1
 8006042:	2301      	movs	r3, #1
 8006044:	1076      	asrs	r6, r6, #1
 8006046:	3708      	adds	r7, #8
 8006048:	e777      	b.n	8005f3a <_dtoa_r+0x3ca>
 800604a:	2502      	movs	r5, #2
 800604c:	e779      	b.n	8005f42 <_dtoa_r+0x3d2>
 800604e:	9f00      	ldr	r7, [sp, #0]
 8006050:	9e03      	ldr	r6, [sp, #12]
 8006052:	e794      	b.n	8005f7e <_dtoa_r+0x40e>
 8006054:	9901      	ldr	r1, [sp, #4]
 8006056:	4b4c      	ldr	r3, [pc, #304]	; (8006188 <_dtoa_r+0x618>)
 8006058:	4431      	add	r1, r6
 800605a:	910d      	str	r1, [sp, #52]	; 0x34
 800605c:	9908      	ldr	r1, [sp, #32]
 800605e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006062:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006066:	2900      	cmp	r1, #0
 8006068:	d043      	beq.n	80060f2 <_dtoa_r+0x582>
 800606a:	494d      	ldr	r1, [pc, #308]	; (80061a0 <_dtoa_r+0x630>)
 800606c:	2000      	movs	r0, #0
 800606e:	f7fa fc15 	bl	800089c <__aeabi_ddiv>
 8006072:	4652      	mov	r2, sl
 8006074:	465b      	mov	r3, fp
 8006076:	f7fa f92f 	bl	80002d8 <__aeabi_dsub>
 800607a:	9d01      	ldr	r5, [sp, #4]
 800607c:	4682      	mov	sl, r0
 800607e:	468b      	mov	fp, r1
 8006080:	4649      	mov	r1, r9
 8006082:	4640      	mov	r0, r8
 8006084:	f7fa fd90 	bl	8000ba8 <__aeabi_d2iz>
 8006088:	4606      	mov	r6, r0
 800608a:	f7fa fa73 	bl	8000574 <__aeabi_i2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	f7fa f91f 	bl	80002d8 <__aeabi_dsub>
 800609a:	3630      	adds	r6, #48	; 0x30
 800609c:	f805 6b01 	strb.w	r6, [r5], #1
 80060a0:	4652      	mov	r2, sl
 80060a2:	465b      	mov	r3, fp
 80060a4:	4680      	mov	r8, r0
 80060a6:	4689      	mov	r9, r1
 80060a8:	f7fa fd40 	bl	8000b2c <__aeabi_dcmplt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d163      	bne.n	8006178 <_dtoa_r+0x608>
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	4936      	ldr	r1, [pc, #216]	; (8006190 <_dtoa_r+0x620>)
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7fa f90e 	bl	80002d8 <__aeabi_dsub>
 80060bc:	4652      	mov	r2, sl
 80060be:	465b      	mov	r3, fp
 80060c0:	f7fa fd34 	bl	8000b2c <__aeabi_dcmplt>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f040 80b5 	bne.w	8006234 <_dtoa_r+0x6c4>
 80060ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060cc:	429d      	cmp	r5, r3
 80060ce:	d081      	beq.n	8005fd4 <_dtoa_r+0x464>
 80060d0:	4b30      	ldr	r3, [pc, #192]	; (8006194 <_dtoa_r+0x624>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	4650      	mov	r0, sl
 80060d6:	4659      	mov	r1, fp
 80060d8:	f7fa fab6 	bl	8000648 <__aeabi_dmul>
 80060dc:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <_dtoa_r+0x624>)
 80060de:	4682      	mov	sl, r0
 80060e0:	468b      	mov	fp, r1
 80060e2:	4640      	mov	r0, r8
 80060e4:	4649      	mov	r1, r9
 80060e6:	2200      	movs	r2, #0
 80060e8:	f7fa faae 	bl	8000648 <__aeabi_dmul>
 80060ec:	4680      	mov	r8, r0
 80060ee:	4689      	mov	r9, r1
 80060f0:	e7c6      	b.n	8006080 <_dtoa_r+0x510>
 80060f2:	4650      	mov	r0, sl
 80060f4:	4659      	mov	r1, fp
 80060f6:	f7fa faa7 	bl	8000648 <__aeabi_dmul>
 80060fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060fc:	9d01      	ldr	r5, [sp, #4]
 80060fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006100:	4682      	mov	sl, r0
 8006102:	468b      	mov	fp, r1
 8006104:	4649      	mov	r1, r9
 8006106:	4640      	mov	r0, r8
 8006108:	f7fa fd4e 	bl	8000ba8 <__aeabi_d2iz>
 800610c:	4606      	mov	r6, r0
 800610e:	f7fa fa31 	bl	8000574 <__aeabi_i2d>
 8006112:	3630      	adds	r6, #48	; 0x30
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa f8dc 	bl	80002d8 <__aeabi_dsub>
 8006120:	f805 6b01 	strb.w	r6, [r5], #1
 8006124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006126:	429d      	cmp	r5, r3
 8006128:	4680      	mov	r8, r0
 800612a:	4689      	mov	r9, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	d124      	bne.n	800617c <_dtoa_r+0x60c>
 8006132:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <_dtoa_r+0x630>)
 8006134:	4650      	mov	r0, sl
 8006136:	4659      	mov	r1, fp
 8006138:	f7fa f8d0 	bl	80002dc <__adddf3>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa fd10 	bl	8000b68 <__aeabi_dcmpgt>
 8006148:	2800      	cmp	r0, #0
 800614a:	d173      	bne.n	8006234 <_dtoa_r+0x6c4>
 800614c:	4652      	mov	r2, sl
 800614e:	465b      	mov	r3, fp
 8006150:	4913      	ldr	r1, [pc, #76]	; (80061a0 <_dtoa_r+0x630>)
 8006152:	2000      	movs	r0, #0
 8006154:	f7fa f8c0 	bl	80002d8 <__aeabi_dsub>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4640      	mov	r0, r8
 800615e:	4649      	mov	r1, r9
 8006160:	f7fa fce4 	bl	8000b2c <__aeabi_dcmplt>
 8006164:	2800      	cmp	r0, #0
 8006166:	f43f af35 	beq.w	8005fd4 <_dtoa_r+0x464>
 800616a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800616c:	1e6b      	subs	r3, r5, #1
 800616e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006170:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d0f8      	beq.n	800616a <_dtoa_r+0x5fa>
 8006178:	9700      	str	r7, [sp, #0]
 800617a:	e049      	b.n	8006210 <_dtoa_r+0x6a0>
 800617c:	4b05      	ldr	r3, [pc, #20]	; (8006194 <_dtoa_r+0x624>)
 800617e:	f7fa fa63 	bl	8000648 <__aeabi_dmul>
 8006182:	4680      	mov	r8, r0
 8006184:	4689      	mov	r9, r1
 8006186:	e7bd      	b.n	8006104 <_dtoa_r+0x594>
 8006188:	08007d28 	.word	0x08007d28
 800618c:	08007d00 	.word	0x08007d00
 8006190:	3ff00000 	.word	0x3ff00000
 8006194:	40240000 	.word	0x40240000
 8006198:	401c0000 	.word	0x401c0000
 800619c:	40140000 	.word	0x40140000
 80061a0:	3fe00000 	.word	0x3fe00000
 80061a4:	9d01      	ldr	r5, [sp, #4]
 80061a6:	4656      	mov	r6, sl
 80061a8:	465f      	mov	r7, fp
 80061aa:	4642      	mov	r2, r8
 80061ac:	464b      	mov	r3, r9
 80061ae:	4630      	mov	r0, r6
 80061b0:	4639      	mov	r1, r7
 80061b2:	f7fa fb73 	bl	800089c <__aeabi_ddiv>
 80061b6:	f7fa fcf7 	bl	8000ba8 <__aeabi_d2iz>
 80061ba:	4682      	mov	sl, r0
 80061bc:	f7fa f9da 	bl	8000574 <__aeabi_i2d>
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	f7fa fa40 	bl	8000648 <__aeabi_dmul>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4630      	mov	r0, r6
 80061ce:	4639      	mov	r1, r7
 80061d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80061d4:	f7fa f880 	bl	80002d8 <__aeabi_dsub>
 80061d8:	f805 6b01 	strb.w	r6, [r5], #1
 80061dc:	9e01      	ldr	r6, [sp, #4]
 80061de:	9f03      	ldr	r7, [sp, #12]
 80061e0:	1bae      	subs	r6, r5, r6
 80061e2:	42b7      	cmp	r7, r6
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	d135      	bne.n	8006256 <_dtoa_r+0x6e6>
 80061ea:	f7fa f877 	bl	80002dc <__adddf3>
 80061ee:	4642      	mov	r2, r8
 80061f0:	464b      	mov	r3, r9
 80061f2:	4606      	mov	r6, r0
 80061f4:	460f      	mov	r7, r1
 80061f6:	f7fa fcb7 	bl	8000b68 <__aeabi_dcmpgt>
 80061fa:	b9d0      	cbnz	r0, 8006232 <_dtoa_r+0x6c2>
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f7fa fc88 	bl	8000b18 <__aeabi_dcmpeq>
 8006208:	b110      	cbz	r0, 8006210 <_dtoa_r+0x6a0>
 800620a:	f01a 0f01 	tst.w	sl, #1
 800620e:	d110      	bne.n	8006232 <_dtoa_r+0x6c2>
 8006210:	4620      	mov	r0, r4
 8006212:	ee18 1a10 	vmov	r1, s16
 8006216:	f000 faf3 	bl	8006800 <_Bfree>
 800621a:	2300      	movs	r3, #0
 800621c:	9800      	ldr	r0, [sp, #0]
 800621e:	702b      	strb	r3, [r5, #0]
 8006220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006222:	3001      	adds	r0, #1
 8006224:	6018      	str	r0, [r3, #0]
 8006226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006228:	2b00      	cmp	r3, #0
 800622a:	f43f acf1 	beq.w	8005c10 <_dtoa_r+0xa0>
 800622e:	601d      	str	r5, [r3, #0]
 8006230:	e4ee      	b.n	8005c10 <_dtoa_r+0xa0>
 8006232:	9f00      	ldr	r7, [sp, #0]
 8006234:	462b      	mov	r3, r5
 8006236:	461d      	mov	r5, r3
 8006238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800623c:	2a39      	cmp	r2, #57	; 0x39
 800623e:	d106      	bne.n	800624e <_dtoa_r+0x6de>
 8006240:	9a01      	ldr	r2, [sp, #4]
 8006242:	429a      	cmp	r2, r3
 8006244:	d1f7      	bne.n	8006236 <_dtoa_r+0x6c6>
 8006246:	9901      	ldr	r1, [sp, #4]
 8006248:	2230      	movs	r2, #48	; 0x30
 800624a:	3701      	adds	r7, #1
 800624c:	700a      	strb	r2, [r1, #0]
 800624e:	781a      	ldrb	r2, [r3, #0]
 8006250:	3201      	adds	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e790      	b.n	8006178 <_dtoa_r+0x608>
 8006256:	4ba6      	ldr	r3, [pc, #664]	; (80064f0 <_dtoa_r+0x980>)
 8006258:	2200      	movs	r2, #0
 800625a:	f7fa f9f5 	bl	8000648 <__aeabi_dmul>
 800625e:	2200      	movs	r2, #0
 8006260:	2300      	movs	r3, #0
 8006262:	4606      	mov	r6, r0
 8006264:	460f      	mov	r7, r1
 8006266:	f7fa fc57 	bl	8000b18 <__aeabi_dcmpeq>
 800626a:	2800      	cmp	r0, #0
 800626c:	d09d      	beq.n	80061aa <_dtoa_r+0x63a>
 800626e:	e7cf      	b.n	8006210 <_dtoa_r+0x6a0>
 8006270:	9a08      	ldr	r2, [sp, #32]
 8006272:	2a00      	cmp	r2, #0
 8006274:	f000 80d7 	beq.w	8006426 <_dtoa_r+0x8b6>
 8006278:	9a06      	ldr	r2, [sp, #24]
 800627a:	2a01      	cmp	r2, #1
 800627c:	f300 80ba 	bgt.w	80063f4 <_dtoa_r+0x884>
 8006280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006282:	2a00      	cmp	r2, #0
 8006284:	f000 80b2 	beq.w	80063ec <_dtoa_r+0x87c>
 8006288:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800628c:	9e07      	ldr	r6, [sp, #28]
 800628e:	9d04      	ldr	r5, [sp, #16]
 8006290:	9a04      	ldr	r2, [sp, #16]
 8006292:	441a      	add	r2, r3
 8006294:	9204      	str	r2, [sp, #16]
 8006296:	9a05      	ldr	r2, [sp, #20]
 8006298:	2101      	movs	r1, #1
 800629a:	441a      	add	r2, r3
 800629c:	4620      	mov	r0, r4
 800629e:	9205      	str	r2, [sp, #20]
 80062a0:	f000 fb66 	bl	8006970 <__i2b>
 80062a4:	4607      	mov	r7, r0
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	dd0c      	ble.n	80062c4 <_dtoa_r+0x754>
 80062aa:	9b05      	ldr	r3, [sp, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dd09      	ble.n	80062c4 <_dtoa_r+0x754>
 80062b0:	42ab      	cmp	r3, r5
 80062b2:	9a04      	ldr	r2, [sp, #16]
 80062b4:	bfa8      	it	ge
 80062b6:	462b      	movge	r3, r5
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	9204      	str	r2, [sp, #16]
 80062bc:	9a05      	ldr	r2, [sp, #20]
 80062be:	1aed      	subs	r5, r5, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	b31b      	cbz	r3, 8006310 <_dtoa_r+0x7a0>
 80062c8:	9b08      	ldr	r3, [sp, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80af 	beq.w	800642e <_dtoa_r+0x8be>
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	dd13      	ble.n	80062fc <_dtoa_r+0x78c>
 80062d4:	4639      	mov	r1, r7
 80062d6:	4632      	mov	r2, r6
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fc09 	bl	8006af0 <__pow5mult>
 80062de:	ee18 2a10 	vmov	r2, s16
 80062e2:	4601      	mov	r1, r0
 80062e4:	4607      	mov	r7, r0
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 fb58 	bl	800699c <__multiply>
 80062ec:	ee18 1a10 	vmov	r1, s16
 80062f0:	4680      	mov	r8, r0
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fa84 	bl	8006800 <_Bfree>
 80062f8:	ee08 8a10 	vmov	s16, r8
 80062fc:	9b07      	ldr	r3, [sp, #28]
 80062fe:	1b9a      	subs	r2, r3, r6
 8006300:	d006      	beq.n	8006310 <_dtoa_r+0x7a0>
 8006302:	ee18 1a10 	vmov	r1, s16
 8006306:	4620      	mov	r0, r4
 8006308:	f000 fbf2 	bl	8006af0 <__pow5mult>
 800630c:	ee08 0a10 	vmov	s16, r0
 8006310:	2101      	movs	r1, #1
 8006312:	4620      	mov	r0, r4
 8006314:	f000 fb2c 	bl	8006970 <__i2b>
 8006318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	4606      	mov	r6, r0
 800631e:	f340 8088 	ble.w	8006432 <_dtoa_r+0x8c2>
 8006322:	461a      	mov	r2, r3
 8006324:	4601      	mov	r1, r0
 8006326:	4620      	mov	r0, r4
 8006328:	f000 fbe2 	bl	8006af0 <__pow5mult>
 800632c:	9b06      	ldr	r3, [sp, #24]
 800632e:	2b01      	cmp	r3, #1
 8006330:	4606      	mov	r6, r0
 8006332:	f340 8081 	ble.w	8006438 <_dtoa_r+0x8c8>
 8006336:	f04f 0800 	mov.w	r8, #0
 800633a:	6933      	ldr	r3, [r6, #16]
 800633c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006340:	6918      	ldr	r0, [r3, #16]
 8006342:	f000 fac5 	bl	80068d0 <__hi0bits>
 8006346:	f1c0 0020 	rsb	r0, r0, #32
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	4418      	add	r0, r3
 800634e:	f010 001f 	ands.w	r0, r0, #31
 8006352:	f000 8092 	beq.w	800647a <_dtoa_r+0x90a>
 8006356:	f1c0 0320 	rsb	r3, r0, #32
 800635a:	2b04      	cmp	r3, #4
 800635c:	f340 808a 	ble.w	8006474 <_dtoa_r+0x904>
 8006360:	f1c0 001c 	rsb	r0, r0, #28
 8006364:	9b04      	ldr	r3, [sp, #16]
 8006366:	4403      	add	r3, r0
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	4403      	add	r3, r0
 800636e:	4405      	add	r5, r0
 8006370:	9305      	str	r3, [sp, #20]
 8006372:	9b04      	ldr	r3, [sp, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd07      	ble.n	8006388 <_dtoa_r+0x818>
 8006378:	ee18 1a10 	vmov	r1, s16
 800637c:	461a      	mov	r2, r3
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fc10 	bl	8006ba4 <__lshift>
 8006384:	ee08 0a10 	vmov	s16, r0
 8006388:	9b05      	ldr	r3, [sp, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	dd05      	ble.n	800639a <_dtoa_r+0x82a>
 800638e:	4631      	mov	r1, r6
 8006390:	461a      	mov	r2, r3
 8006392:	4620      	mov	r0, r4
 8006394:	f000 fc06 	bl	8006ba4 <__lshift>
 8006398:	4606      	mov	r6, r0
 800639a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d06e      	beq.n	800647e <_dtoa_r+0x90e>
 80063a0:	ee18 0a10 	vmov	r0, s16
 80063a4:	4631      	mov	r1, r6
 80063a6:	f000 fc6d 	bl	8006c84 <__mcmp>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	da67      	bge.n	800647e <_dtoa_r+0x90e>
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	ee18 1a10 	vmov	r1, s16
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	220a      	movs	r2, #10
 80063ba:	2300      	movs	r3, #0
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 fa41 	bl	8006844 <__multadd>
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	ee08 0a10 	vmov	s16, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 81b1 	beq.w	8006730 <_dtoa_r+0xbc0>
 80063ce:	2300      	movs	r3, #0
 80063d0:	4639      	mov	r1, r7
 80063d2:	220a      	movs	r2, #10
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fa35 	bl	8006844 <__multadd>
 80063da:	9b02      	ldr	r3, [sp, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	4607      	mov	r7, r0
 80063e0:	f300 808e 	bgt.w	8006500 <_dtoa_r+0x990>
 80063e4:	9b06      	ldr	r3, [sp, #24]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	dc51      	bgt.n	800648e <_dtoa_r+0x91e>
 80063ea:	e089      	b.n	8006500 <_dtoa_r+0x990>
 80063ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063f2:	e74b      	b.n	800628c <_dtoa_r+0x71c>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	1e5e      	subs	r6, r3, #1
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	42b3      	cmp	r3, r6
 80063fc:	bfbf      	itttt	lt
 80063fe:	9b07      	ldrlt	r3, [sp, #28]
 8006400:	9607      	strlt	r6, [sp, #28]
 8006402:	1af2      	sublt	r2, r6, r3
 8006404:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006406:	bfb6      	itet	lt
 8006408:	189b      	addlt	r3, r3, r2
 800640a:	1b9e      	subge	r6, r3, r6
 800640c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	bfb8      	it	lt
 8006412:	2600      	movlt	r6, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	bfb7      	itett	lt
 8006418:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800641c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006420:	1a9d      	sublt	r5, r3, r2
 8006422:	2300      	movlt	r3, #0
 8006424:	e734      	b.n	8006290 <_dtoa_r+0x720>
 8006426:	9e07      	ldr	r6, [sp, #28]
 8006428:	9d04      	ldr	r5, [sp, #16]
 800642a:	9f08      	ldr	r7, [sp, #32]
 800642c:	e73b      	b.n	80062a6 <_dtoa_r+0x736>
 800642e:	9a07      	ldr	r2, [sp, #28]
 8006430:	e767      	b.n	8006302 <_dtoa_r+0x792>
 8006432:	9b06      	ldr	r3, [sp, #24]
 8006434:	2b01      	cmp	r3, #1
 8006436:	dc18      	bgt.n	800646a <_dtoa_r+0x8fa>
 8006438:	f1ba 0f00 	cmp.w	sl, #0
 800643c:	d115      	bne.n	800646a <_dtoa_r+0x8fa>
 800643e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006442:	b993      	cbnz	r3, 800646a <_dtoa_r+0x8fa>
 8006444:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006448:	0d1b      	lsrs	r3, r3, #20
 800644a:	051b      	lsls	r3, r3, #20
 800644c:	b183      	cbz	r3, 8006470 <_dtoa_r+0x900>
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	3301      	adds	r3, #1
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	9b05      	ldr	r3, [sp, #20]
 8006456:	3301      	adds	r3, #1
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	f04f 0801 	mov.w	r8, #1
 800645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006460:	2b00      	cmp	r3, #0
 8006462:	f47f af6a 	bne.w	800633a <_dtoa_r+0x7ca>
 8006466:	2001      	movs	r0, #1
 8006468:	e76f      	b.n	800634a <_dtoa_r+0x7da>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	e7f6      	b.n	800645e <_dtoa_r+0x8ee>
 8006470:	4698      	mov	r8, r3
 8006472:	e7f4      	b.n	800645e <_dtoa_r+0x8ee>
 8006474:	f43f af7d 	beq.w	8006372 <_dtoa_r+0x802>
 8006478:	4618      	mov	r0, r3
 800647a:	301c      	adds	r0, #28
 800647c:	e772      	b.n	8006364 <_dtoa_r+0x7f4>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	dc37      	bgt.n	80064f4 <_dtoa_r+0x984>
 8006484:	9b06      	ldr	r3, [sp, #24]
 8006486:	2b02      	cmp	r3, #2
 8006488:	dd34      	ble.n	80064f4 <_dtoa_r+0x984>
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	9302      	str	r3, [sp, #8]
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	b96b      	cbnz	r3, 80064ae <_dtoa_r+0x93e>
 8006492:	4631      	mov	r1, r6
 8006494:	2205      	movs	r2, #5
 8006496:	4620      	mov	r0, r4
 8006498:	f000 f9d4 	bl	8006844 <__multadd>
 800649c:	4601      	mov	r1, r0
 800649e:	4606      	mov	r6, r0
 80064a0:	ee18 0a10 	vmov	r0, s16
 80064a4:	f000 fbee 	bl	8006c84 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f73f adbb 	bgt.w	8006024 <_dtoa_r+0x4b4>
 80064ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b0:	9d01      	ldr	r5, [sp, #4]
 80064b2:	43db      	mvns	r3, r3
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	f04f 0800 	mov.w	r8, #0
 80064ba:	4631      	mov	r1, r6
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f99f 	bl	8006800 <_Bfree>
 80064c2:	2f00      	cmp	r7, #0
 80064c4:	f43f aea4 	beq.w	8006210 <_dtoa_r+0x6a0>
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	d005      	beq.n	80064da <_dtoa_r+0x96a>
 80064ce:	45b8      	cmp	r8, r7
 80064d0:	d003      	beq.n	80064da <_dtoa_r+0x96a>
 80064d2:	4641      	mov	r1, r8
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 f993 	bl	8006800 <_Bfree>
 80064da:	4639      	mov	r1, r7
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 f98f 	bl	8006800 <_Bfree>
 80064e2:	e695      	b.n	8006210 <_dtoa_r+0x6a0>
 80064e4:	2600      	movs	r6, #0
 80064e6:	4637      	mov	r7, r6
 80064e8:	e7e1      	b.n	80064ae <_dtoa_r+0x93e>
 80064ea:	9700      	str	r7, [sp, #0]
 80064ec:	4637      	mov	r7, r6
 80064ee:	e599      	b.n	8006024 <_dtoa_r+0x4b4>
 80064f0:	40240000 	.word	0x40240000
 80064f4:	9b08      	ldr	r3, [sp, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80ca 	beq.w	8006690 <_dtoa_r+0xb20>
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	2d00      	cmp	r5, #0
 8006502:	dd05      	ble.n	8006510 <_dtoa_r+0x9a0>
 8006504:	4639      	mov	r1, r7
 8006506:	462a      	mov	r2, r5
 8006508:	4620      	mov	r0, r4
 800650a:	f000 fb4b 	bl	8006ba4 <__lshift>
 800650e:	4607      	mov	r7, r0
 8006510:	f1b8 0f00 	cmp.w	r8, #0
 8006514:	d05b      	beq.n	80065ce <_dtoa_r+0xa5e>
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4620      	mov	r0, r4
 800651a:	f000 f931 	bl	8006780 <_Balloc>
 800651e:	4605      	mov	r5, r0
 8006520:	b928      	cbnz	r0, 800652e <_dtoa_r+0x9be>
 8006522:	4b87      	ldr	r3, [pc, #540]	; (8006740 <_dtoa_r+0xbd0>)
 8006524:	4602      	mov	r2, r0
 8006526:	f240 21ea 	movw	r1, #746	; 0x2ea
 800652a:	f7ff bb3b 	b.w	8005ba4 <_dtoa_r+0x34>
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	3202      	adds	r2, #2
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	f107 010c 	add.w	r1, r7, #12
 8006538:	300c      	adds	r0, #12
 800653a:	f000 f913 	bl	8006764 <memcpy>
 800653e:	2201      	movs	r2, #1
 8006540:	4629      	mov	r1, r5
 8006542:	4620      	mov	r0, r4
 8006544:	f000 fb2e 	bl	8006ba4 <__lshift>
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	f103 0901 	add.w	r9, r3, #1
 800654e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006552:	4413      	add	r3, r2
 8006554:	9305      	str	r3, [sp, #20]
 8006556:	f00a 0301 	and.w	r3, sl, #1
 800655a:	46b8      	mov	r8, r7
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	4607      	mov	r7, r0
 8006560:	4631      	mov	r1, r6
 8006562:	ee18 0a10 	vmov	r0, s16
 8006566:	f7ff fa75 	bl	8005a54 <quorem>
 800656a:	4641      	mov	r1, r8
 800656c:	9002      	str	r0, [sp, #8]
 800656e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006572:	ee18 0a10 	vmov	r0, s16
 8006576:	f000 fb85 	bl	8006c84 <__mcmp>
 800657a:	463a      	mov	r2, r7
 800657c:	9003      	str	r0, [sp, #12]
 800657e:	4631      	mov	r1, r6
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fb9b 	bl	8006cbc <__mdiff>
 8006586:	68c2      	ldr	r2, [r0, #12]
 8006588:	f109 3bff 	add.w	fp, r9, #4294967295
 800658c:	4605      	mov	r5, r0
 800658e:	bb02      	cbnz	r2, 80065d2 <_dtoa_r+0xa62>
 8006590:	4601      	mov	r1, r0
 8006592:	ee18 0a10 	vmov	r0, s16
 8006596:	f000 fb75 	bl	8006c84 <__mcmp>
 800659a:	4602      	mov	r2, r0
 800659c:	4629      	mov	r1, r5
 800659e:	4620      	mov	r0, r4
 80065a0:	9207      	str	r2, [sp, #28]
 80065a2:	f000 f92d 	bl	8006800 <_Bfree>
 80065a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80065aa:	ea43 0102 	orr.w	r1, r3, r2
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	464d      	mov	r5, r9
 80065b4:	d10f      	bne.n	80065d6 <_dtoa_r+0xa66>
 80065b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065ba:	d02a      	beq.n	8006612 <_dtoa_r+0xaa2>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd02      	ble.n	80065c8 <_dtoa_r+0xa58>
 80065c2:	9b02      	ldr	r3, [sp, #8]
 80065c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80065c8:	f88b a000 	strb.w	sl, [fp]
 80065cc:	e775      	b.n	80064ba <_dtoa_r+0x94a>
 80065ce:	4638      	mov	r0, r7
 80065d0:	e7ba      	b.n	8006548 <_dtoa_r+0x9d8>
 80065d2:	2201      	movs	r2, #1
 80065d4:	e7e2      	b.n	800659c <_dtoa_r+0xa2c>
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	db04      	blt.n	80065e6 <_dtoa_r+0xa76>
 80065dc:	9906      	ldr	r1, [sp, #24]
 80065de:	430b      	orrs	r3, r1
 80065e0:	9904      	ldr	r1, [sp, #16]
 80065e2:	430b      	orrs	r3, r1
 80065e4:	d122      	bne.n	800662c <_dtoa_r+0xabc>
 80065e6:	2a00      	cmp	r2, #0
 80065e8:	ddee      	ble.n	80065c8 <_dtoa_r+0xa58>
 80065ea:	ee18 1a10 	vmov	r1, s16
 80065ee:	2201      	movs	r2, #1
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fad7 	bl	8006ba4 <__lshift>
 80065f6:	4631      	mov	r1, r6
 80065f8:	ee08 0a10 	vmov	s16, r0
 80065fc:	f000 fb42 	bl	8006c84 <__mcmp>
 8006600:	2800      	cmp	r0, #0
 8006602:	dc03      	bgt.n	800660c <_dtoa_r+0xa9c>
 8006604:	d1e0      	bne.n	80065c8 <_dtoa_r+0xa58>
 8006606:	f01a 0f01 	tst.w	sl, #1
 800660a:	d0dd      	beq.n	80065c8 <_dtoa_r+0xa58>
 800660c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006610:	d1d7      	bne.n	80065c2 <_dtoa_r+0xa52>
 8006612:	2339      	movs	r3, #57	; 0x39
 8006614:	f88b 3000 	strb.w	r3, [fp]
 8006618:	462b      	mov	r3, r5
 800661a:	461d      	mov	r5, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006622:	2a39      	cmp	r2, #57	; 0x39
 8006624:	d071      	beq.n	800670a <_dtoa_r+0xb9a>
 8006626:	3201      	adds	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e746      	b.n	80064ba <_dtoa_r+0x94a>
 800662c:	2a00      	cmp	r2, #0
 800662e:	dd07      	ble.n	8006640 <_dtoa_r+0xad0>
 8006630:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006634:	d0ed      	beq.n	8006612 <_dtoa_r+0xaa2>
 8006636:	f10a 0301 	add.w	r3, sl, #1
 800663a:	f88b 3000 	strb.w	r3, [fp]
 800663e:	e73c      	b.n	80064ba <_dtoa_r+0x94a>
 8006640:	9b05      	ldr	r3, [sp, #20]
 8006642:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006646:	4599      	cmp	r9, r3
 8006648:	d047      	beq.n	80066da <_dtoa_r+0xb6a>
 800664a:	ee18 1a10 	vmov	r1, s16
 800664e:	2300      	movs	r3, #0
 8006650:	220a      	movs	r2, #10
 8006652:	4620      	mov	r0, r4
 8006654:	f000 f8f6 	bl	8006844 <__multadd>
 8006658:	45b8      	cmp	r8, r7
 800665a:	ee08 0a10 	vmov	s16, r0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	f04f 020a 	mov.w	r2, #10
 8006666:	4641      	mov	r1, r8
 8006668:	4620      	mov	r0, r4
 800666a:	d106      	bne.n	800667a <_dtoa_r+0xb0a>
 800666c:	f000 f8ea 	bl	8006844 <__multadd>
 8006670:	4680      	mov	r8, r0
 8006672:	4607      	mov	r7, r0
 8006674:	f109 0901 	add.w	r9, r9, #1
 8006678:	e772      	b.n	8006560 <_dtoa_r+0x9f0>
 800667a:	f000 f8e3 	bl	8006844 <__multadd>
 800667e:	4639      	mov	r1, r7
 8006680:	4680      	mov	r8, r0
 8006682:	2300      	movs	r3, #0
 8006684:	220a      	movs	r2, #10
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f8dc 	bl	8006844 <__multadd>
 800668c:	4607      	mov	r7, r0
 800668e:	e7f1      	b.n	8006674 <_dtoa_r+0xb04>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	9302      	str	r3, [sp, #8]
 8006694:	9d01      	ldr	r5, [sp, #4]
 8006696:	ee18 0a10 	vmov	r0, s16
 800669a:	4631      	mov	r1, r6
 800669c:	f7ff f9da 	bl	8005a54 <quorem>
 80066a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	f805 ab01 	strb.w	sl, [r5], #1
 80066aa:	1aea      	subs	r2, r5, r3
 80066ac:	9b02      	ldr	r3, [sp, #8]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	dd09      	ble.n	80066c6 <_dtoa_r+0xb56>
 80066b2:	ee18 1a10 	vmov	r1, s16
 80066b6:	2300      	movs	r3, #0
 80066b8:	220a      	movs	r2, #10
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f8c2 	bl	8006844 <__multadd>
 80066c0:	ee08 0a10 	vmov	s16, r0
 80066c4:	e7e7      	b.n	8006696 <_dtoa_r+0xb26>
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfc8      	it	gt
 80066cc:	461d      	movgt	r5, r3
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	bfd8      	it	le
 80066d2:	2501      	movle	r5, #1
 80066d4:	441d      	add	r5, r3
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	ee18 1a10 	vmov	r1, s16
 80066de:	2201      	movs	r2, #1
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fa5f 	bl	8006ba4 <__lshift>
 80066e6:	4631      	mov	r1, r6
 80066e8:	ee08 0a10 	vmov	s16, r0
 80066ec:	f000 faca 	bl	8006c84 <__mcmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	dc91      	bgt.n	8006618 <_dtoa_r+0xaa8>
 80066f4:	d102      	bne.n	80066fc <_dtoa_r+0xb8c>
 80066f6:	f01a 0f01 	tst.w	sl, #1
 80066fa:	d18d      	bne.n	8006618 <_dtoa_r+0xaa8>
 80066fc:	462b      	mov	r3, r5
 80066fe:	461d      	mov	r5, r3
 8006700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006704:	2a30      	cmp	r2, #48	; 0x30
 8006706:	d0fa      	beq.n	80066fe <_dtoa_r+0xb8e>
 8006708:	e6d7      	b.n	80064ba <_dtoa_r+0x94a>
 800670a:	9a01      	ldr	r2, [sp, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d184      	bne.n	800661a <_dtoa_r+0xaaa>
 8006710:	9b00      	ldr	r3, [sp, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2331      	movs	r3, #49	; 0x31
 8006718:	7013      	strb	r3, [r2, #0]
 800671a:	e6ce      	b.n	80064ba <_dtoa_r+0x94a>
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <_dtoa_r+0xbd4>)
 800671e:	f7ff ba95 	b.w	8005c4c <_dtoa_r+0xdc>
 8006722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006724:	2b00      	cmp	r3, #0
 8006726:	f47f aa6e 	bne.w	8005c06 <_dtoa_r+0x96>
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <_dtoa_r+0xbd8>)
 800672c:	f7ff ba8e 	b.w	8005c4c <_dtoa_r+0xdc>
 8006730:	9b02      	ldr	r3, [sp, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	dcae      	bgt.n	8006694 <_dtoa_r+0xb24>
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	2b02      	cmp	r3, #2
 800673a:	f73f aea8 	bgt.w	800648e <_dtoa_r+0x91e>
 800673e:	e7a9      	b.n	8006694 <_dtoa_r+0xb24>
 8006740:	08007c8f 	.word	0x08007c8f
 8006744:	08007bec 	.word	0x08007bec
 8006748:	08007c10 	.word	0x08007c10

0800674c <_localeconv_r>:
 800674c:	4800      	ldr	r0, [pc, #0]	; (8006750 <_localeconv_r+0x4>)
 800674e:	4770      	bx	lr
 8006750:	20000160 	.word	0x20000160

08006754 <malloc>:
 8006754:	4b02      	ldr	r3, [pc, #8]	; (8006760 <malloc+0xc>)
 8006756:	4601      	mov	r1, r0
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f000 bc17 	b.w	8006f8c <_malloc_r>
 800675e:	bf00      	nop
 8006760:	2000000c 	.word	0x2000000c

08006764 <memcpy>:
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	f100 33ff 	add.w	r3, r0, #4294967295
 800676c:	d100      	bne.n	8006770 <memcpy+0xc>
 800676e:	4770      	bx	lr
 8006770:	b510      	push	{r4, lr}
 8006772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800677a:	4291      	cmp	r1, r2
 800677c:	d1f9      	bne.n	8006772 <memcpy+0xe>
 800677e:	bd10      	pop	{r4, pc}

08006780 <_Balloc>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006784:	4604      	mov	r4, r0
 8006786:	460d      	mov	r5, r1
 8006788:	b976      	cbnz	r6, 80067a8 <_Balloc+0x28>
 800678a:	2010      	movs	r0, #16
 800678c:	f7ff ffe2 	bl	8006754 <malloc>
 8006790:	4602      	mov	r2, r0
 8006792:	6260      	str	r0, [r4, #36]	; 0x24
 8006794:	b920      	cbnz	r0, 80067a0 <_Balloc+0x20>
 8006796:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <_Balloc+0x78>)
 8006798:	4818      	ldr	r0, [pc, #96]	; (80067fc <_Balloc+0x7c>)
 800679a:	2166      	movs	r1, #102	; 0x66
 800679c:	f000 fc7a 	bl	8007094 <__assert_func>
 80067a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067a4:	6006      	str	r6, [r0, #0]
 80067a6:	60c6      	str	r6, [r0, #12]
 80067a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80067aa:	68f3      	ldr	r3, [r6, #12]
 80067ac:	b183      	cbz	r3, 80067d0 <_Balloc+0x50>
 80067ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067b6:	b9b8      	cbnz	r0, 80067e8 <_Balloc+0x68>
 80067b8:	2101      	movs	r1, #1
 80067ba:	fa01 f605 	lsl.w	r6, r1, r5
 80067be:	1d72      	adds	r2, r6, #5
 80067c0:	0092      	lsls	r2, r2, #2
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fb60 	bl	8006e88 <_calloc_r>
 80067c8:	b160      	cbz	r0, 80067e4 <_Balloc+0x64>
 80067ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067ce:	e00e      	b.n	80067ee <_Balloc+0x6e>
 80067d0:	2221      	movs	r2, #33	; 0x21
 80067d2:	2104      	movs	r1, #4
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 fb57 	bl	8006e88 <_calloc_r>
 80067da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067dc:	60f0      	str	r0, [r6, #12]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e4      	bne.n	80067ae <_Balloc+0x2e>
 80067e4:	2000      	movs	r0, #0
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	6802      	ldr	r2, [r0, #0]
 80067ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067ee:	2300      	movs	r3, #0
 80067f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067f4:	e7f7      	b.n	80067e6 <_Balloc+0x66>
 80067f6:	bf00      	nop
 80067f8:	08007c1d 	.word	0x08007c1d
 80067fc:	08007ca0 	.word	0x08007ca0

08006800 <_Bfree>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006804:	4605      	mov	r5, r0
 8006806:	460c      	mov	r4, r1
 8006808:	b976      	cbnz	r6, 8006828 <_Bfree+0x28>
 800680a:	2010      	movs	r0, #16
 800680c:	f7ff ffa2 	bl	8006754 <malloc>
 8006810:	4602      	mov	r2, r0
 8006812:	6268      	str	r0, [r5, #36]	; 0x24
 8006814:	b920      	cbnz	r0, 8006820 <_Bfree+0x20>
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <_Bfree+0x3c>)
 8006818:	4809      	ldr	r0, [pc, #36]	; (8006840 <_Bfree+0x40>)
 800681a:	218a      	movs	r1, #138	; 0x8a
 800681c:	f000 fc3a 	bl	8007094 <__assert_func>
 8006820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006824:	6006      	str	r6, [r0, #0]
 8006826:	60c6      	str	r6, [r0, #12]
 8006828:	b13c      	cbz	r4, 800683a <_Bfree+0x3a>
 800682a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800682c:	6862      	ldr	r2, [r4, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006834:	6021      	str	r1, [r4, #0]
 8006836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	08007c1d 	.word	0x08007c1d
 8006840:	08007ca0 	.word	0x08007ca0

08006844 <__multadd>:
 8006844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006848:	690d      	ldr	r5, [r1, #16]
 800684a:	4607      	mov	r7, r0
 800684c:	460c      	mov	r4, r1
 800684e:	461e      	mov	r6, r3
 8006850:	f101 0c14 	add.w	ip, r1, #20
 8006854:	2000      	movs	r0, #0
 8006856:	f8dc 3000 	ldr.w	r3, [ip]
 800685a:	b299      	uxth	r1, r3
 800685c:	fb02 6101 	mla	r1, r2, r1, r6
 8006860:	0c1e      	lsrs	r6, r3, #16
 8006862:	0c0b      	lsrs	r3, r1, #16
 8006864:	fb02 3306 	mla	r3, r2, r6, r3
 8006868:	b289      	uxth	r1, r1
 800686a:	3001      	adds	r0, #1
 800686c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006870:	4285      	cmp	r5, r0
 8006872:	f84c 1b04 	str.w	r1, [ip], #4
 8006876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800687a:	dcec      	bgt.n	8006856 <__multadd+0x12>
 800687c:	b30e      	cbz	r6, 80068c2 <__multadd+0x7e>
 800687e:	68a3      	ldr	r3, [r4, #8]
 8006880:	42ab      	cmp	r3, r5
 8006882:	dc19      	bgt.n	80068b8 <__multadd+0x74>
 8006884:	6861      	ldr	r1, [r4, #4]
 8006886:	4638      	mov	r0, r7
 8006888:	3101      	adds	r1, #1
 800688a:	f7ff ff79 	bl	8006780 <_Balloc>
 800688e:	4680      	mov	r8, r0
 8006890:	b928      	cbnz	r0, 800689e <__multadd+0x5a>
 8006892:	4602      	mov	r2, r0
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <__multadd+0x84>)
 8006896:	480d      	ldr	r0, [pc, #52]	; (80068cc <__multadd+0x88>)
 8006898:	21b5      	movs	r1, #181	; 0xb5
 800689a:	f000 fbfb 	bl	8007094 <__assert_func>
 800689e:	6922      	ldr	r2, [r4, #16]
 80068a0:	3202      	adds	r2, #2
 80068a2:	f104 010c 	add.w	r1, r4, #12
 80068a6:	0092      	lsls	r2, r2, #2
 80068a8:	300c      	adds	r0, #12
 80068aa:	f7ff ff5b 	bl	8006764 <memcpy>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4638      	mov	r0, r7
 80068b2:	f7ff ffa5 	bl	8006800 <_Bfree>
 80068b6:	4644      	mov	r4, r8
 80068b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068bc:	3501      	adds	r5, #1
 80068be:	615e      	str	r6, [r3, #20]
 80068c0:	6125      	str	r5, [r4, #16]
 80068c2:	4620      	mov	r0, r4
 80068c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c8:	08007c8f 	.word	0x08007c8f
 80068cc:	08007ca0 	.word	0x08007ca0

080068d0 <__hi0bits>:
 80068d0:	0c03      	lsrs	r3, r0, #16
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	b9d3      	cbnz	r3, 800690c <__hi0bits+0x3c>
 80068d6:	0400      	lsls	r0, r0, #16
 80068d8:	2310      	movs	r3, #16
 80068da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068de:	bf04      	itt	eq
 80068e0:	0200      	lsleq	r0, r0, #8
 80068e2:	3308      	addeq	r3, #8
 80068e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068e8:	bf04      	itt	eq
 80068ea:	0100      	lsleq	r0, r0, #4
 80068ec:	3304      	addeq	r3, #4
 80068ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068f2:	bf04      	itt	eq
 80068f4:	0080      	lsleq	r0, r0, #2
 80068f6:	3302      	addeq	r3, #2
 80068f8:	2800      	cmp	r0, #0
 80068fa:	db05      	blt.n	8006908 <__hi0bits+0x38>
 80068fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006900:	f103 0301 	add.w	r3, r3, #1
 8006904:	bf08      	it	eq
 8006906:	2320      	moveq	r3, #32
 8006908:	4618      	mov	r0, r3
 800690a:	4770      	bx	lr
 800690c:	2300      	movs	r3, #0
 800690e:	e7e4      	b.n	80068da <__hi0bits+0xa>

08006910 <__lo0bits>:
 8006910:	6803      	ldr	r3, [r0, #0]
 8006912:	f013 0207 	ands.w	r2, r3, #7
 8006916:	4601      	mov	r1, r0
 8006918:	d00b      	beq.n	8006932 <__lo0bits+0x22>
 800691a:	07da      	lsls	r2, r3, #31
 800691c:	d423      	bmi.n	8006966 <__lo0bits+0x56>
 800691e:	0798      	lsls	r0, r3, #30
 8006920:	bf49      	itett	mi
 8006922:	085b      	lsrmi	r3, r3, #1
 8006924:	089b      	lsrpl	r3, r3, #2
 8006926:	2001      	movmi	r0, #1
 8006928:	600b      	strmi	r3, [r1, #0]
 800692a:	bf5c      	itt	pl
 800692c:	600b      	strpl	r3, [r1, #0]
 800692e:	2002      	movpl	r0, #2
 8006930:	4770      	bx	lr
 8006932:	b298      	uxth	r0, r3
 8006934:	b9a8      	cbnz	r0, 8006962 <__lo0bits+0x52>
 8006936:	0c1b      	lsrs	r3, r3, #16
 8006938:	2010      	movs	r0, #16
 800693a:	b2da      	uxtb	r2, r3
 800693c:	b90a      	cbnz	r2, 8006942 <__lo0bits+0x32>
 800693e:	3008      	adds	r0, #8
 8006940:	0a1b      	lsrs	r3, r3, #8
 8006942:	071a      	lsls	r2, r3, #28
 8006944:	bf04      	itt	eq
 8006946:	091b      	lsreq	r3, r3, #4
 8006948:	3004      	addeq	r0, #4
 800694a:	079a      	lsls	r2, r3, #30
 800694c:	bf04      	itt	eq
 800694e:	089b      	lsreq	r3, r3, #2
 8006950:	3002      	addeq	r0, #2
 8006952:	07da      	lsls	r2, r3, #31
 8006954:	d403      	bmi.n	800695e <__lo0bits+0x4e>
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	f100 0001 	add.w	r0, r0, #1
 800695c:	d005      	beq.n	800696a <__lo0bits+0x5a>
 800695e:	600b      	str	r3, [r1, #0]
 8006960:	4770      	bx	lr
 8006962:	4610      	mov	r0, r2
 8006964:	e7e9      	b.n	800693a <__lo0bits+0x2a>
 8006966:	2000      	movs	r0, #0
 8006968:	4770      	bx	lr
 800696a:	2020      	movs	r0, #32
 800696c:	4770      	bx	lr
	...

08006970 <__i2b>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	2101      	movs	r1, #1
 8006976:	f7ff ff03 	bl	8006780 <_Balloc>
 800697a:	4602      	mov	r2, r0
 800697c:	b928      	cbnz	r0, 800698a <__i2b+0x1a>
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <__i2b+0x24>)
 8006980:	4805      	ldr	r0, [pc, #20]	; (8006998 <__i2b+0x28>)
 8006982:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006986:	f000 fb85 	bl	8007094 <__assert_func>
 800698a:	2301      	movs	r3, #1
 800698c:	6144      	str	r4, [r0, #20]
 800698e:	6103      	str	r3, [r0, #16]
 8006990:	bd10      	pop	{r4, pc}
 8006992:	bf00      	nop
 8006994:	08007c8f 	.word	0x08007c8f
 8006998:	08007ca0 	.word	0x08007ca0

0800699c <__multiply>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	4691      	mov	r9, r2
 80069a2:	690a      	ldr	r2, [r1, #16]
 80069a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bfb8      	it	lt
 80069ac:	460b      	movlt	r3, r1
 80069ae:	460c      	mov	r4, r1
 80069b0:	bfbc      	itt	lt
 80069b2:	464c      	movlt	r4, r9
 80069b4:	4699      	movlt	r9, r3
 80069b6:	6927      	ldr	r7, [r4, #16]
 80069b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069bc:	68a3      	ldr	r3, [r4, #8]
 80069be:	6861      	ldr	r1, [r4, #4]
 80069c0:	eb07 060a 	add.w	r6, r7, sl
 80069c4:	42b3      	cmp	r3, r6
 80069c6:	b085      	sub	sp, #20
 80069c8:	bfb8      	it	lt
 80069ca:	3101      	addlt	r1, #1
 80069cc:	f7ff fed8 	bl	8006780 <_Balloc>
 80069d0:	b930      	cbnz	r0, 80069e0 <__multiply+0x44>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <__multiply+0x14c>)
 80069d6:	4845      	ldr	r0, [pc, #276]	; (8006aec <__multiply+0x150>)
 80069d8:	f240 115d 	movw	r1, #349	; 0x15d
 80069dc:	f000 fb5a 	bl	8007094 <__assert_func>
 80069e0:	f100 0514 	add.w	r5, r0, #20
 80069e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069e8:	462b      	mov	r3, r5
 80069ea:	2200      	movs	r2, #0
 80069ec:	4543      	cmp	r3, r8
 80069ee:	d321      	bcc.n	8006a34 <__multiply+0x98>
 80069f0:	f104 0314 	add.w	r3, r4, #20
 80069f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069f8:	f109 0314 	add.w	r3, r9, #20
 80069fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a00:	9202      	str	r2, [sp, #8]
 8006a02:	1b3a      	subs	r2, r7, r4
 8006a04:	3a15      	subs	r2, #21
 8006a06:	f022 0203 	bic.w	r2, r2, #3
 8006a0a:	3204      	adds	r2, #4
 8006a0c:	f104 0115 	add.w	r1, r4, #21
 8006a10:	428f      	cmp	r7, r1
 8006a12:	bf38      	it	cc
 8006a14:	2204      	movcc	r2, #4
 8006a16:	9201      	str	r2, [sp, #4]
 8006a18:	9a02      	ldr	r2, [sp, #8]
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d80c      	bhi.n	8006a3a <__multiply+0x9e>
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	dd03      	ble.n	8006a2c <__multiply+0x90>
 8006a24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d05a      	beq.n	8006ae2 <__multiply+0x146>
 8006a2c:	6106      	str	r6, [r0, #16]
 8006a2e:	b005      	add	sp, #20
 8006a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a34:	f843 2b04 	str.w	r2, [r3], #4
 8006a38:	e7d8      	b.n	80069ec <__multiply+0x50>
 8006a3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a3e:	f1ba 0f00 	cmp.w	sl, #0
 8006a42:	d024      	beq.n	8006a8e <__multiply+0xf2>
 8006a44:	f104 0e14 	add.w	lr, r4, #20
 8006a48:	46a9      	mov	r9, r5
 8006a4a:	f04f 0c00 	mov.w	ip, #0
 8006a4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a52:	f8d9 1000 	ldr.w	r1, [r9]
 8006a56:	fa1f fb82 	uxth.w	fp, r2
 8006a5a:	b289      	uxth	r1, r1
 8006a5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a64:	f8d9 2000 	ldr.w	r2, [r9]
 8006a68:	4461      	add	r1, ip
 8006a6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a76:	b289      	uxth	r1, r1
 8006a78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a7c:	4577      	cmp	r7, lr
 8006a7e:	f849 1b04 	str.w	r1, [r9], #4
 8006a82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a86:	d8e2      	bhi.n	8006a4e <__multiply+0xb2>
 8006a88:	9a01      	ldr	r2, [sp, #4]
 8006a8a:	f845 c002 	str.w	ip, [r5, r2]
 8006a8e:	9a03      	ldr	r2, [sp, #12]
 8006a90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a94:	3304      	adds	r3, #4
 8006a96:	f1b9 0f00 	cmp.w	r9, #0
 8006a9a:	d020      	beq.n	8006ade <__multiply+0x142>
 8006a9c:	6829      	ldr	r1, [r5, #0]
 8006a9e:	f104 0c14 	add.w	ip, r4, #20
 8006aa2:	46ae      	mov	lr, r5
 8006aa4:	f04f 0a00 	mov.w	sl, #0
 8006aa8:	f8bc b000 	ldrh.w	fp, [ip]
 8006aac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ab0:	fb09 220b 	mla	r2, r9, fp, r2
 8006ab4:	4492      	add	sl, r2
 8006ab6:	b289      	uxth	r1, r1
 8006ab8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006abc:	f84e 1b04 	str.w	r1, [lr], #4
 8006ac0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ac4:	f8be 1000 	ldrh.w	r1, [lr]
 8006ac8:	0c12      	lsrs	r2, r2, #16
 8006aca:	fb09 1102 	mla	r1, r9, r2, r1
 8006ace:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ad2:	4567      	cmp	r7, ip
 8006ad4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ad8:	d8e6      	bhi.n	8006aa8 <__multiply+0x10c>
 8006ada:	9a01      	ldr	r2, [sp, #4]
 8006adc:	50a9      	str	r1, [r5, r2]
 8006ade:	3504      	adds	r5, #4
 8006ae0:	e79a      	b.n	8006a18 <__multiply+0x7c>
 8006ae2:	3e01      	subs	r6, #1
 8006ae4:	e79c      	b.n	8006a20 <__multiply+0x84>
 8006ae6:	bf00      	nop
 8006ae8:	08007c8f 	.word	0x08007c8f
 8006aec:	08007ca0 	.word	0x08007ca0

08006af0 <__pow5mult>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	4615      	mov	r5, r2
 8006af6:	f012 0203 	ands.w	r2, r2, #3
 8006afa:	4606      	mov	r6, r0
 8006afc:	460f      	mov	r7, r1
 8006afe:	d007      	beq.n	8006b10 <__pow5mult+0x20>
 8006b00:	4c25      	ldr	r4, [pc, #148]	; (8006b98 <__pow5mult+0xa8>)
 8006b02:	3a01      	subs	r2, #1
 8006b04:	2300      	movs	r3, #0
 8006b06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b0a:	f7ff fe9b 	bl	8006844 <__multadd>
 8006b0e:	4607      	mov	r7, r0
 8006b10:	10ad      	asrs	r5, r5, #2
 8006b12:	d03d      	beq.n	8006b90 <__pow5mult+0xa0>
 8006b14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b16:	b97c      	cbnz	r4, 8006b38 <__pow5mult+0x48>
 8006b18:	2010      	movs	r0, #16
 8006b1a:	f7ff fe1b 	bl	8006754 <malloc>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6270      	str	r0, [r6, #36]	; 0x24
 8006b22:	b928      	cbnz	r0, 8006b30 <__pow5mult+0x40>
 8006b24:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <__pow5mult+0xac>)
 8006b26:	481e      	ldr	r0, [pc, #120]	; (8006ba0 <__pow5mult+0xb0>)
 8006b28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b2c:	f000 fab2 	bl	8007094 <__assert_func>
 8006b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b34:	6004      	str	r4, [r0, #0]
 8006b36:	60c4      	str	r4, [r0, #12]
 8006b38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b40:	b94c      	cbnz	r4, 8006b56 <__pow5mult+0x66>
 8006b42:	f240 2171 	movw	r1, #625	; 0x271
 8006b46:	4630      	mov	r0, r6
 8006b48:	f7ff ff12 	bl	8006970 <__i2b>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b52:	4604      	mov	r4, r0
 8006b54:	6003      	str	r3, [r0, #0]
 8006b56:	f04f 0900 	mov.w	r9, #0
 8006b5a:	07eb      	lsls	r3, r5, #31
 8006b5c:	d50a      	bpl.n	8006b74 <__pow5mult+0x84>
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4622      	mov	r2, r4
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ff1a 	bl	800699c <__multiply>
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7ff fe47 	bl	8006800 <_Bfree>
 8006b72:	4647      	mov	r7, r8
 8006b74:	106d      	asrs	r5, r5, #1
 8006b76:	d00b      	beq.n	8006b90 <__pow5mult+0xa0>
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	b938      	cbnz	r0, 8006b8c <__pow5mult+0x9c>
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff ff0b 	bl	800699c <__multiply>
 8006b86:	6020      	str	r0, [r4, #0]
 8006b88:	f8c0 9000 	str.w	r9, [r0]
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	e7e4      	b.n	8006b5a <__pow5mult+0x6a>
 8006b90:	4638      	mov	r0, r7
 8006b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b96:	bf00      	nop
 8006b98:	08007df0 	.word	0x08007df0
 8006b9c:	08007c1d 	.word	0x08007c1d
 8006ba0:	08007ca0 	.word	0x08007ca0

08006ba4 <__lshift>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	460c      	mov	r4, r1
 8006baa:	6849      	ldr	r1, [r1, #4]
 8006bac:	6923      	ldr	r3, [r4, #16]
 8006bae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	4691      	mov	r9, r2
 8006bb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bbc:	f108 0601 	add.w	r6, r8, #1
 8006bc0:	42b3      	cmp	r3, r6
 8006bc2:	db0b      	blt.n	8006bdc <__lshift+0x38>
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff fddb 	bl	8006780 <_Balloc>
 8006bca:	4605      	mov	r5, r0
 8006bcc:	b948      	cbnz	r0, 8006be2 <__lshift+0x3e>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <__lshift+0xd8>)
 8006bd2:	482b      	ldr	r0, [pc, #172]	; (8006c80 <__lshift+0xdc>)
 8006bd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006bd8:	f000 fa5c 	bl	8007094 <__assert_func>
 8006bdc:	3101      	adds	r1, #1
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	e7ee      	b.n	8006bc0 <__lshift+0x1c>
 8006be2:	2300      	movs	r3, #0
 8006be4:	f100 0114 	add.w	r1, r0, #20
 8006be8:	f100 0210 	add.w	r2, r0, #16
 8006bec:	4618      	mov	r0, r3
 8006bee:	4553      	cmp	r3, sl
 8006bf0:	db37      	blt.n	8006c62 <__lshift+0xbe>
 8006bf2:	6920      	ldr	r0, [r4, #16]
 8006bf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bf8:	f104 0314 	add.w	r3, r4, #20
 8006bfc:	f019 091f 	ands.w	r9, r9, #31
 8006c00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c08:	d02f      	beq.n	8006c6a <__lshift+0xc6>
 8006c0a:	f1c9 0e20 	rsb	lr, r9, #32
 8006c0e:	468a      	mov	sl, r1
 8006c10:	f04f 0c00 	mov.w	ip, #0
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	fa02 f209 	lsl.w	r2, r2, r9
 8006c1a:	ea42 020c 	orr.w	r2, r2, ip
 8006c1e:	f84a 2b04 	str.w	r2, [sl], #4
 8006c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c26:	4298      	cmp	r0, r3
 8006c28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006c2c:	d8f2      	bhi.n	8006c14 <__lshift+0x70>
 8006c2e:	1b03      	subs	r3, r0, r4
 8006c30:	3b15      	subs	r3, #21
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	3304      	adds	r3, #4
 8006c38:	f104 0215 	add.w	r2, r4, #21
 8006c3c:	4290      	cmp	r0, r2
 8006c3e:	bf38      	it	cc
 8006c40:	2304      	movcc	r3, #4
 8006c42:	f841 c003 	str.w	ip, [r1, r3]
 8006c46:	f1bc 0f00 	cmp.w	ip, #0
 8006c4a:	d001      	beq.n	8006c50 <__lshift+0xac>
 8006c4c:	f108 0602 	add.w	r6, r8, #2
 8006c50:	3e01      	subs	r6, #1
 8006c52:	4638      	mov	r0, r7
 8006c54:	612e      	str	r6, [r5, #16]
 8006c56:	4621      	mov	r1, r4
 8006c58:	f7ff fdd2 	bl	8006800 <_Bfree>
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c62:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c66:	3301      	adds	r3, #1
 8006c68:	e7c1      	b.n	8006bee <__lshift+0x4a>
 8006c6a:	3904      	subs	r1, #4
 8006c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c70:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c74:	4298      	cmp	r0, r3
 8006c76:	d8f9      	bhi.n	8006c6c <__lshift+0xc8>
 8006c78:	e7ea      	b.n	8006c50 <__lshift+0xac>
 8006c7a:	bf00      	nop
 8006c7c:	08007c8f 	.word	0x08007c8f
 8006c80:	08007ca0 	.word	0x08007ca0

08006c84 <__mcmp>:
 8006c84:	b530      	push	{r4, r5, lr}
 8006c86:	6902      	ldr	r2, [r0, #16]
 8006c88:	690c      	ldr	r4, [r1, #16]
 8006c8a:	1b12      	subs	r2, r2, r4
 8006c8c:	d10e      	bne.n	8006cac <__mcmp+0x28>
 8006c8e:	f100 0314 	add.w	r3, r0, #20
 8006c92:	3114      	adds	r1, #20
 8006c94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ca0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ca4:	42a5      	cmp	r5, r4
 8006ca6:	d003      	beq.n	8006cb0 <__mcmp+0x2c>
 8006ca8:	d305      	bcc.n	8006cb6 <__mcmp+0x32>
 8006caa:	2201      	movs	r2, #1
 8006cac:	4610      	mov	r0, r2
 8006cae:	bd30      	pop	{r4, r5, pc}
 8006cb0:	4283      	cmp	r3, r0
 8006cb2:	d3f3      	bcc.n	8006c9c <__mcmp+0x18>
 8006cb4:	e7fa      	b.n	8006cac <__mcmp+0x28>
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cba:	e7f7      	b.n	8006cac <__mcmp+0x28>

08006cbc <__mdiff>:
 8006cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4690      	mov	r8, r2
 8006cca:	f7ff ffdb 	bl	8006c84 <__mcmp>
 8006cce:	1e05      	subs	r5, r0, #0
 8006cd0:	d110      	bne.n	8006cf4 <__mdiff+0x38>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7ff fd53 	bl	8006780 <_Balloc>
 8006cda:	b930      	cbnz	r0, 8006cea <__mdiff+0x2e>
 8006cdc:	4b3a      	ldr	r3, [pc, #232]	; (8006dc8 <__mdiff+0x10c>)
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f240 2132 	movw	r1, #562	; 0x232
 8006ce4:	4839      	ldr	r0, [pc, #228]	; (8006dcc <__mdiff+0x110>)
 8006ce6:	f000 f9d5 	bl	8007094 <__assert_func>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	bfa4      	itt	ge
 8006cf6:	4643      	movge	r3, r8
 8006cf8:	46a0      	movge	r8, r4
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d00:	bfa6      	itte	ge
 8006d02:	461c      	movge	r4, r3
 8006d04:	2500      	movge	r5, #0
 8006d06:	2501      	movlt	r5, #1
 8006d08:	f7ff fd3a 	bl	8006780 <_Balloc>
 8006d0c:	b920      	cbnz	r0, 8006d18 <__mdiff+0x5c>
 8006d0e:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <__mdiff+0x10c>)
 8006d10:	4602      	mov	r2, r0
 8006d12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d16:	e7e5      	b.n	8006ce4 <__mdiff+0x28>
 8006d18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d1c:	6926      	ldr	r6, [r4, #16]
 8006d1e:	60c5      	str	r5, [r0, #12]
 8006d20:	f104 0914 	add.w	r9, r4, #20
 8006d24:	f108 0514 	add.w	r5, r8, #20
 8006d28:	f100 0e14 	add.w	lr, r0, #20
 8006d2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d34:	f108 0210 	add.w	r2, r8, #16
 8006d38:	46f2      	mov	sl, lr
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d44:	fa1f f883 	uxth.w	r8, r3
 8006d48:	fa11 f18b 	uxtah	r1, r1, fp
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	eba1 0808 	sub.w	r8, r1, r8
 8006d52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d5a:	fa1f f888 	uxth.w	r8, r8
 8006d5e:	1419      	asrs	r1, r3, #16
 8006d60:	454e      	cmp	r6, r9
 8006d62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d66:	f84a 3b04 	str.w	r3, [sl], #4
 8006d6a:	d8e7      	bhi.n	8006d3c <__mdiff+0x80>
 8006d6c:	1b33      	subs	r3, r6, r4
 8006d6e:	3b15      	subs	r3, #21
 8006d70:	f023 0303 	bic.w	r3, r3, #3
 8006d74:	3304      	adds	r3, #4
 8006d76:	3415      	adds	r4, #21
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	bf38      	it	cc
 8006d7c:	2304      	movcc	r3, #4
 8006d7e:	441d      	add	r5, r3
 8006d80:	4473      	add	r3, lr
 8006d82:	469e      	mov	lr, r3
 8006d84:	462e      	mov	r6, r5
 8006d86:	4566      	cmp	r6, ip
 8006d88:	d30e      	bcc.n	8006da8 <__mdiff+0xec>
 8006d8a:	f10c 0203 	add.w	r2, ip, #3
 8006d8e:	1b52      	subs	r2, r2, r5
 8006d90:	f022 0203 	bic.w	r2, r2, #3
 8006d94:	3d03      	subs	r5, #3
 8006d96:	45ac      	cmp	ip, r5
 8006d98:	bf38      	it	cc
 8006d9a:	2200      	movcc	r2, #0
 8006d9c:	441a      	add	r2, r3
 8006d9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006da2:	b17b      	cbz	r3, 8006dc4 <__mdiff+0x108>
 8006da4:	6107      	str	r7, [r0, #16]
 8006da6:	e7a3      	b.n	8006cf0 <__mdiff+0x34>
 8006da8:	f856 8b04 	ldr.w	r8, [r6], #4
 8006dac:	fa11 f288 	uxtah	r2, r1, r8
 8006db0:	1414      	asrs	r4, r2, #16
 8006db2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006db6:	b292      	uxth	r2, r2
 8006db8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006dbc:	f84e 2b04 	str.w	r2, [lr], #4
 8006dc0:	1421      	asrs	r1, r4, #16
 8006dc2:	e7e0      	b.n	8006d86 <__mdiff+0xca>
 8006dc4:	3f01      	subs	r7, #1
 8006dc6:	e7ea      	b.n	8006d9e <__mdiff+0xe2>
 8006dc8:	08007c8f 	.word	0x08007c8f
 8006dcc:	08007ca0 	.word	0x08007ca0

08006dd0 <__d2b>:
 8006dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006dd4:	4689      	mov	r9, r1
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	ec57 6b10 	vmov	r6, r7, d0
 8006ddc:	4690      	mov	r8, r2
 8006dde:	f7ff fccf 	bl	8006780 <_Balloc>
 8006de2:	4604      	mov	r4, r0
 8006de4:	b930      	cbnz	r0, 8006df4 <__d2b+0x24>
 8006de6:	4602      	mov	r2, r0
 8006de8:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <__d2b+0xb0>)
 8006dea:	4826      	ldr	r0, [pc, #152]	; (8006e84 <__d2b+0xb4>)
 8006dec:	f240 310a 	movw	r1, #778	; 0x30a
 8006df0:	f000 f950 	bl	8007094 <__assert_func>
 8006df4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006df8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006dfc:	bb35      	cbnz	r5, 8006e4c <__d2b+0x7c>
 8006dfe:	2e00      	cmp	r6, #0
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	d028      	beq.n	8006e56 <__d2b+0x86>
 8006e04:	4668      	mov	r0, sp
 8006e06:	9600      	str	r6, [sp, #0]
 8006e08:	f7ff fd82 	bl	8006910 <__lo0bits>
 8006e0c:	9900      	ldr	r1, [sp, #0]
 8006e0e:	b300      	cbz	r0, 8006e52 <__d2b+0x82>
 8006e10:	9a01      	ldr	r2, [sp, #4]
 8006e12:	f1c0 0320 	rsb	r3, r0, #32
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	40c2      	lsrs	r2, r0
 8006e1e:	6163      	str	r3, [r4, #20]
 8006e20:	9201      	str	r2, [sp, #4]
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	61a3      	str	r3, [r4, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bf14      	ite	ne
 8006e2a:	2202      	movne	r2, #2
 8006e2c:	2201      	moveq	r2, #1
 8006e2e:	6122      	str	r2, [r4, #16]
 8006e30:	b1d5      	cbz	r5, 8006e68 <__d2b+0x98>
 8006e32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e36:	4405      	add	r5, r0
 8006e38:	f8c9 5000 	str.w	r5, [r9]
 8006e3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e40:	f8c8 0000 	str.w	r0, [r8]
 8006e44:	4620      	mov	r0, r4
 8006e46:	b003      	add	sp, #12
 8006e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e50:	e7d5      	b.n	8006dfe <__d2b+0x2e>
 8006e52:	6161      	str	r1, [r4, #20]
 8006e54:	e7e5      	b.n	8006e22 <__d2b+0x52>
 8006e56:	a801      	add	r0, sp, #4
 8006e58:	f7ff fd5a 	bl	8006910 <__lo0bits>
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	6163      	str	r3, [r4, #20]
 8006e60:	2201      	movs	r2, #1
 8006e62:	6122      	str	r2, [r4, #16]
 8006e64:	3020      	adds	r0, #32
 8006e66:	e7e3      	b.n	8006e30 <__d2b+0x60>
 8006e68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e70:	f8c9 0000 	str.w	r0, [r9]
 8006e74:	6918      	ldr	r0, [r3, #16]
 8006e76:	f7ff fd2b 	bl	80068d0 <__hi0bits>
 8006e7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e7e:	e7df      	b.n	8006e40 <__d2b+0x70>
 8006e80:	08007c8f 	.word	0x08007c8f
 8006e84:	08007ca0 	.word	0x08007ca0

08006e88 <_calloc_r>:
 8006e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e8a:	fba1 2402 	umull	r2, r4, r1, r2
 8006e8e:	b94c      	cbnz	r4, 8006ea4 <_calloc_r+0x1c>
 8006e90:	4611      	mov	r1, r2
 8006e92:	9201      	str	r2, [sp, #4]
 8006e94:	f000 f87a 	bl	8006f8c <_malloc_r>
 8006e98:	9a01      	ldr	r2, [sp, #4]
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	b930      	cbnz	r0, 8006eac <_calloc_r+0x24>
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	b003      	add	sp, #12
 8006ea2:	bd30      	pop	{r4, r5, pc}
 8006ea4:	220c      	movs	r2, #12
 8006ea6:	6002      	str	r2, [r0, #0]
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	e7f8      	b.n	8006e9e <_calloc_r+0x16>
 8006eac:	4621      	mov	r1, r4
 8006eae:	f7fe f95f 	bl	8005170 <memset>
 8006eb2:	e7f4      	b.n	8006e9e <_calloc_r+0x16>

08006eb4 <_free_r>:
 8006eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eb6:	2900      	cmp	r1, #0
 8006eb8:	d044      	beq.n	8006f44 <_free_r+0x90>
 8006eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ebe:	9001      	str	r0, [sp, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ec6:	bfb8      	it	lt
 8006ec8:	18e4      	addlt	r4, r4, r3
 8006eca:	f000 f925 	bl	8007118 <__malloc_lock>
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <_free_r+0x94>)
 8006ed0:	9801      	ldr	r0, [sp, #4]
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	b933      	cbnz	r3, 8006ee4 <_free_r+0x30>
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	6014      	str	r4, [r2, #0]
 8006eda:	b003      	add	sp, #12
 8006edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ee0:	f000 b920 	b.w	8007124 <__malloc_unlock>
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d908      	bls.n	8006efa <_free_r+0x46>
 8006ee8:	6825      	ldr	r5, [r4, #0]
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf01      	itttt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	1949      	addeq	r1, r1, r5
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	e7ed      	b.n	8006ed6 <_free_r+0x22>
 8006efa:	461a      	mov	r2, r3
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b10b      	cbz	r3, 8006f04 <_free_r+0x50>
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d9fa      	bls.n	8006efa <_free_r+0x46>
 8006f04:	6811      	ldr	r1, [r2, #0]
 8006f06:	1855      	adds	r5, r2, r1
 8006f08:	42a5      	cmp	r5, r4
 8006f0a:	d10b      	bne.n	8006f24 <_free_r+0x70>
 8006f0c:	6824      	ldr	r4, [r4, #0]
 8006f0e:	4421      	add	r1, r4
 8006f10:	1854      	adds	r4, r2, r1
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	d1e0      	bne.n	8006eda <_free_r+0x26>
 8006f18:	681c      	ldr	r4, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	6053      	str	r3, [r2, #4]
 8006f1e:	4421      	add	r1, r4
 8006f20:	6011      	str	r1, [r2, #0]
 8006f22:	e7da      	b.n	8006eda <_free_r+0x26>
 8006f24:	d902      	bls.n	8006f2c <_free_r+0x78>
 8006f26:	230c      	movs	r3, #12
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	e7d6      	b.n	8006eda <_free_r+0x26>
 8006f2c:	6825      	ldr	r5, [r4, #0]
 8006f2e:	1961      	adds	r1, r4, r5
 8006f30:	428b      	cmp	r3, r1
 8006f32:	bf04      	itt	eq
 8006f34:	6819      	ldreq	r1, [r3, #0]
 8006f36:	685b      	ldreq	r3, [r3, #4]
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	bf04      	itt	eq
 8006f3c:	1949      	addeq	r1, r1, r5
 8006f3e:	6021      	streq	r1, [r4, #0]
 8006f40:	6054      	str	r4, [r2, #4]
 8006f42:	e7ca      	b.n	8006eda <_free_r+0x26>
 8006f44:	b003      	add	sp, #12
 8006f46:	bd30      	pop	{r4, r5, pc}
 8006f48:	200003f4 	.word	0x200003f4

08006f4c <sbrk_aligned>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4e0e      	ldr	r6, [pc, #56]	; (8006f88 <sbrk_aligned+0x3c>)
 8006f50:	460c      	mov	r4, r1
 8006f52:	6831      	ldr	r1, [r6, #0]
 8006f54:	4605      	mov	r5, r0
 8006f56:	b911      	cbnz	r1, 8006f5e <sbrk_aligned+0x12>
 8006f58:	f000 f88c 	bl	8007074 <_sbrk_r>
 8006f5c:	6030      	str	r0, [r6, #0]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 f887 	bl	8007074 <_sbrk_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d00a      	beq.n	8006f80 <sbrk_aligned+0x34>
 8006f6a:	1cc4      	adds	r4, r0, #3
 8006f6c:	f024 0403 	bic.w	r4, r4, #3
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d007      	beq.n	8006f84 <sbrk_aligned+0x38>
 8006f74:	1a21      	subs	r1, r4, r0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f87c 	bl	8007074 <_sbrk_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d101      	bne.n	8006f84 <sbrk_aligned+0x38>
 8006f80:	f04f 34ff 	mov.w	r4, #4294967295
 8006f84:	4620      	mov	r0, r4
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	200003f8 	.word	0x200003f8

08006f8c <_malloc_r>:
 8006f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f90:	1ccd      	adds	r5, r1, #3
 8006f92:	f025 0503 	bic.w	r5, r5, #3
 8006f96:	3508      	adds	r5, #8
 8006f98:	2d0c      	cmp	r5, #12
 8006f9a:	bf38      	it	cc
 8006f9c:	250c      	movcc	r5, #12
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	db01      	blt.n	8006fa8 <_malloc_r+0x1c>
 8006fa4:	42a9      	cmp	r1, r5
 8006fa6:	d905      	bls.n	8006fb4 <_malloc_r+0x28>
 8006fa8:	230c      	movs	r3, #12
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	2600      	movs	r6, #0
 8006fae:	4630      	mov	r0, r6
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	4e2e      	ldr	r6, [pc, #184]	; (8007070 <_malloc_r+0xe4>)
 8006fb6:	f000 f8af 	bl	8007118 <__malloc_lock>
 8006fba:	6833      	ldr	r3, [r6, #0]
 8006fbc:	461c      	mov	r4, r3
 8006fbe:	bb34      	cbnz	r4, 800700e <_malloc_r+0x82>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ffc2 	bl	8006f4c <sbrk_aligned>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	4604      	mov	r4, r0
 8006fcc:	d14d      	bne.n	800706a <_malloc_r+0xde>
 8006fce:	6834      	ldr	r4, [r6, #0]
 8006fd0:	4626      	mov	r6, r4
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	d140      	bne.n	8007058 <_malloc_r+0xcc>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4638      	mov	r0, r7
 8006fdc:	eb04 0803 	add.w	r8, r4, r3
 8006fe0:	f000 f848 	bl	8007074 <_sbrk_r>
 8006fe4:	4580      	cmp	r8, r0
 8006fe6:	d13a      	bne.n	800705e <_malloc_r+0xd2>
 8006fe8:	6821      	ldr	r1, [r4, #0]
 8006fea:	3503      	adds	r5, #3
 8006fec:	1a6d      	subs	r5, r5, r1
 8006fee:	f025 0503 	bic.w	r5, r5, #3
 8006ff2:	3508      	adds	r5, #8
 8006ff4:	2d0c      	cmp	r5, #12
 8006ff6:	bf38      	it	cc
 8006ff8:	250c      	movcc	r5, #12
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f7ff ffa5 	bl	8006f4c <sbrk_aligned>
 8007002:	3001      	adds	r0, #1
 8007004:	d02b      	beq.n	800705e <_malloc_r+0xd2>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	442b      	add	r3, r5
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	e00e      	b.n	800702c <_malloc_r+0xa0>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	1b52      	subs	r2, r2, r5
 8007012:	d41e      	bmi.n	8007052 <_malloc_r+0xc6>
 8007014:	2a0b      	cmp	r2, #11
 8007016:	d916      	bls.n	8007046 <_malloc_r+0xba>
 8007018:	1961      	adds	r1, r4, r5
 800701a:	42a3      	cmp	r3, r4
 800701c:	6025      	str	r5, [r4, #0]
 800701e:	bf18      	it	ne
 8007020:	6059      	strne	r1, [r3, #4]
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	bf08      	it	eq
 8007026:	6031      	streq	r1, [r6, #0]
 8007028:	5162      	str	r2, [r4, r5]
 800702a:	604b      	str	r3, [r1, #4]
 800702c:	4638      	mov	r0, r7
 800702e:	f104 060b 	add.w	r6, r4, #11
 8007032:	f000 f877 	bl	8007124 <__malloc_unlock>
 8007036:	f026 0607 	bic.w	r6, r6, #7
 800703a:	1d23      	adds	r3, r4, #4
 800703c:	1af2      	subs	r2, r6, r3
 800703e:	d0b6      	beq.n	8006fae <_malloc_r+0x22>
 8007040:	1b9b      	subs	r3, r3, r6
 8007042:	50a3      	str	r3, [r4, r2]
 8007044:	e7b3      	b.n	8006fae <_malloc_r+0x22>
 8007046:	6862      	ldr	r2, [r4, #4]
 8007048:	42a3      	cmp	r3, r4
 800704a:	bf0c      	ite	eq
 800704c:	6032      	streq	r2, [r6, #0]
 800704e:	605a      	strne	r2, [r3, #4]
 8007050:	e7ec      	b.n	800702c <_malloc_r+0xa0>
 8007052:	4623      	mov	r3, r4
 8007054:	6864      	ldr	r4, [r4, #4]
 8007056:	e7b2      	b.n	8006fbe <_malloc_r+0x32>
 8007058:	4634      	mov	r4, r6
 800705a:	6876      	ldr	r6, [r6, #4]
 800705c:	e7b9      	b.n	8006fd2 <_malloc_r+0x46>
 800705e:	230c      	movs	r3, #12
 8007060:	603b      	str	r3, [r7, #0]
 8007062:	4638      	mov	r0, r7
 8007064:	f000 f85e 	bl	8007124 <__malloc_unlock>
 8007068:	e7a1      	b.n	8006fae <_malloc_r+0x22>
 800706a:	6025      	str	r5, [r4, #0]
 800706c:	e7de      	b.n	800702c <_malloc_r+0xa0>
 800706e:	bf00      	nop
 8007070:	200003f4 	.word	0x200003f4

08007074 <_sbrk_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	; (8007090 <_sbrk_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fa fdb4 	bl	8001bec <_sbrk>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_sbrk_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_sbrk_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	200003fc 	.word	0x200003fc

08007094 <__assert_func>:
 8007094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007096:	4614      	mov	r4, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <__assert_func+0x2c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4605      	mov	r5, r0
 80070a0:	68d8      	ldr	r0, [r3, #12]
 80070a2:	b14c      	cbz	r4, 80070b8 <__assert_func+0x24>
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <__assert_func+0x30>)
 80070a6:	9100      	str	r1, [sp, #0]
 80070a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <__assert_func+0x34>)
 80070ae:	462b      	mov	r3, r5
 80070b0:	f000 f80e 	bl	80070d0 <fiprintf>
 80070b4:	f000 fa64 	bl	8007580 <abort>
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <__assert_func+0x38>)
 80070ba:	461c      	mov	r4, r3
 80070bc:	e7f3      	b.n	80070a6 <__assert_func+0x12>
 80070be:	bf00      	nop
 80070c0:	2000000c 	.word	0x2000000c
 80070c4:	08007dfc 	.word	0x08007dfc
 80070c8:	08007e09 	.word	0x08007e09
 80070cc:	08007e37 	.word	0x08007e37

080070d0 <fiprintf>:
 80070d0:	b40e      	push	{r1, r2, r3}
 80070d2:	b503      	push	{r0, r1, lr}
 80070d4:	4601      	mov	r1, r0
 80070d6:	ab03      	add	r3, sp, #12
 80070d8:	4805      	ldr	r0, [pc, #20]	; (80070f0 <fiprintf+0x20>)
 80070da:	f853 2b04 	ldr.w	r2, [r3], #4
 80070de:	6800      	ldr	r0, [r0, #0]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	f000 f84f 	bl	8007184 <_vfiprintf_r>
 80070e6:	b002      	add	sp, #8
 80070e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ec:	b003      	add	sp, #12
 80070ee:	4770      	bx	lr
 80070f0:	2000000c 	.word	0x2000000c

080070f4 <__ascii_mbtowc>:
 80070f4:	b082      	sub	sp, #8
 80070f6:	b901      	cbnz	r1, 80070fa <__ascii_mbtowc+0x6>
 80070f8:	a901      	add	r1, sp, #4
 80070fa:	b142      	cbz	r2, 800710e <__ascii_mbtowc+0x1a>
 80070fc:	b14b      	cbz	r3, 8007112 <__ascii_mbtowc+0x1e>
 80070fe:	7813      	ldrb	r3, [r2, #0]
 8007100:	600b      	str	r3, [r1, #0]
 8007102:	7812      	ldrb	r2, [r2, #0]
 8007104:	1e10      	subs	r0, r2, #0
 8007106:	bf18      	it	ne
 8007108:	2001      	movne	r0, #1
 800710a:	b002      	add	sp, #8
 800710c:	4770      	bx	lr
 800710e:	4610      	mov	r0, r2
 8007110:	e7fb      	b.n	800710a <__ascii_mbtowc+0x16>
 8007112:	f06f 0001 	mvn.w	r0, #1
 8007116:	e7f8      	b.n	800710a <__ascii_mbtowc+0x16>

08007118 <__malloc_lock>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__malloc_lock+0x8>)
 800711a:	f000 bbf1 	b.w	8007900 <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	20000400 	.word	0x20000400

08007124 <__malloc_unlock>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__malloc_unlock+0x8>)
 8007126:	f000 bbec 	b.w	8007902 <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	20000400 	.word	0x20000400

08007130 <__sfputc_r>:
 8007130:	6893      	ldr	r3, [r2, #8]
 8007132:	3b01      	subs	r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	b410      	push	{r4}
 8007138:	6093      	str	r3, [r2, #8]
 800713a:	da08      	bge.n	800714e <__sfputc_r+0x1e>
 800713c:	6994      	ldr	r4, [r2, #24]
 800713e:	42a3      	cmp	r3, r4
 8007140:	db01      	blt.n	8007146 <__sfputc_r+0x16>
 8007142:	290a      	cmp	r1, #10
 8007144:	d103      	bne.n	800714e <__sfputc_r+0x1e>
 8007146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714a:	f000 b94b 	b.w	80073e4 <__swbuf_r>
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	1c58      	adds	r0, r3, #1
 8007152:	6010      	str	r0, [r2, #0]
 8007154:	7019      	strb	r1, [r3, #0]
 8007156:	4608      	mov	r0, r1
 8007158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800715c:	4770      	bx	lr

0800715e <__sfputs_r>:
 800715e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007160:	4606      	mov	r6, r0
 8007162:	460f      	mov	r7, r1
 8007164:	4614      	mov	r4, r2
 8007166:	18d5      	adds	r5, r2, r3
 8007168:	42ac      	cmp	r4, r5
 800716a:	d101      	bne.n	8007170 <__sfputs_r+0x12>
 800716c:	2000      	movs	r0, #0
 800716e:	e007      	b.n	8007180 <__sfputs_r+0x22>
 8007170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007174:	463a      	mov	r2, r7
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ffda 	bl	8007130 <__sfputc_r>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d1f3      	bne.n	8007168 <__sfputs_r+0xa>
 8007180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007184 <_vfiprintf_r>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	460d      	mov	r5, r1
 800718a:	b09d      	sub	sp, #116	; 0x74
 800718c:	4614      	mov	r4, r2
 800718e:	4698      	mov	r8, r3
 8007190:	4606      	mov	r6, r0
 8007192:	b118      	cbz	r0, 800719c <_vfiprintf_r+0x18>
 8007194:	6983      	ldr	r3, [r0, #24]
 8007196:	b90b      	cbnz	r3, 800719c <_vfiprintf_r+0x18>
 8007198:	f000 fb14 	bl	80077c4 <__sinit>
 800719c:	4b89      	ldr	r3, [pc, #548]	; (80073c4 <_vfiprintf_r+0x240>)
 800719e:	429d      	cmp	r5, r3
 80071a0:	d11b      	bne.n	80071da <_vfiprintf_r+0x56>
 80071a2:	6875      	ldr	r5, [r6, #4]
 80071a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a6:	07d9      	lsls	r1, r3, #31
 80071a8:	d405      	bmi.n	80071b6 <_vfiprintf_r+0x32>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	059a      	lsls	r2, r3, #22
 80071ae:	d402      	bmi.n	80071b6 <_vfiprintf_r+0x32>
 80071b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b2:	f000 fba5 	bl	8007900 <__retarget_lock_acquire_recursive>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	071b      	lsls	r3, r3, #28
 80071ba:	d501      	bpl.n	80071c0 <_vfiprintf_r+0x3c>
 80071bc:	692b      	ldr	r3, [r5, #16]
 80071be:	b9eb      	cbnz	r3, 80071fc <_vfiprintf_r+0x78>
 80071c0:	4629      	mov	r1, r5
 80071c2:	4630      	mov	r0, r6
 80071c4:	f000 f96e 	bl	80074a4 <__swsetup_r>
 80071c8:	b1c0      	cbz	r0, 80071fc <_vfiprintf_r+0x78>
 80071ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071cc:	07dc      	lsls	r4, r3, #31
 80071ce:	d50e      	bpl.n	80071ee <_vfiprintf_r+0x6a>
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	b01d      	add	sp, #116	; 0x74
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	4b7b      	ldr	r3, [pc, #492]	; (80073c8 <_vfiprintf_r+0x244>)
 80071dc:	429d      	cmp	r5, r3
 80071de:	d101      	bne.n	80071e4 <_vfiprintf_r+0x60>
 80071e0:	68b5      	ldr	r5, [r6, #8]
 80071e2:	e7df      	b.n	80071a4 <_vfiprintf_r+0x20>
 80071e4:	4b79      	ldr	r3, [pc, #484]	; (80073cc <_vfiprintf_r+0x248>)
 80071e6:	429d      	cmp	r5, r3
 80071e8:	bf08      	it	eq
 80071ea:	68f5      	ldreq	r5, [r6, #12]
 80071ec:	e7da      	b.n	80071a4 <_vfiprintf_r+0x20>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	0598      	lsls	r0, r3, #22
 80071f2:	d4ed      	bmi.n	80071d0 <_vfiprintf_r+0x4c>
 80071f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071f6:	f000 fb84 	bl	8007902 <__retarget_lock_release_recursive>
 80071fa:	e7e9      	b.n	80071d0 <_vfiprintf_r+0x4c>
 80071fc:	2300      	movs	r3, #0
 80071fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007200:	2320      	movs	r3, #32
 8007202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007206:	f8cd 800c 	str.w	r8, [sp, #12]
 800720a:	2330      	movs	r3, #48	; 0x30
 800720c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073d0 <_vfiprintf_r+0x24c>
 8007210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007214:	f04f 0901 	mov.w	r9, #1
 8007218:	4623      	mov	r3, r4
 800721a:	469a      	mov	sl, r3
 800721c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007220:	b10a      	cbz	r2, 8007226 <_vfiprintf_r+0xa2>
 8007222:	2a25      	cmp	r2, #37	; 0x25
 8007224:	d1f9      	bne.n	800721a <_vfiprintf_r+0x96>
 8007226:	ebba 0b04 	subs.w	fp, sl, r4
 800722a:	d00b      	beq.n	8007244 <_vfiprintf_r+0xc0>
 800722c:	465b      	mov	r3, fp
 800722e:	4622      	mov	r2, r4
 8007230:	4629      	mov	r1, r5
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ff93 	bl	800715e <__sfputs_r>
 8007238:	3001      	adds	r0, #1
 800723a:	f000 80aa 	beq.w	8007392 <_vfiprintf_r+0x20e>
 800723e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007240:	445a      	add	r2, fp
 8007242:	9209      	str	r2, [sp, #36]	; 0x24
 8007244:	f89a 3000 	ldrb.w	r3, [sl]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80a2 	beq.w	8007392 <_vfiprintf_r+0x20e>
 800724e:	2300      	movs	r3, #0
 8007250:	f04f 32ff 	mov.w	r2, #4294967295
 8007254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007258:	f10a 0a01 	add.w	sl, sl, #1
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007264:	931a      	str	r3, [sp, #104]	; 0x68
 8007266:	4654      	mov	r4, sl
 8007268:	2205      	movs	r2, #5
 800726a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726e:	4858      	ldr	r0, [pc, #352]	; (80073d0 <_vfiprintf_r+0x24c>)
 8007270:	f7f8 ffde 	bl	8000230 <memchr>
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	b9d8      	cbnz	r0, 80072b0 <_vfiprintf_r+0x12c>
 8007278:	06d1      	lsls	r1, r2, #27
 800727a:	bf44      	itt	mi
 800727c:	2320      	movmi	r3, #32
 800727e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007282:	0713      	lsls	r3, r2, #28
 8007284:	bf44      	itt	mi
 8007286:	232b      	movmi	r3, #43	; 0x2b
 8007288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728c:	f89a 3000 	ldrb.w	r3, [sl]
 8007290:	2b2a      	cmp	r3, #42	; 0x2a
 8007292:	d015      	beq.n	80072c0 <_vfiprintf_r+0x13c>
 8007294:	9a07      	ldr	r2, [sp, #28]
 8007296:	4654      	mov	r4, sl
 8007298:	2000      	movs	r0, #0
 800729a:	f04f 0c0a 	mov.w	ip, #10
 800729e:	4621      	mov	r1, r4
 80072a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a4:	3b30      	subs	r3, #48	; 0x30
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d94e      	bls.n	8007348 <_vfiprintf_r+0x1c4>
 80072aa:	b1b0      	cbz	r0, 80072da <_vfiprintf_r+0x156>
 80072ac:	9207      	str	r2, [sp, #28]
 80072ae:	e014      	b.n	80072da <_vfiprintf_r+0x156>
 80072b0:	eba0 0308 	sub.w	r3, r0, r8
 80072b4:	fa09 f303 	lsl.w	r3, r9, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	46a2      	mov	sl, r4
 80072be:	e7d2      	b.n	8007266 <_vfiprintf_r+0xe2>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d19      	adds	r1, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9103      	str	r1, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbb      	ittet	lt
 80072cc:	425b      	neglt	r3, r3
 80072ce:	f042 0202 	orrlt.w	r2, r2, #2
 80072d2:	9307      	strge	r3, [sp, #28]
 80072d4:	9307      	strlt	r3, [sp, #28]
 80072d6:	bfb8      	it	lt
 80072d8:	9204      	strlt	r2, [sp, #16]
 80072da:	7823      	ldrb	r3, [r4, #0]
 80072dc:	2b2e      	cmp	r3, #46	; 0x2e
 80072de:	d10c      	bne.n	80072fa <_vfiprintf_r+0x176>
 80072e0:	7863      	ldrb	r3, [r4, #1]
 80072e2:	2b2a      	cmp	r3, #42	; 0x2a
 80072e4:	d135      	bne.n	8007352 <_vfiprintf_r+0x1ce>
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	1d1a      	adds	r2, r3, #4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	9203      	str	r2, [sp, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f6:	3402      	adds	r4, #2
 80072f8:	9305      	str	r3, [sp, #20]
 80072fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80073e0 <_vfiprintf_r+0x25c>
 80072fe:	7821      	ldrb	r1, [r4, #0]
 8007300:	2203      	movs	r2, #3
 8007302:	4650      	mov	r0, sl
 8007304:	f7f8 ff94 	bl	8000230 <memchr>
 8007308:	b140      	cbz	r0, 800731c <_vfiprintf_r+0x198>
 800730a:	2340      	movs	r3, #64	; 0x40
 800730c:	eba0 000a 	sub.w	r0, r0, sl
 8007310:	fa03 f000 	lsl.w	r0, r3, r0
 8007314:	9b04      	ldr	r3, [sp, #16]
 8007316:	4303      	orrs	r3, r0
 8007318:	3401      	adds	r4, #1
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007320:	482c      	ldr	r0, [pc, #176]	; (80073d4 <_vfiprintf_r+0x250>)
 8007322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007326:	2206      	movs	r2, #6
 8007328:	f7f8 ff82 	bl	8000230 <memchr>
 800732c:	2800      	cmp	r0, #0
 800732e:	d03f      	beq.n	80073b0 <_vfiprintf_r+0x22c>
 8007330:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <_vfiprintf_r+0x254>)
 8007332:	bb1b      	cbnz	r3, 800737c <_vfiprintf_r+0x1f8>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	3307      	adds	r3, #7
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	3308      	adds	r3, #8
 800733e:	9303      	str	r3, [sp, #12]
 8007340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007342:	443b      	add	r3, r7
 8007344:	9309      	str	r3, [sp, #36]	; 0x24
 8007346:	e767      	b.n	8007218 <_vfiprintf_r+0x94>
 8007348:	fb0c 3202 	mla	r2, ip, r2, r3
 800734c:	460c      	mov	r4, r1
 800734e:	2001      	movs	r0, #1
 8007350:	e7a5      	b.n	800729e <_vfiprintf_r+0x11a>
 8007352:	2300      	movs	r3, #0
 8007354:	3401      	adds	r4, #1
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	4619      	mov	r1, r3
 800735a:	f04f 0c0a 	mov.w	ip, #10
 800735e:	4620      	mov	r0, r4
 8007360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007364:	3a30      	subs	r2, #48	; 0x30
 8007366:	2a09      	cmp	r2, #9
 8007368:	d903      	bls.n	8007372 <_vfiprintf_r+0x1ee>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0c5      	beq.n	80072fa <_vfiprintf_r+0x176>
 800736e:	9105      	str	r1, [sp, #20]
 8007370:	e7c3      	b.n	80072fa <_vfiprintf_r+0x176>
 8007372:	fb0c 2101 	mla	r1, ip, r1, r2
 8007376:	4604      	mov	r4, r0
 8007378:	2301      	movs	r3, #1
 800737a:	e7f0      	b.n	800735e <_vfiprintf_r+0x1da>
 800737c:	ab03      	add	r3, sp, #12
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	462a      	mov	r2, r5
 8007382:	4b16      	ldr	r3, [pc, #88]	; (80073dc <_vfiprintf_r+0x258>)
 8007384:	a904      	add	r1, sp, #16
 8007386:	4630      	mov	r0, r6
 8007388:	f7fd ff9a 	bl	80052c0 <_printf_float>
 800738c:	4607      	mov	r7, r0
 800738e:	1c78      	adds	r0, r7, #1
 8007390:	d1d6      	bne.n	8007340 <_vfiprintf_r+0x1bc>
 8007392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007394:	07d9      	lsls	r1, r3, #31
 8007396:	d405      	bmi.n	80073a4 <_vfiprintf_r+0x220>
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	059a      	lsls	r2, r3, #22
 800739c:	d402      	bmi.n	80073a4 <_vfiprintf_r+0x220>
 800739e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073a0:	f000 faaf 	bl	8007902 <__retarget_lock_release_recursive>
 80073a4:	89ab      	ldrh	r3, [r5, #12]
 80073a6:	065b      	lsls	r3, r3, #25
 80073a8:	f53f af12 	bmi.w	80071d0 <_vfiprintf_r+0x4c>
 80073ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ae:	e711      	b.n	80071d4 <_vfiprintf_r+0x50>
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <_vfiprintf_r+0x258>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7fe fa24 	bl	8005808 <_printf_i>
 80073c0:	e7e4      	b.n	800738c <_vfiprintf_r+0x208>
 80073c2:	bf00      	nop
 80073c4:	08007f74 	.word	0x08007f74
 80073c8:	08007f94 	.word	0x08007f94
 80073cc:	08007f54 	.word	0x08007f54
 80073d0:	08007e42 	.word	0x08007e42
 80073d4:	08007e4c 	.word	0x08007e4c
 80073d8:	080052c1 	.word	0x080052c1
 80073dc:	0800715f 	.word	0x0800715f
 80073e0:	08007e48 	.word	0x08007e48

080073e4 <__swbuf_r>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	460e      	mov	r6, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	4605      	mov	r5, r0
 80073ec:	b118      	cbz	r0, 80073f6 <__swbuf_r+0x12>
 80073ee:	6983      	ldr	r3, [r0, #24]
 80073f0:	b90b      	cbnz	r3, 80073f6 <__swbuf_r+0x12>
 80073f2:	f000 f9e7 	bl	80077c4 <__sinit>
 80073f6:	4b21      	ldr	r3, [pc, #132]	; (800747c <__swbuf_r+0x98>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d12b      	bne.n	8007454 <__swbuf_r+0x70>
 80073fc:	686c      	ldr	r4, [r5, #4]
 80073fe:	69a3      	ldr	r3, [r4, #24]
 8007400:	60a3      	str	r3, [r4, #8]
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	071a      	lsls	r2, r3, #28
 8007406:	d52f      	bpl.n	8007468 <__swbuf_r+0x84>
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	b36b      	cbz	r3, 8007468 <__swbuf_r+0x84>
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	6820      	ldr	r0, [r4, #0]
 8007410:	1ac0      	subs	r0, r0, r3
 8007412:	6963      	ldr	r3, [r4, #20]
 8007414:	b2f6      	uxtb	r6, r6
 8007416:	4283      	cmp	r3, r0
 8007418:	4637      	mov	r7, r6
 800741a:	dc04      	bgt.n	8007426 <__swbuf_r+0x42>
 800741c:	4621      	mov	r1, r4
 800741e:	4628      	mov	r0, r5
 8007420:	f000 f93c 	bl	800769c <_fflush_r>
 8007424:	bb30      	cbnz	r0, 8007474 <__swbuf_r+0x90>
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	3b01      	subs	r3, #1
 800742a:	60a3      	str	r3, [r4, #8]
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	701e      	strb	r6, [r3, #0]
 8007434:	6963      	ldr	r3, [r4, #20]
 8007436:	3001      	adds	r0, #1
 8007438:	4283      	cmp	r3, r0
 800743a:	d004      	beq.n	8007446 <__swbuf_r+0x62>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	07db      	lsls	r3, r3, #31
 8007440:	d506      	bpl.n	8007450 <__swbuf_r+0x6c>
 8007442:	2e0a      	cmp	r6, #10
 8007444:	d104      	bne.n	8007450 <__swbuf_r+0x6c>
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f000 f927 	bl	800769c <_fflush_r>
 800744e:	b988      	cbnz	r0, 8007474 <__swbuf_r+0x90>
 8007450:	4638      	mov	r0, r7
 8007452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007454:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <__swbuf_r+0x9c>)
 8007456:	429c      	cmp	r4, r3
 8007458:	d101      	bne.n	800745e <__swbuf_r+0x7a>
 800745a:	68ac      	ldr	r4, [r5, #8]
 800745c:	e7cf      	b.n	80073fe <__swbuf_r+0x1a>
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <__swbuf_r+0xa0>)
 8007460:	429c      	cmp	r4, r3
 8007462:	bf08      	it	eq
 8007464:	68ec      	ldreq	r4, [r5, #12]
 8007466:	e7ca      	b.n	80073fe <__swbuf_r+0x1a>
 8007468:	4621      	mov	r1, r4
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f81a 	bl	80074a4 <__swsetup_r>
 8007470:	2800      	cmp	r0, #0
 8007472:	d0cb      	beq.n	800740c <__swbuf_r+0x28>
 8007474:	f04f 37ff 	mov.w	r7, #4294967295
 8007478:	e7ea      	b.n	8007450 <__swbuf_r+0x6c>
 800747a:	bf00      	nop
 800747c:	08007f74 	.word	0x08007f74
 8007480:	08007f94 	.word	0x08007f94
 8007484:	08007f54 	.word	0x08007f54

08007488 <__ascii_wctomb>:
 8007488:	b149      	cbz	r1, 800749e <__ascii_wctomb+0x16>
 800748a:	2aff      	cmp	r2, #255	; 0xff
 800748c:	bf85      	ittet	hi
 800748e:	238a      	movhi	r3, #138	; 0x8a
 8007490:	6003      	strhi	r3, [r0, #0]
 8007492:	700a      	strbls	r2, [r1, #0]
 8007494:	f04f 30ff 	movhi.w	r0, #4294967295
 8007498:	bf98      	it	ls
 800749a:	2001      	movls	r0, #1
 800749c:	4770      	bx	lr
 800749e:	4608      	mov	r0, r1
 80074a0:	4770      	bx	lr
	...

080074a4 <__swsetup_r>:
 80074a4:	4b32      	ldr	r3, [pc, #200]	; (8007570 <__swsetup_r+0xcc>)
 80074a6:	b570      	push	{r4, r5, r6, lr}
 80074a8:	681d      	ldr	r5, [r3, #0]
 80074aa:	4606      	mov	r6, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	b125      	cbz	r5, 80074ba <__swsetup_r+0x16>
 80074b0:	69ab      	ldr	r3, [r5, #24]
 80074b2:	b913      	cbnz	r3, 80074ba <__swsetup_r+0x16>
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 f985 	bl	80077c4 <__sinit>
 80074ba:	4b2e      	ldr	r3, [pc, #184]	; (8007574 <__swsetup_r+0xd0>)
 80074bc:	429c      	cmp	r4, r3
 80074be:	d10f      	bne.n	80074e0 <__swsetup_r+0x3c>
 80074c0:	686c      	ldr	r4, [r5, #4]
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074c8:	0719      	lsls	r1, r3, #28
 80074ca:	d42c      	bmi.n	8007526 <__swsetup_r+0x82>
 80074cc:	06dd      	lsls	r5, r3, #27
 80074ce:	d411      	bmi.n	80074f4 <__swsetup_r+0x50>
 80074d0:	2309      	movs	r3, #9
 80074d2:	6033      	str	r3, [r6, #0]
 80074d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074d8:	81a3      	strh	r3, [r4, #12]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	e03e      	b.n	800755e <__swsetup_r+0xba>
 80074e0:	4b25      	ldr	r3, [pc, #148]	; (8007578 <__swsetup_r+0xd4>)
 80074e2:	429c      	cmp	r4, r3
 80074e4:	d101      	bne.n	80074ea <__swsetup_r+0x46>
 80074e6:	68ac      	ldr	r4, [r5, #8]
 80074e8:	e7eb      	b.n	80074c2 <__swsetup_r+0x1e>
 80074ea:	4b24      	ldr	r3, [pc, #144]	; (800757c <__swsetup_r+0xd8>)
 80074ec:	429c      	cmp	r4, r3
 80074ee:	bf08      	it	eq
 80074f0:	68ec      	ldreq	r4, [r5, #12]
 80074f2:	e7e6      	b.n	80074c2 <__swsetup_r+0x1e>
 80074f4:	0758      	lsls	r0, r3, #29
 80074f6:	d512      	bpl.n	800751e <__swsetup_r+0x7a>
 80074f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fa:	b141      	cbz	r1, 800750e <__swsetup_r+0x6a>
 80074fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007500:	4299      	cmp	r1, r3
 8007502:	d002      	beq.n	800750a <__swsetup_r+0x66>
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff fcd5 	bl	8006eb4 <_free_r>
 800750a:	2300      	movs	r3, #0
 800750c:	6363      	str	r3, [r4, #52]	; 0x34
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	2300      	movs	r3, #0
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	6923      	ldr	r3, [r4, #16]
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f043 0308 	orr.w	r3, r3, #8
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	b94b      	cbnz	r3, 800753e <__swsetup_r+0x9a>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007534:	d003      	beq.n	800753e <__swsetup_r+0x9a>
 8007536:	4621      	mov	r1, r4
 8007538:	4630      	mov	r0, r6
 800753a:	f000 fa09 	bl	8007950 <__smakebuf_r>
 800753e:	89a0      	ldrh	r0, [r4, #12]
 8007540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007544:	f010 0301 	ands.w	r3, r0, #1
 8007548:	d00a      	beq.n	8007560 <__swsetup_r+0xbc>
 800754a:	2300      	movs	r3, #0
 800754c:	60a3      	str	r3, [r4, #8]
 800754e:	6963      	ldr	r3, [r4, #20]
 8007550:	425b      	negs	r3, r3
 8007552:	61a3      	str	r3, [r4, #24]
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	b943      	cbnz	r3, 800756a <__swsetup_r+0xc6>
 8007558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800755c:	d1ba      	bne.n	80074d4 <__swsetup_r+0x30>
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	0781      	lsls	r1, r0, #30
 8007562:	bf58      	it	pl
 8007564:	6963      	ldrpl	r3, [r4, #20]
 8007566:	60a3      	str	r3, [r4, #8]
 8007568:	e7f4      	b.n	8007554 <__swsetup_r+0xb0>
 800756a:	2000      	movs	r0, #0
 800756c:	e7f7      	b.n	800755e <__swsetup_r+0xba>
 800756e:	bf00      	nop
 8007570:	2000000c 	.word	0x2000000c
 8007574:	08007f74 	.word	0x08007f74
 8007578:	08007f94 	.word	0x08007f94
 800757c:	08007f54 	.word	0x08007f54

08007580 <abort>:
 8007580:	b508      	push	{r3, lr}
 8007582:	2006      	movs	r0, #6
 8007584:	f000 fa4c 	bl	8007a20 <raise>
 8007588:	2001      	movs	r0, #1
 800758a:	f7fa fab7 	bl	8001afc <_exit>
	...

08007590 <__sflush_r>:
 8007590:	898a      	ldrh	r2, [r1, #12]
 8007592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007596:	4605      	mov	r5, r0
 8007598:	0710      	lsls	r0, r2, #28
 800759a:	460c      	mov	r4, r1
 800759c:	d458      	bmi.n	8007650 <__sflush_r+0xc0>
 800759e:	684b      	ldr	r3, [r1, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dc05      	bgt.n	80075b0 <__sflush_r+0x20>
 80075a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dc02      	bgt.n	80075b0 <__sflush_r+0x20>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	d0f9      	beq.n	80075aa <__sflush_r+0x1a>
 80075b6:	2300      	movs	r3, #0
 80075b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075bc:	682f      	ldr	r7, [r5, #0]
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	d032      	beq.n	8007628 <__sflush_r+0x98>
 80075c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	075a      	lsls	r2, r3, #29
 80075c8:	d505      	bpl.n	80075d6 <__sflush_r+0x46>
 80075ca:	6863      	ldr	r3, [r4, #4]
 80075cc:	1ac0      	subs	r0, r0, r3
 80075ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075d0:	b10b      	cbz	r3, 80075d6 <__sflush_r+0x46>
 80075d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075d4:	1ac0      	subs	r0, r0, r3
 80075d6:	2300      	movs	r3, #0
 80075d8:	4602      	mov	r2, r0
 80075da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075dc:	6a21      	ldr	r1, [r4, #32]
 80075de:	4628      	mov	r0, r5
 80075e0:	47b0      	blx	r6
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	d106      	bne.n	80075f6 <__sflush_r+0x66>
 80075e8:	6829      	ldr	r1, [r5, #0]
 80075ea:	291d      	cmp	r1, #29
 80075ec:	d82c      	bhi.n	8007648 <__sflush_r+0xb8>
 80075ee:	4a2a      	ldr	r2, [pc, #168]	; (8007698 <__sflush_r+0x108>)
 80075f0:	40ca      	lsrs	r2, r1
 80075f2:	07d6      	lsls	r6, r2, #31
 80075f4:	d528      	bpl.n	8007648 <__sflush_r+0xb8>
 80075f6:	2200      	movs	r2, #0
 80075f8:	6062      	str	r2, [r4, #4]
 80075fa:	04d9      	lsls	r1, r3, #19
 80075fc:	6922      	ldr	r2, [r4, #16]
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	d504      	bpl.n	800760c <__sflush_r+0x7c>
 8007602:	1c42      	adds	r2, r0, #1
 8007604:	d101      	bne.n	800760a <__sflush_r+0x7a>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	b903      	cbnz	r3, 800760c <__sflush_r+0x7c>
 800760a:	6560      	str	r0, [r4, #84]	; 0x54
 800760c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800760e:	602f      	str	r7, [r5, #0]
 8007610:	2900      	cmp	r1, #0
 8007612:	d0ca      	beq.n	80075aa <__sflush_r+0x1a>
 8007614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007618:	4299      	cmp	r1, r3
 800761a:	d002      	beq.n	8007622 <__sflush_r+0x92>
 800761c:	4628      	mov	r0, r5
 800761e:	f7ff fc49 	bl	8006eb4 <_free_r>
 8007622:	2000      	movs	r0, #0
 8007624:	6360      	str	r0, [r4, #52]	; 0x34
 8007626:	e7c1      	b.n	80075ac <__sflush_r+0x1c>
 8007628:	6a21      	ldr	r1, [r4, #32]
 800762a:	2301      	movs	r3, #1
 800762c:	4628      	mov	r0, r5
 800762e:	47b0      	blx	r6
 8007630:	1c41      	adds	r1, r0, #1
 8007632:	d1c7      	bne.n	80075c4 <__sflush_r+0x34>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0c4      	beq.n	80075c4 <__sflush_r+0x34>
 800763a:	2b1d      	cmp	r3, #29
 800763c:	d001      	beq.n	8007642 <__sflush_r+0xb2>
 800763e:	2b16      	cmp	r3, #22
 8007640:	d101      	bne.n	8007646 <__sflush_r+0xb6>
 8007642:	602f      	str	r7, [r5, #0]
 8007644:	e7b1      	b.n	80075aa <__sflush_r+0x1a>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	e7ad      	b.n	80075ac <__sflush_r+0x1c>
 8007650:	690f      	ldr	r7, [r1, #16]
 8007652:	2f00      	cmp	r7, #0
 8007654:	d0a9      	beq.n	80075aa <__sflush_r+0x1a>
 8007656:	0793      	lsls	r3, r2, #30
 8007658:	680e      	ldr	r6, [r1, #0]
 800765a:	bf08      	it	eq
 800765c:	694b      	ldreq	r3, [r1, #20]
 800765e:	600f      	str	r7, [r1, #0]
 8007660:	bf18      	it	ne
 8007662:	2300      	movne	r3, #0
 8007664:	eba6 0807 	sub.w	r8, r6, r7
 8007668:	608b      	str	r3, [r1, #8]
 800766a:	f1b8 0f00 	cmp.w	r8, #0
 800766e:	dd9c      	ble.n	80075aa <__sflush_r+0x1a>
 8007670:	6a21      	ldr	r1, [r4, #32]
 8007672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007674:	4643      	mov	r3, r8
 8007676:	463a      	mov	r2, r7
 8007678:	4628      	mov	r0, r5
 800767a:	47b0      	blx	r6
 800767c:	2800      	cmp	r0, #0
 800767e:	dc06      	bgt.n	800768e <__sflush_r+0xfe>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e78e      	b.n	80075ac <__sflush_r+0x1c>
 800768e:	4407      	add	r7, r0
 8007690:	eba8 0800 	sub.w	r8, r8, r0
 8007694:	e7e9      	b.n	800766a <__sflush_r+0xda>
 8007696:	bf00      	nop
 8007698:	20400001 	.word	0x20400001

0800769c <_fflush_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	690b      	ldr	r3, [r1, #16]
 80076a0:	4605      	mov	r5, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	b913      	cbnz	r3, 80076ac <_fflush_r+0x10>
 80076a6:	2500      	movs	r5, #0
 80076a8:	4628      	mov	r0, r5
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	b118      	cbz	r0, 80076b6 <_fflush_r+0x1a>
 80076ae:	6983      	ldr	r3, [r0, #24]
 80076b0:	b90b      	cbnz	r3, 80076b6 <_fflush_r+0x1a>
 80076b2:	f000 f887 	bl	80077c4 <__sinit>
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <_fflush_r+0x6c>)
 80076b8:	429c      	cmp	r4, r3
 80076ba:	d11b      	bne.n	80076f4 <_fflush_r+0x58>
 80076bc:	686c      	ldr	r4, [r5, #4]
 80076be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0ef      	beq.n	80076a6 <_fflush_r+0xa>
 80076c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c8:	07d0      	lsls	r0, r2, #31
 80076ca:	d404      	bmi.n	80076d6 <_fflush_r+0x3a>
 80076cc:	0599      	lsls	r1, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_fflush_r+0x3a>
 80076d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076d2:	f000 f915 	bl	8007900 <__retarget_lock_acquire_recursive>
 80076d6:	4628      	mov	r0, r5
 80076d8:	4621      	mov	r1, r4
 80076da:	f7ff ff59 	bl	8007590 <__sflush_r>
 80076de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076e0:	07da      	lsls	r2, r3, #31
 80076e2:	4605      	mov	r5, r0
 80076e4:	d4e0      	bmi.n	80076a8 <_fflush_r+0xc>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	059b      	lsls	r3, r3, #22
 80076ea:	d4dd      	bmi.n	80076a8 <_fflush_r+0xc>
 80076ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ee:	f000 f908 	bl	8007902 <__retarget_lock_release_recursive>
 80076f2:	e7d9      	b.n	80076a8 <_fflush_r+0xc>
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <_fflush_r+0x70>)
 80076f6:	429c      	cmp	r4, r3
 80076f8:	d101      	bne.n	80076fe <_fflush_r+0x62>
 80076fa:	68ac      	ldr	r4, [r5, #8]
 80076fc:	e7df      	b.n	80076be <_fflush_r+0x22>
 80076fe:	4b04      	ldr	r3, [pc, #16]	; (8007710 <_fflush_r+0x74>)
 8007700:	429c      	cmp	r4, r3
 8007702:	bf08      	it	eq
 8007704:	68ec      	ldreq	r4, [r5, #12]
 8007706:	e7da      	b.n	80076be <_fflush_r+0x22>
 8007708:	08007f74 	.word	0x08007f74
 800770c:	08007f94 	.word	0x08007f94
 8007710:	08007f54 	.word	0x08007f54

08007714 <std>:
 8007714:	2300      	movs	r3, #0
 8007716:	b510      	push	{r4, lr}
 8007718:	4604      	mov	r4, r0
 800771a:	e9c0 3300 	strd	r3, r3, [r0]
 800771e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007722:	6083      	str	r3, [r0, #8]
 8007724:	8181      	strh	r1, [r0, #12]
 8007726:	6643      	str	r3, [r0, #100]	; 0x64
 8007728:	81c2      	strh	r2, [r0, #14]
 800772a:	6183      	str	r3, [r0, #24]
 800772c:	4619      	mov	r1, r3
 800772e:	2208      	movs	r2, #8
 8007730:	305c      	adds	r0, #92	; 0x5c
 8007732:	f7fd fd1d 	bl	8005170 <memset>
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x38>)
 8007738:	6263      	str	r3, [r4, #36]	; 0x24
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <std+0x3c>)
 800773c:	62a3      	str	r3, [r4, #40]	; 0x28
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <std+0x40>)
 8007740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <std+0x44>)
 8007744:	6224      	str	r4, [r4, #32]
 8007746:	6323      	str	r3, [r4, #48]	; 0x30
 8007748:	bd10      	pop	{r4, pc}
 800774a:	bf00      	nop
 800774c:	08007a59 	.word	0x08007a59
 8007750:	08007a7b 	.word	0x08007a7b
 8007754:	08007ab3 	.word	0x08007ab3
 8007758:	08007ad7 	.word	0x08007ad7

0800775c <_cleanup_r>:
 800775c:	4901      	ldr	r1, [pc, #4]	; (8007764 <_cleanup_r+0x8>)
 800775e:	f000 b8af 	b.w	80078c0 <_fwalk_reent>
 8007762:	bf00      	nop
 8007764:	0800769d 	.word	0x0800769d

08007768 <__sfmoreglue>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	2268      	movs	r2, #104	; 0x68
 800776c:	1e4d      	subs	r5, r1, #1
 800776e:	4355      	muls	r5, r2
 8007770:	460e      	mov	r6, r1
 8007772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007776:	f7ff fc09 	bl	8006f8c <_malloc_r>
 800777a:	4604      	mov	r4, r0
 800777c:	b140      	cbz	r0, 8007790 <__sfmoreglue+0x28>
 800777e:	2100      	movs	r1, #0
 8007780:	e9c0 1600 	strd	r1, r6, [r0]
 8007784:	300c      	adds	r0, #12
 8007786:	60a0      	str	r0, [r4, #8]
 8007788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800778c:	f7fd fcf0 	bl	8005170 <memset>
 8007790:	4620      	mov	r0, r4
 8007792:	bd70      	pop	{r4, r5, r6, pc}

08007794 <__sfp_lock_acquire>:
 8007794:	4801      	ldr	r0, [pc, #4]	; (800779c <__sfp_lock_acquire+0x8>)
 8007796:	f000 b8b3 	b.w	8007900 <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	20000401 	.word	0x20000401

080077a0 <__sfp_lock_release>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__sfp_lock_release+0x8>)
 80077a2:	f000 b8ae 	b.w	8007902 <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	20000401 	.word	0x20000401

080077ac <__sinit_lock_acquire>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__sinit_lock_acquire+0x8>)
 80077ae:	f000 b8a7 	b.w	8007900 <__retarget_lock_acquire_recursive>
 80077b2:	bf00      	nop
 80077b4:	20000402 	.word	0x20000402

080077b8 <__sinit_lock_release>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__sinit_lock_release+0x8>)
 80077ba:	f000 b8a2 	b.w	8007902 <__retarget_lock_release_recursive>
 80077be:	bf00      	nop
 80077c0:	20000402 	.word	0x20000402

080077c4 <__sinit>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4604      	mov	r4, r0
 80077c8:	f7ff fff0 	bl	80077ac <__sinit_lock_acquire>
 80077cc:	69a3      	ldr	r3, [r4, #24]
 80077ce:	b11b      	cbz	r3, 80077d8 <__sinit+0x14>
 80077d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d4:	f7ff bff0 	b.w	80077b8 <__sinit_lock_release>
 80077d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077dc:	6523      	str	r3, [r4, #80]	; 0x50
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <__sinit+0x68>)
 80077e0:	4a13      	ldr	r2, [pc, #76]	; (8007830 <__sinit+0x6c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	bf04      	itt	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	61a3      	streq	r3, [r4, #24]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f820 	bl	8007834 <__sfp>
 80077f4:	6060      	str	r0, [r4, #4]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f81c 	bl	8007834 <__sfp>
 80077fc:	60a0      	str	r0, [r4, #8]
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 f818 	bl	8007834 <__sfp>
 8007804:	2200      	movs	r2, #0
 8007806:	60e0      	str	r0, [r4, #12]
 8007808:	2104      	movs	r1, #4
 800780a:	6860      	ldr	r0, [r4, #4]
 800780c:	f7ff ff82 	bl	8007714 <std>
 8007810:	68a0      	ldr	r0, [r4, #8]
 8007812:	2201      	movs	r2, #1
 8007814:	2109      	movs	r1, #9
 8007816:	f7ff ff7d 	bl	8007714 <std>
 800781a:	68e0      	ldr	r0, [r4, #12]
 800781c:	2202      	movs	r2, #2
 800781e:	2112      	movs	r1, #18
 8007820:	f7ff ff78 	bl	8007714 <std>
 8007824:	2301      	movs	r3, #1
 8007826:	61a3      	str	r3, [r4, #24]
 8007828:	e7d2      	b.n	80077d0 <__sinit+0xc>
 800782a:	bf00      	nop
 800782c:	08007bd8 	.word	0x08007bd8
 8007830:	0800775d 	.word	0x0800775d

08007834 <__sfp>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	4607      	mov	r7, r0
 8007838:	f7ff ffac 	bl	8007794 <__sfp_lock_acquire>
 800783c:	4b1e      	ldr	r3, [pc, #120]	; (80078b8 <__sfp+0x84>)
 800783e:	681e      	ldr	r6, [r3, #0]
 8007840:	69b3      	ldr	r3, [r6, #24]
 8007842:	b913      	cbnz	r3, 800784a <__sfp+0x16>
 8007844:	4630      	mov	r0, r6
 8007846:	f7ff ffbd 	bl	80077c4 <__sinit>
 800784a:	3648      	adds	r6, #72	; 0x48
 800784c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007850:	3b01      	subs	r3, #1
 8007852:	d503      	bpl.n	800785c <__sfp+0x28>
 8007854:	6833      	ldr	r3, [r6, #0]
 8007856:	b30b      	cbz	r3, 800789c <__sfp+0x68>
 8007858:	6836      	ldr	r6, [r6, #0]
 800785a:	e7f7      	b.n	800784c <__sfp+0x18>
 800785c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007860:	b9d5      	cbnz	r5, 8007898 <__sfp+0x64>
 8007862:	4b16      	ldr	r3, [pc, #88]	; (80078bc <__sfp+0x88>)
 8007864:	60e3      	str	r3, [r4, #12]
 8007866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800786a:	6665      	str	r5, [r4, #100]	; 0x64
 800786c:	f000 f847 	bl	80078fe <__retarget_lock_init_recursive>
 8007870:	f7ff ff96 	bl	80077a0 <__sfp_lock_release>
 8007874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800787c:	6025      	str	r5, [r4, #0]
 800787e:	61a5      	str	r5, [r4, #24]
 8007880:	2208      	movs	r2, #8
 8007882:	4629      	mov	r1, r5
 8007884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007888:	f7fd fc72 	bl	8005170 <memset>
 800788c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007894:	4620      	mov	r0, r4
 8007896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007898:	3468      	adds	r4, #104	; 0x68
 800789a:	e7d9      	b.n	8007850 <__sfp+0x1c>
 800789c:	2104      	movs	r1, #4
 800789e:	4638      	mov	r0, r7
 80078a0:	f7ff ff62 	bl	8007768 <__sfmoreglue>
 80078a4:	4604      	mov	r4, r0
 80078a6:	6030      	str	r0, [r6, #0]
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d1d5      	bne.n	8007858 <__sfp+0x24>
 80078ac:	f7ff ff78 	bl	80077a0 <__sfp_lock_release>
 80078b0:	230c      	movs	r3, #12
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	e7ee      	b.n	8007894 <__sfp+0x60>
 80078b6:	bf00      	nop
 80078b8:	08007bd8 	.word	0x08007bd8
 80078bc:	ffff0001 	.word	0xffff0001

080078c0 <_fwalk_reent>:
 80078c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c4:	4606      	mov	r6, r0
 80078c6:	4688      	mov	r8, r1
 80078c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078cc:	2700      	movs	r7, #0
 80078ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078d2:	f1b9 0901 	subs.w	r9, r9, #1
 80078d6:	d505      	bpl.n	80078e4 <_fwalk_reent+0x24>
 80078d8:	6824      	ldr	r4, [r4, #0]
 80078da:	2c00      	cmp	r4, #0
 80078dc:	d1f7      	bne.n	80078ce <_fwalk_reent+0xe>
 80078de:	4638      	mov	r0, r7
 80078e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e4:	89ab      	ldrh	r3, [r5, #12]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d907      	bls.n	80078fa <_fwalk_reent+0x3a>
 80078ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078ee:	3301      	adds	r3, #1
 80078f0:	d003      	beq.n	80078fa <_fwalk_reent+0x3a>
 80078f2:	4629      	mov	r1, r5
 80078f4:	4630      	mov	r0, r6
 80078f6:	47c0      	blx	r8
 80078f8:	4307      	orrs	r7, r0
 80078fa:	3568      	adds	r5, #104	; 0x68
 80078fc:	e7e9      	b.n	80078d2 <_fwalk_reent+0x12>

080078fe <__retarget_lock_init_recursive>:
 80078fe:	4770      	bx	lr

08007900 <__retarget_lock_acquire_recursive>:
 8007900:	4770      	bx	lr

08007902 <__retarget_lock_release_recursive>:
 8007902:	4770      	bx	lr

08007904 <__swhatbuf_r>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	460e      	mov	r6, r1
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	2900      	cmp	r1, #0
 800790e:	b096      	sub	sp, #88	; 0x58
 8007910:	4614      	mov	r4, r2
 8007912:	461d      	mov	r5, r3
 8007914:	da08      	bge.n	8007928 <__swhatbuf_r+0x24>
 8007916:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	061a      	lsls	r2, r3, #24
 8007920:	d410      	bmi.n	8007944 <__swhatbuf_r+0x40>
 8007922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007926:	e00e      	b.n	8007946 <__swhatbuf_r+0x42>
 8007928:	466a      	mov	r2, sp
 800792a:	f000 f8fb 	bl	8007b24 <_fstat_r>
 800792e:	2800      	cmp	r0, #0
 8007930:	dbf1      	blt.n	8007916 <__swhatbuf_r+0x12>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007938:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800793c:	425a      	negs	r2, r3
 800793e:	415a      	adcs	r2, r3
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	e7ee      	b.n	8007922 <__swhatbuf_r+0x1e>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	2000      	movs	r0, #0
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	b016      	add	sp, #88	; 0x58
 800794c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007950 <__smakebuf_r>:
 8007950:	898b      	ldrh	r3, [r1, #12]
 8007952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007954:	079d      	lsls	r5, r3, #30
 8007956:	4606      	mov	r6, r0
 8007958:	460c      	mov	r4, r1
 800795a:	d507      	bpl.n	800796c <__smakebuf_r+0x1c>
 800795c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	2301      	movs	r3, #1
 8007966:	6163      	str	r3, [r4, #20]
 8007968:	b002      	add	sp, #8
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	ab01      	add	r3, sp, #4
 800796e:	466a      	mov	r2, sp
 8007970:	f7ff ffc8 	bl	8007904 <__swhatbuf_r>
 8007974:	9900      	ldr	r1, [sp, #0]
 8007976:	4605      	mov	r5, r0
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff fb07 	bl	8006f8c <_malloc_r>
 800797e:	b948      	cbnz	r0, 8007994 <__smakebuf_r+0x44>
 8007980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007984:	059a      	lsls	r2, r3, #22
 8007986:	d4ef      	bmi.n	8007968 <__smakebuf_r+0x18>
 8007988:	f023 0303 	bic.w	r3, r3, #3
 800798c:	f043 0302 	orr.w	r3, r3, #2
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	e7e3      	b.n	800795c <__smakebuf_r+0xc>
 8007994:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <__smakebuf_r+0x7c>)
 8007996:	62b3      	str	r3, [r6, #40]	; 0x28
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	6020      	str	r0, [r4, #0]
 800799c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a0:	81a3      	strh	r3, [r4, #12]
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	6163      	str	r3, [r4, #20]
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	6120      	str	r0, [r4, #16]
 80079aa:	b15b      	cbz	r3, 80079c4 <__smakebuf_r+0x74>
 80079ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f8c9 	bl	8007b48 <_isatty_r>
 80079b6:	b128      	cbz	r0, 80079c4 <__smakebuf_r+0x74>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	89a0      	ldrh	r0, [r4, #12]
 80079c6:	4305      	orrs	r5, r0
 80079c8:	81a5      	strh	r5, [r4, #12]
 80079ca:	e7cd      	b.n	8007968 <__smakebuf_r+0x18>
 80079cc:	0800775d 	.word	0x0800775d

080079d0 <_raise_r>:
 80079d0:	291f      	cmp	r1, #31
 80079d2:	b538      	push	{r3, r4, r5, lr}
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	d904      	bls.n	80079e4 <_raise_r+0x14>
 80079da:	2316      	movs	r3, #22
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	f04f 30ff 	mov.w	r0, #4294967295
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079e6:	b112      	cbz	r2, 80079ee <_raise_r+0x1e>
 80079e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079ec:	b94b      	cbnz	r3, 8007a02 <_raise_r+0x32>
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f830 	bl	8007a54 <_getpid_r>
 80079f4:	462a      	mov	r2, r5
 80079f6:	4601      	mov	r1, r0
 80079f8:	4620      	mov	r0, r4
 80079fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079fe:	f000 b817 	b.w	8007a30 <_kill_r>
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d00a      	beq.n	8007a1c <_raise_r+0x4c>
 8007a06:	1c59      	adds	r1, r3, #1
 8007a08:	d103      	bne.n	8007a12 <_raise_r+0x42>
 8007a0a:	2316      	movs	r3, #22
 8007a0c:	6003      	str	r3, [r0, #0]
 8007a0e:	2001      	movs	r0, #1
 8007a10:	e7e7      	b.n	80079e2 <_raise_r+0x12>
 8007a12:	2400      	movs	r4, #0
 8007a14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a18:	4628      	mov	r0, r5
 8007a1a:	4798      	blx	r3
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e7e0      	b.n	80079e2 <_raise_r+0x12>

08007a20 <raise>:
 8007a20:	4b02      	ldr	r3, [pc, #8]	; (8007a2c <raise+0xc>)
 8007a22:	4601      	mov	r1, r0
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	f7ff bfd3 	b.w	80079d0 <_raise_r>
 8007a2a:	bf00      	nop
 8007a2c:	2000000c 	.word	0x2000000c

08007a30 <_kill_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	; (8007a50 <_kill_r+0x20>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	602b      	str	r3, [r5, #0]
 8007a3e:	f7fa f84d 	bl	8001adc <_kill>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d102      	bne.n	8007a4c <_kill_r+0x1c>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b103      	cbz	r3, 8007a4c <_kill_r+0x1c>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	200003fc 	.word	0x200003fc

08007a54 <_getpid_r>:
 8007a54:	f7fa b83a 	b.w	8001acc <_getpid>

08007a58 <__sread>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	f000 f894 	bl	8007b8c <_read_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	bfab      	itete	ge
 8007a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a6c:	181b      	addge	r3, r3, r0
 8007a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a72:	bfac      	ite	ge
 8007a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a76:	81a3      	strhlt	r3, [r4, #12]
 8007a78:	bd10      	pop	{r4, pc}

08007a7a <__swrite>:
 8007a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	461f      	mov	r7, r3
 8007a80:	898b      	ldrh	r3, [r1, #12]
 8007a82:	05db      	lsls	r3, r3, #23
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	4616      	mov	r6, r2
 8007a8a:	d505      	bpl.n	8007a98 <__swrite+0x1e>
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	2302      	movs	r3, #2
 8007a92:	2200      	movs	r2, #0
 8007a94:	f000 f868 	bl	8007b68 <_lseek_r>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aae:	f000 b817 	b.w	8007ae0 <_write_r>

08007ab2 <__sseek>:
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aba:	f000 f855 	bl	8007b68 <_lseek_r>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	bf15      	itete	ne
 8007ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ace:	81a3      	strheq	r3, [r4, #12]
 8007ad0:	bf18      	it	ne
 8007ad2:	81a3      	strhne	r3, [r4, #12]
 8007ad4:	bd10      	pop	{r4, pc}

08007ad6 <__sclose>:
 8007ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ada:	f000 b813 	b.w	8007b04 <_close_r>
	...

08007ae0 <_write_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d07      	ldr	r5, [pc, #28]	; (8007b00 <_write_r+0x20>)
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7fa f82b 	bl	8001b4a <_write>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_write_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_write_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	200003fc 	.word	0x200003fc

08007b04 <_close_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d06      	ldr	r5, [pc, #24]	; (8007b20 <_close_r+0x1c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7fa f837 	bl	8001b82 <_close>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_close_r+0x1a>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_close_r+0x1a>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	200003fc 	.word	0x200003fc

08007b24 <_fstat_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	; (8007b44 <_fstat_r+0x20>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	f7fa f832 	bl	8001b9a <_fstat>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d102      	bne.n	8007b40 <_fstat_r+0x1c>
 8007b3a:	682b      	ldr	r3, [r5, #0]
 8007b3c:	b103      	cbz	r3, 8007b40 <_fstat_r+0x1c>
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	200003fc 	.word	0x200003fc

08007b48 <_isatty_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_isatty_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7fa f831 	bl	8001bba <_isatty>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_isatty_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_isatty_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200003fc 	.word	0x200003fc

08007b68 <_lseek_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	; (8007b88 <_lseek_r+0x20>)
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4611      	mov	r1, r2
 8007b72:	2200      	movs	r2, #0
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7fa f82a 	bl	8001bd0 <_lseek>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_lseek_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_lseek_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	200003fc 	.word	0x200003fc

08007b8c <_read_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d07      	ldr	r5, [pc, #28]	; (8007bac <_read_r+0x20>)
 8007b90:	4604      	mov	r4, r0
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	602a      	str	r2, [r5, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f7f9 ffb8 	bl	8001b10 <_read>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_read_r+0x1e>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_read_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	200003fc 	.word	0x200003fc

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
